
_@lobby testRead: filename encoding: encoding
[| test times |
  test: ExtensibleArray new.
  (File newNamed: filename &mode: File Read)
    sessionDo:
      [| :file decoder |
       decoder: (encoding Decoder newOn: file reader).
       [decoder isAtEnd] whileFalse:
         [test addLast: decoder next]].
  test as: UnicodeString
].

_@lobby testRW: sourceFileName to: targetFileName inEncoding: inenc outEncoding: outenc &littleEndian: le
[
  (File newNamed: sourceFileName &mode: File Read) sessionDo:
    [| :source |
     (File newNamed: targetFileName &mode: File CreateWrite)
       sessionDo:
         [| :target |
          (inenc Decoder newOn: source reader)
	    >> (outenc Encoder newOn: target writer &littleEndian: le)]].
].

lobby addSlot: #test valued: (testRead: 'tests/testuni.txt' encoding: UTF8).
Unicode subsetAt: ((test at: 0) as: Integer).
(test at: 0) isLetter.

lobby addSlot: #encoder valued: (UTF8 Encoder newOn: Console writer).
test reader >> encoder.

"The test files aren't here because I'm not sure about copyrights. You can find them at 
http://jshin.net/i18n/utftest/"

lobby addSlot: #test16BE valued: (testRead: 'tests/i18n/nobom.utf16be.html' encoding: UTF16BE).
lobby addSlot: #test16LE valued: (testRead: 'tests/i18n/nobom.utf16le.html' encoding: UTF16LE).
lobby addSlot: #test16BEBOM valued: (testRead: 'tests/i18n/bom.utf16be.html' encoding: UTF16).
lobby addSlot: #test16LEBOM valued: (testRead: 'tests/i18n/bom.utf16le.html' encoding: UTF16).

testRW: 'tests/i18n/nobom.utf16be.html' to: 'tests/i18n/test-nobom16be' inEncoding: UTF16BE outEncoding: UTF16BE.
testRW: 'tests/i18n/nobom.utf16le.html' to: 'tests/i18n/test-nobom16le' inEncoding: UTF16LE outEncoding: UTF16LE.
testRW: 'tests/i18n/bom.utf16be.html' to: 'tests/i18n/test-bom16be' inEncoding: UTF16 outEncoding: UTF16.
testRW: 'tests/i18n/bom.utf16le.html' to: 'tests/i18n/test-bom16le' inEncoding: UTF16 outEncoding: UTF16 &littleEndian: True.

"This just check that the normalization does something. Add tests whether the results are correct."

('kдце' as: UnicodeString) normalizeTo: Unicode NFD.
('kдце' as: UnicodeString) normalizeTo: Unicode NFKD.
('kдце' as: UnicodeString) normalizeTo: Unicode NFC.
('kдце' as: UnicodeString) normalizeTo: Unicode NFKC.


Setup
-----

'make vm' for debugging vm
'make vm.fast' for non-debugging vm


Command Line
------------

vm [image-file]

This starts slate using [image-file]. If omitted, it uses
slate.image by default.


Bootstrapping
-------------

Run vm to get a repl.

load: 'src/mobius/init.slate'.
Image littleEndian: True bitSize: 64. "I may change the name of this function soon."


Debugging
---------
gdb vm
r <image-file>
(on crash or Ctrl-c)
bt
f <n> (change frame to one with an 'oh' object (struct object_heap*))

See the slate backtrace -> print print_backtrace(oh)
Inspect an object       -> print print_detail(oh, struct Object*)
See the stack           -> print print_stack_types(oh, 200)


Compiler
--------

A simple example:

[ | :c genCode|
genCode: (c generate:
[
 1 + 1
] 
method sourceTree result: Nil &topLevel: True) code.
c decompile: genCode
] applyWith: VM SSACompiler new.



Inside a function definition:


[ | :c genCode|
genCode: (c generate:
[
 block@(Method traits) on: c@(Condition traits) do: handler
[| context |
  context: (c cloneSettingSlots: #(handlers exitContinuation)
	      to: {{handler}. [| :result | ^ result]}).
  conditionStack push: context.
  block ensure: [conditionStack pop]
].

] 
method sourceTree result: Nil &topLevel: True) code.
c decompile: genCode third code
] applyWith: VM SSACompiler new.


Inside the closure:

[ | :c genCode|
genCode: (c generate:
[
 block@(Method traits) on: c@(Condition traits) do: handler
[| context |
  context: (c cloneSettingSlots: #(handlers exitContinuation)
	      to: {{handler}. [| :result | ^ result]}).
  conditionStack push: context.
  block ensure: [conditionStack pop]
].

] 
method sourceTree result: Nil &topLevel: True) code.
c decompile: (genCode third code at: 13) code
] applyWith: VM SSACompiler new.

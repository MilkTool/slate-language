lobby ensureNamespace: #Net.

"slate asynchronous operations...I created these because I didn't
like the way promises worked"

"fixme ... better condition handling... replace #error: calls"

Net define: #AsyncOperation &parents: {Cloneable}
&slots: {#dependsOn -> ExtensibleArray new.
         #result -> Nil.
         #finished -> False.
         #canStart -> True. "false=dependsOn has unfinished. true=dependsOn all finished"
         #observers -> ExtensibleArray new.
         #completionBlock -> Nil.
         }.

o@(Net AsyncOperation traits) new [resend `>> [dependsOn: ExtensibleArray new. observers := ExtensibleArray new. ]].

o@(Net AsyncOperation traits) workOn [overrideThis].

o@(Net AsyncOperation traits) do [[o finished] whileFalse: [o workOn]. o result].

o@(Net AsyncOperation traits) noteCompletionOf: obj
[
  o canStart := o dependenciesFinished.
].

o@(Net AsyncOperation traits) dependenciesFinished
[
  o dependsOn allSatisfy: #finished `er
].

o@(Net AsyncOperation traits) reset
[
  o finished := False.
  o result := Nil.
].

o@(Net AsyncOperation traits) complete &result: result
[
  result ifNotNil: [o result := result].
  o finished := True.
  o completionBlock ifNotNilDo: [| :cb | cb applyWith: o].
  o observers do: [| :obs | obs noteCompletionOf: o].
].

Net define: #AsyncBlockOperation &parents: {Net AsyncOperation}
&slots: {#workBlock. "takes care of setting result and calling #complete"
         #notifyBlock
         }.

o@(Net AsyncBlockOperation traits) workOn [o canStart ifTrue: [o workBlock do]. o].

o@(Net AsyncOperation traits) noteCompletionOf: obj
[
  resend.
  o notifyBlock ifNotNilDo: [| :b | b applyWith: obj]
].

Net define: #AsyncSendOperation &parents: {Net AsyncOperation}
&slots: {#buffer. #start. #end. #handle
         }.

o@(Net AsyncSendOperation traits) newOn: handle buffer: buf &start: start &end: end
[
  start `defaultsTo: 0.
  end `defaultsTo: buf size.

  o new `>> [handle := handle. buffer := buf. start := start. end := end. ]
].

str@(String traits) as: o@(Net AsyncSendOperation traits)
[| buf |
  buf := (str as: ByteArray).
  o new `>> [buffer := buf. start := 0. end := buf size. ]
].

o@(Net AsyncSendOperation traits) workOn
[| fds return i |
  o canStart ifTrue:
    [[(fds := ({o handle} selectOnWritePipesFor: 0))
        isEmpty ifTrue: [^ Nil].
      (return := (o buffer writeToPipe: o handle start: o start end: o end))
        isZero ifTrue: [error: 'write failed'].
      return isNegative
        /\ [return ~= Net Socket ErrorCodes InProgress]
        ifTrue: [Net Socket throwError: return].
      return isPositive
        ifTrue: [o start := o start + return].
      o start < o end] whileTrue.
     o complete]
].

Net define: #AsyncReceiveUntilOperation &parents: {Net AsyncOperation}
&slots: {#handle. #buffer. #untilCode. #amount. #count. #resultModifier
         }.

_@(Net AsyncReceiveUntilOperation traits) new
[
  resend `>> [reset. ]
].

o@(Net AsyncReceiveUntilOperation traits) newOn: handle &until: code &count: amount &resultModifier: rm
[
  amount `defaultsTo: PositiveInfinity.
  o new `>> [handle := handle.
             buffer := ExtensibleByteArray new. 
             count := 0.
             untilCode := code.
             resultModifier := rm.
             amount := amount. ]
].

o@(Net AsyncReceiveUntilOperation traits) reset
[
  o buffer := ExtensibleByteArray new.
  o count := 0.
  resend
].

o@(Net AsyncReceiveUntilOperation traits) workOn
[| fds return buffer char |
  o canStart ifTrue:
    [buffer := (ByteArray newSize: 1).
     [o count >= o amount 
        ifTrue: [^ (o complete &result:
                      (o resultModifier ifNil: [o buffer] ifNotNilDo: [| :m | m applyWith: o buffer]))].
      (fds := {o handle} selectOnReadPipesFor: 0)
        isEmpty ifTrue: [^ Nil].
      (return := buffer readFromPipe: o handle start: 0 end: 1)
        isZero ifTrue: [error: 'receiveuntil read failed'].
      return isNegative
        ifTrue: [Net Socket throwError: return].

      char := (buffer at: 0).
      o buffer addLast: char.
      o count := o count + 1.
      char = o untilCode] whileFalse.
     o complete &result:
       (o resultModifier ifNil: [o buffer] ifNotNilDo: [| :m | m applyWith: o buffer])]
].

Net define: #AsyncConnectOperation &parents: {Net AsyncOperation}
&slots: {#address. #handle. #connectAttempted
         }.

_@(Net AsyncConnectOperation traits) new
[
  resend `>> [connectAttempted: False. ]
].

"the format returned by the resolve function"
o@(Net AsyncConnectOperation traits) newOn: array@(Sequence traits)
[
  o newOnDomain: array second type: array third protocol: array fourth address: array fifth
].

o@(Net AsyncConnectOperation traits) newOnDomain: domain type: type protocol: protocol address: address
[| socket |
  socket := (domain socketCreate: type protocol: protocol).
  socket < 0 ifTrue: [Net Socket throwError: socket].
  o new `>> [handle := socket. address := address. connectAttempted := False. ]
].

o@(Net AsyncConnectOperation traits) newOn: address@(Net SocketAddress traits)
[| socket |
  socket := (Net Socket newFor: address domain type: Net Socket Types Stream protocol: Net Socket Protocols Default).
  o new `>> [handle := socket handle. address := address address. connectAttempted := False. ]
].

o@(Net AsyncConnectOperation traits) newOn: hostname@(String traits)
[| addr socket |
  addr := (Net SocketAddress newOn: hostname).
  o newOn: addr
].

o@(Net AsyncConnectOperation traits) workOn
[| return fds |
  o canStart ifTrue:
    [o connectAttempted
       ifFalse: [return := o handle socketConnect: o address.
                 return isNegative /\ [return ~= Net Socket ErrorCodes InProgress] ifTrue: [Net Socket throwError: return].
                 o connectAttempted := True].
     (fds := {o handle} selectOnWritePipesFor: 0)
       isEmpty ifTrue: [^ Nil].
     (return := o handle socketGetError)
       isZero ifFalse: [Net Socket throwError: return].
     o complete &result: o handle]
].

Net define: #AsyncCloseOperation &parents: {Net AsyncOperation}
&slots: {#handle
         }.

o@(Net AsyncCloseOperation traits) newOn: handle
[ 
  o new `>> [handle := handle. ]
].

o@(Net AsyncCloseOperation traits) workOn
[| return |
  o canStart ifFalse: [^ Nil].
  (return := o handle closePipe)
    isNegative ifTrue: [Net Socket throwError: return].
  o complete
].


Net define: #AsyncResolveOperation &parents: {Net AsyncOperation}
&slots: {#name. #service. #family. #type. #protocol. #flags.
#ticket
         }.

o@(Net AsyncResolveOperation traits) newOn: name
&service: service &family: family &type: type &protocol: protocol &flags: flags
[ 
  family `defaultsTo: Net Socket Domains IP4.
  type `defaultsTo: Net Socket Types Stream.
  protocol `defaultsTo: Net Socket Protocols Default.
  flags `defaultsTo: 0.

  o new `>> [name := name. service := service. 
             family := family. type := type. protocol := protocol. flags := flags.
             ticket := Nil.
             ]
].

o@(Net AsyncResolveOperation traits) workOn
[
  o canStart ifTrue:
    [o ticket `defaultsTo: (lobby getAddrInfo: o name service: o service family: o family
                              type: o type protocol: o protocol flags: o flags).
     o ticket getAddrInfoResult
       ifNotNilDo:
         [| :return |
          (return is: Sequence)
            ifTrue: [o ticket freeAddrInfoResult.
                     o complete &result: return]
            ifFalse: [Net Socket throwError: return]]]
].

o@(Net AsyncResolveOperation traits) result: n as: type@(Net SocketAddress traits)
[| resN |
  o result ifNil: [error: 'no result from resolve operation'].
  o result isEmpty ifTrue: [error: 'resolved address result is empty'].
  resN := (o result at: n).
  (type forDomain: resN second) new `>> [address := resN fifth. ]
].

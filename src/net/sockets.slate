
lobby ensureNamespace: #Net.

"Slate based sockets. For maximum performance, you should use the async operations
classes to handle more than one operation at a time. These basically turn non-blocking
operations into blocking ones."

"fixme, i just changed this to an externalresource from cloneable so i need to make sure i
add back the right methods"

Net define: #Socket &parents: {ExternalResource} &slots: {#address}.
Net define: #SocketServerConnection &parents: {Net Socket} &slots: {#peerAddress -> Nil}.
Net define: #SocketAddress &parents: {Cloneable} &slots: {#address -> Nil}.
Net define: #IP4Address &parents: {Net SocketAddress}.
Net define: #IP6Address &parents: {Net SocketAddress}.
Net define: #UnixDomainAddress &parents: {Net SocketAddress}.

Net define: #SocketServer &parents: {Cloneable}
 &slots: {#pipeToLoop -> Nil. #ip -> Nil. #port -> Nil. #dispatch -> Nil}.


Net Socket traits ensureNamespace: #ErrorCodes.
Net Socket traits ensureNamespace: #Domains.
Net Socket traits ensureNamespace: #Types.
Net Socket traits ensureNamespace: #Protocols.
Net Socket traits addSlot: #SelectTimeout valued: 99999999.
Net Socket traits addSlot: #BufferSize valued: 1024.

Net Socket addSlot: #AddressTypes valued: {Net IP4Address. Net IP6Address. Net UnixDomainAddress}.

Net Socket ErrorCodes addSlot: #Dictionary valued: Dictionary new.

{

  #Error -> -1.
  #AccessDenied -> -2.
  #NoSupport -> -3.
  #Invalid -> -4.
  #Overflow -> -5.
  #NoMemory -> -6.
  #InUse -> -7.
  #BadFD -> -8.
  #Again -> -9.
  #WouldBlock -> -10.
  #ConnectionAborted -> -11.
  #Interrupted -> -12.
  #AlreadyInProgress -> -13.
  #ConnectionRefused -> -14.
  #InProgress -> -15.
  #AlreadyConnected -> -16.
  #NetworkUnreachable -> -17.
  #Timeout -> -18.

} do: [ | :item | 
         Net Socket ErrorCodes addImmutableSlot: item key valued: item value.
         Net Socket ErrorCodes Dictionary add: item value -> item key.
       ].

conditions define: #SocketError
  &parents: {ExternalResource SeriousCondition}
  &slots: {#error. #errorCode}.

c@(SocketError traits) describeOn: console
[
  console ; 'Socket error ' ;  c errorCode printString ; ' (' ; c error printString ; ')' ; '\n' 
].


Net Socket Domains `>> [
  addImmutableSlot: #Local valued: 1.
  addImmutableSlot: #IP4 valued: 2.
  addImmutableSlot: #IP6 valued: 3.
  ].

Net Socket Types `>> [
  addImmutableSlot: #Stream valued: 1.
  ].

Net Socket Protocols `>> [
  addImmutableSlot: #Default valued: 0.
  ].


s@(Net Socket traits) throwError: code
[
  SocketError new `>> [error: (Net Socket ErrorCodes Dictionary at: code). errorCode: code. signal]
].


s@(Net Socket traits) newFor: domain type: type protocol: proto
[ | ret |
  ret: s new.
  ret handle: (domain socketCreate: type protocol: proto).
  ret handle < 0 ifTrue: [s throwError: ret handle].
  ret
].


addr@(Net SocketAddress traits) newOn: array port: port
[ | ret |
  ret: addr new.
  ret address: (addr domain createIPAddress: array port: port options: #()).
  ret
].

_@(Net SocketAddress traits) forDomain: domain
[ 
  Net Socket AddressTypes do: [|:at| at domain = domain ifTrue: [^ at]].
  ^ Nil
].


addr@(Net SocketAddress traits) separatePort: string@(String traits)
[ |regex|
  regex: (Regex Matcher newOn: '^([^:]+)(\\:(\\d+))?$').
  (regex match: string) = -11 
                        ifTrue: [{Nil. Nil}]
                        ifFalse: [{regex subexpression: 0. regex subexpression: 2}]
].


addr@(Net SocketAddress traits) newOn: string@(String traits)
[ | regex portIp array|
  "fixme ipv6.. we don't lookup the name here"
  portIp: (addr separatePort: string).
  (portIp anySatisfy: #isNil `er) ifTrue: [error: 'unable to separate port and ip'].
  regex: (Regex Matcher newOn: '^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$').
  (regex match: portIp first) = -1
      ifTrue: [error: 'cannot get ip from string: ' ; string].
  array: ({regex subexpression: 0. regex subexpression: 1. regex subexpression: 2. regex subexpression: 3. }
            collect: #as: `er <-* Integer).
  Net IP4Address new `>> [address: (Net IP4Address domain createIPAddress: array port: (portIp second as: Integer) options: #()). ]
].

addr@(Net IP4Address traits) domain
[
  Net Socket Domains IP4
].

addr@(Net IP6Address traits) domain
[
  Net Socket Domains IP6
].

addr@(Net UnixDomainAddress traits) domain
[
  Net Socket Domains Local
].

addr@(Net SocketAddress traits) domain
[
  overrideThis
].

x@(Net SocketAddress traits) as: y@(Net SocketAddress traits)
[
  y new `>> [address: x address. ]
].

x@(String traits) as: y@(Net SocketAddress traits)
[
  y newOn: x
].


s@(Net Socket traits) enable
[ | ret |
  s address ifNil: [error: 'cannot connect to nil address'].
  ret: (s handle socketConnect: s address).
  ret < 0 /\ [ret ~= Net Socket ErrorCodes InProgress] ifTrue: [s throwError: ret].

].

s@(Net Socket traits) connectTo: addr@(Net SocketAddress traits)
[
  s address: addr address.
  s enable
].


s@(Net Socket traits) bindTo: sa@(Net SocketAddress traits)
[ | ret |
  s handle < 0 ifTrue: [s throwError: Net Socket ErrorCodes Invalid].
  
  ret: (s handle socketBindOn: sa address).
  ret < 0 ifTrue: [s throwError: ret].
  ret
].

s@(Net Socket traits) listenSize: count
[ | ret |
  
  ret: (s handle socketListenSize: count).
  ret < 0 ifTrue: [s throwError: ret].
  ret
].


s@(Net Socket traits) disable
[ | ret |
  ret: s handle closePipe.
  ret < 0 ifTrue: [s throwError: ret].
].

s@(Net Socket traits) canRead
[ 
  ({s} selectOnReadPipesFor: 0) isEmpty not
].

s@(Net Socket traits) canWrite
[ 
  ({s} selectOnWritePipesFor: 0) isEmpty not
].




s@(Net Socket traits) acceptConnection
[ | ret |
  
  ret: (s handle socketAcceptConnection).
  (ret is: Integer) ifTrue: [s throwError: ret].
  (ret first < 0) ifTrue: [s throwError: ret first].
  Net SocketServerConnection new `>> [handle: ret first. peerAddress: ret second.]
].


s@(Net SocketServer traits) newOn: ip port: port dispatch: block
[ | ret |
  ret: s new `>> [ip: ip. port: port. dispatch: block.].
  ret
].

s@(Net SocketServer traits) start &domain: addressDomain
[
  addressDomain `defaultsTo: Net IP4Address.
  s pipeToLoop: 
    (currentProcess forkAndDo:
      [ | :commSock servSock |
        servSock: (Net Socket newFor: addressDomain domain type: Net Socket Types Stream protocol: Net Socket Protocols Default).
        "fixme handle ipv6"
        inform: 'Creating listening socket ' ; servSock printString.
        inform: 'bind: ' ; (servSock bindTo: (addressDomain newOn: s ip port: s port)) printString.
        inform: 'listen: '; (servSock listenSize: 5) printString.
        [ | ready |
          inform: 'Waiting for connection...' ; {commSock. servSock handle} printString.
          ready: ({commSock. servSock handle} selectOnReadPipesFor: Net Socket SelectTimeout).
          ready ifNil: [inform: 'Error waiting for pipes. Exiting...'. lobby exit].
          (ready includes: commSock) ifTrue: [inform: 'Got message from commsock. Exiting...'. commSock closePipe. servSock handle closePipe. lobby exit].
          (ready includes: servSock handle) 
            ifTrue: [ | peer child |
                       peer: ([servSock acceptConnection] on: Error do: [| :e | inform: 'Accept error: ' ; e description. e return: Nil]).
                       peer ifNotNil:
                         [child: (currentProcess 
                                   forkAndDo: [ |:parent| [s dispatch applyWith: parent with: peer]
                                                          ensure: [parent closePipe. peer handle closePipe. lobby exit]]).
                          "fixme... have a way to communinicated back"
                          peer handle closePipe.
                          child closePipe.
                          inform: 'Connection from ' ; peer peerAddress printString]]
        ] loop.
      ]).

].

s@(Net SocketServer traits) stop
[
  s pipeToLoop nextPutAll: 'quit'.
].


Net define: #SocketStream &parents: {ExternalResource ReadWriteStream}
 &slots: {#internalReadBuffer -> (ByteArray new as: Queue). #internalWriteBuffer -> (ByteArray new as: Queue).
          #resource -> Nil.
          #buffer -> (ByteArray new &capacity: Net Socket BufferSize)}.

s@(Net SocketStream traits) newOn: socket
[
  s new on: socket
].

s@(Net SocketStream traits) on: socket
[
  resend.
  s isBinary: True.
  s internalReadBuffer clear.
  s internalWriteBuffer clear.
  s
].

s@(Net SocketStream traits) collectionType
[
  ByteArray
].

s@(Net SocketStream traits) isDirty
[
  s internalWriteBuffer size > 0
].

s@(Net SocketStream traits) isAtEnd
[
  False
].


s@(Net SocketStream traits) flushWriteBuffer
[ | i contents |
  i: 0.
  contents: (s internalWriteBuffer as: ByteArray).
  [i < contents size] whileTrue: 
    [ | return fds | 
      fds: ({s resource handle} selectOnWritePipesFor: Net Socket SelectTimeout).
      return: 0.
      "inform: 'writing ' ; contents size printString ; ' bytes of ' ; contents printString."
      fds do: [ |:fd| return: (contents writeToPipe: fd start: i end: contents size)].
      (return = 0) ifTrue: [error: 'write failed']. 
      return < 0 /\ [return ~= Net Socket ErrorCodes InProgress] ifTrue: [s throwError: return].
      return > 0 ifTrue: [i: i + return].
      ].
  s internalWriteBuffer clear.
].


s@(Net SocketStream traits) next: n putInto: seq startingAt: start
[ | readSize writer |
  writer: s internalReadBuffer writer.
  [s internalReadBuffer size < n]
    whileTrue: [ | fds ret |
                  fds: ({s resource handle} selectOnReadPipesFor: Net Socket SelectTimeout).
                  fds isEmpty ifTrue: [s exhausted. ^ 0]. "this shouldn't happen"
                  "inform: 'before read ' ; fds printString."
                  ret: (s buffer readFromPipe: s resource handle start: 0 end: s buffer size).
                  "inform: 'ret ' ; ret printString."
                  ret = 0 ifTrue: [s exhausted. ^ 0].
                  ret < 0 ifTrue: [s throwError: ret].

                  "inform: 'read bytes: ' ; s buffer printString."
                  writer next: ret putAll: s buffer].
  readSize: (s internalReadBuffer size min: n).
  seq replaceFrom: start to: start - 1 + readSize with: s internalReadBuffer.
  s internalReadBuffer forgetFirst: readSize.
  readSize
].


s@(Net SocketStream traits) nextPut: byte
[ | ret |
  s internalWriteBuffer addLast: byte.
  s
].

s@(Net SocketStream traits) nextPutAll: c
[
  s internalWriteBuffer addAllLast: c. 
  s
].

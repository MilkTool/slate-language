define: #Module &parents: {Pointer} &slots: { #name }.
Module traits atSlotNamed: #printName put: 'Module'. 

"LLVMModuleRef LLVMModuleCreateWithName(const char *ModuleID);"
m@(Module traits) new &name [
  name `defaultsTo: 'default'.
  newModule ::= m newWithHandle: (
    Lib primitives LLVMModuleCreateWithName applyTo: {name}
  ).
  newModule name := name.
  newModule
].

"void LLVMDisposeModule(LLVMModuleRef M);"
m@(Module traits) dispose [
  Lib primitives LLVMDisposeModule applyTo: {m handle}.
].

"int LLVMVerifyModule(LLVMModuleRef M, LLVMVerifierFailureAction Action,
                     char **OutMessage);"
m@(Module traits) verify &failureAction [
  failureAction `defaultsTo: VerifierFailureAction ReturnStatus.
  message := ByteArray new &capacity: bytesPerWord.
  returnValue := Lib primitives LLVMVerifyModule applyTo: { m handle. failureAction. message }.
  message allSatisfy: #isZero `er ifFalse: [
    Lib primitives LLVMDisposeMessage applyTo: { message }.
  ].
  returnValue
].

"void LLVMDumpModule(LLVMModuleRef M);"
m@(Module traits) dump [
  Lib primitives LLVMDumpModule applyTo: {m handle}.
].

"int LLVMWriteBitcodeToFile(LLVMModuleRef M, const char *Path);"
m@(Module traits) save &fileName [
  fileName `defaultsTo: (m name ; '.bc').
  Lib primitives LLVMWriteBitcodeToFile applyTo: {m handle. fileName}
].
 
"const char *LLVMGetDataLayout(LLVMModuleRef M);"
m@(Module traits) dataLayout [
  Lib primitives LLVMGetDataLayout applyTo: {m handle}
].

"void LLVMSetDataLayout(LLVMModuleRef M, const char *Triple);"
m@(Module traits) dataLayout: triple@(String traits) [
  Lib primitives LLVMSetDataLayout applyTo: {m handle. triple}.
].

"const char *LLVMGetTarget(LLVMModuleRef M);"
m@(Module traits) target [
  Lib primitives LLVMGetTarget applyTo: {m handle}
].
 
"void LLVMSetTarget(LLVMModuleRef M, const char *Triple);" 
m@(Module traits) target: triple@(String traits) [
  Lib primitives LLVMSetTarget applyTo: {m handle. triple}.
].

"void LLVMDeleteTypeName(LLVMModuleRef M, const char *Name);"
m@(Module traits) deleteTypeNamed: name@(String traits) [
  Lib primitives LLVMDeleteTypeName applyTo: {m handle. name }.
].
 
"int LLVMAddTypeName(LLVMModuleRef M, const char *Name, LLVMTypeRef Ty);"
m@(Module traits) addTypeNamed: name@(String traits) type: type@(Type traits) [
  Lib primitives LLVMAddTypeName applyTo: {m handle. name. type handle }
].

"-------------------------------Operations on global variables------------------------------------"

"LLVMValueRef LLVMAddGlobal(LLVMModuleRef M, LLVMTypeRef Ty, const char *Name);"
m@(Module traits) addGlobalNamed: name@(String traits) type: type@(Type traits) [
  Value GlobalVariable newWithHandle: (
    Lib primitives LLVMAddGlobal applyTo: {m handle. type handle. name }
  )
].

"LLVMValueRef LLVMGetNamedGlobal(LLVMModuleRef M, const char *Name);"
m@(Module traits) globalNamed: name@(String traits) [
  Value GlobalVariable newWithHandle: (
    Lib primitives LLVMGetNamedGlobal applyTo: {m handle. name }
  )
].

"-------------------------------Operations on function variables------------------------------------"

"LLVMValueRef LLVMAddFunction(LLVMModuleRef M, const char *Name,
                             LLVMTypeRef FunctionTy);"
m@(Module traits) addFunctionNamed: name@(String traits) type: type@(Type Function traits) [
  Value Function newWithHandle: (
    Lib primitives LLVMAddFunction applyTo: {m handle. name. type handle }
  )
].

"LLVMValueRef LLVMGetNamedFunction(LLVMModuleRef M, const char *Name);"
m@(Module traits) functionNamed: name@(String traits) [
  Value Function newWithHandle: (
    Lib primitives LLVMGetNamedFunction applyTo: {m handle. name }
  )
].

define: #SlateModule &parents: {Module} &slots: {
  #structObject. #structObjectPtr. #environmentFunction. #literalAtFunction. #selectorAtFunction.
  #findMethodAndSendWithArgs.  #nilObject. #falseObject. #trueObject
}.
SlateModule traits atSlotNamed: #printName put: 'SlateModule'. 

m@(SlateModule traits) new &name [
  resend `>> [ declareStructures. declareGlobalVariables. declareFunctions. ]
].

m@(SlateModule traits) declareStructures [
  objectOpaque ::= Type Opaque new holder.
  m structObject := Type Struct new &elementTypes: { 
    Type Integer32.  "header"
    Type Integer32.  "objectSize"
    Type Integer32.  "payloadSize"
    (Type Pointer newFor: objectOpaque resolve)  "map"
  }.
  objectOpaque resolve refineTo: m structObject.
  m structObject := objectOpaque resolve.
  m addTypeNamed: 'struct.Object' type: m structObject.
  m structObjectPtr := Type Pointer newFor: m structObject.
].

m@(SlateModule traits) declareGlobalVariables [
  m nilObject := m addGlobalNamed: 'nilObject' type: m structObjectPtr.
  m trueObject := m addGlobalNamed: 'trueObject' type: m structObjectPtr.
  m falseObject := m addGlobalNamed: 'falseObject' type: m structObjectPtr.
].

m@(SlateModule traits) declareFunctions
[| functionType |
  "struct Object *environment( void )"
  functionType := Type Function new &returnType: m structObjectPtr.
  m environmentFunction := m addFunctionNamed: 'environment' type: functionType.

  "struct Object *literalAt( struct Object *index )"
  functionType := Type Function new &returnType: m structObjectPtr &paramaterTypes: {m structObjectPtr}.
  m literalAtFunction := m addFunctionNamed: 'literalAt' type: functionType.
  (m literalAtFunction parameterAt: 0) name := 'index'.

  "struct Object *selectorAt( struct Object *index )"
  functionType := Type Function new &returnType: m structObjectPtr &paramaterTypes: {m structObjectPtr}.
  m selectorAtFunction := m addFunctionNamed: 'selectorAt' type: functionType.
  (m selectorAtFunction parameterAt: 0) name := 'index'.

  "struct Object *findMethodAndSendWithArgs( struct Object *selector, struct Object *arity, ... )"
  functionType := Type Function new &returnType: m structObjectPtr &paramaterTypes: {m structObjectPtr. m structObjectPtr} &isVarArg: True.
  m findMethodAndSendWithArgs := m addFunctionNamed: 'findMethodAndSendWithArgs' type: functionType.
  (m findMethodAndSendWithArgs parameterAt: 0) name := 'selector'.
  (m findMethodAndSendWithArgs parameterAt: 1) name := 'arity'.
].

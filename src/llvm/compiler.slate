block@(nodes Block traits) compile2
"Invoke the c."
[
  Compiler new generate: block
].

define: #Compiler &parents: {Cloneable} &slots: {#contexts -> Stack new. #module }.

(Compiler hasSlotNamed: #DefaultModule) ifTrue:
  [Compiler DefaultModule dispose].

Compiler define: #DefaultModule -> (SlateModule new &name: 'slate').

module@(Compiler DefaultModule) shutdown
[
  module dispose.
].

c@(Compiler traits) new &module: useModule
[
  useModule `defaultsTo: Compiler DefaultModule.
  c clone `>> [contexts := c contexts new. module := useModule. ]
].

Compiler traits define: #Context &parents: {Cloneable} &slots: {
  #isClosure -> False "Whether the method being compiled is a closure.".
  #method -> CompiledMethod new "The method the context targets.".
  #selectors -> ExtensibleArray new.
  "The gathering collection for the method's literal array; must be indexable
  before committing."
  #literals -> ExtensibleArray new.
  "The gathering collection for the method's selector array; must be indexable
  before committing."
  #builder. #variables. #function. #llvmName
  "Staff."
}.

c@(Compiler Context traits) newOn: method llvmName: llvmName
[
  method code: Array new.
  c cloneSettingSlots: #{#method. #selectors. #literals. #builder. #llvmName}
   to: {method. 
        c selectors new.
        c literals new.
        IRBuilder new.
        llvmName}
].

c@(Compiler Context traits) copy
[resend `>> [selectors := c selectors copy.
             literals := c literals copy]].

c@(Compiler Context traits) flush
[
  c method literals := c literals as: Array.
  c method selectors := c selectors as: Array.
  c
].

c@(Compiler traits) currentContext
[
  c contexts top
].

c@(Compiler traits) currentMethod
[
  c currentContext method
].

c@(Compiler traits) number: si@(SmallInteger)
[
  si << 1 bitOr: 1
].

c@(Compiler traits) literal: obj
[
"Ensure that the literal object is included in the literals array. If it is
not present already, it is appended to the end, thus ensuring that no other
indices require shifting. Answer the literal's index."
  (c currentContext literals indexOfFirstSatisfying:
     [| :literal | obj = literal /\ [obj isSameAs: literal]])
    ifNil:
      [index ::= c currentContext literals size.
       c currentContext literals addLast: obj.
       index]
].

c@(Compiler traits) selector: selector
[
"Ensure that the literal object is included in the selectors array. If it is
not present already, it is appended to the end, thus ensuring that no other
indices require shifting. Answer the selector's index."
  c currentContext selectors `>> [include: selector. indexOf: selector]
].

_@(Compiler traits) generate: _@(nodes Node traits)
[
"Do nothing in the default case, for comments and annotations and such."
].

c@(Compiler traits) generate: ann@(nodes Annotation traits)
[
"Generate the annotation's value."
   shouldImplement.
 c generate: ann value
].

c@(Compiler traits) generate: block@(nodes Block traits) &topLevel &llvmName
"Encountering a new block, build a new CompiledMethod object and push it and
a new bytecode array writer onto the generator, then go through the underlying
code and generate that. When done, pop both, set up the block as a literal
and push it onto the stack."
[
  (topLevel `defaultsTo: False)
    ifTrue: [llvmName `defaultsTo: 'unnamedBlock' ]
    ifFalse: [llvmName := c currentContext llvmName ; '_literal'].
  newBlock ::= CompiledMethod new.
  newBlock environment := c contexts isEmpty
    ifTrue: [block parentScope topLevel namespace]
    ifFalse: [c currentMethod environment].
  newBlock sourceTree := block.
  c contexts push: (c Context newOn: newBlock llvmName: llvmName).
  "we macroexpand everything before we set the current register because macroexpansion can add localvariables etc"
  statements ::= block statements collect:
    [| :statement | statement macroExpand &environment: c currentMethod sourceTree].
  "Set the variable information after generation, just in case it was modified."
  newBlock `>> [
    inputVariables := block inputVariables size.
    localVariables := block localVariables size.
    restVariable := block restVariable isNotNil.
    optionalKeywords := block optionalKeywords.
  ].

  c currentContext variables := Dictionary new.
  parameterTypes ::= Array new &capacity:
    (block inputVariables size + block optionalKeywords size).
  parameterTypes atAllPut: c module structObjectPtr.
  functionType ::= Type Function new &returnType: c module structObjectPtr &paramaterTypes: parameterTypes.
  c currentContext function := c module addFunctionNamed: c currentContext llvmName type: functionType.
  c currentContext builder insertPoint: (c currentContext function addBlockNamed: 'entry').
  block localVariables doWithIndex: [ | :each :index variable parameter |
    (index < parameterTypes size)
      ifTrue: [ "is an arg"
        parameter := c currentContext function parameterAt: index.
        parameter name := each name.
        variable := c currentContext builder allocA: c module structObjectPtr name: (each name ; '_addr').
      ]
      ifFalse: [  "is a temp var"
        parameter := c generate: (nodes Literal for: Nil).
        variable := c currentContext builder allocA: c module structObjectPtr name: each name.
      ].
    c currentContext builder store: parameter at: variable.
    c currentContext variables at: each name put: variable.
  ].
  statements allButLastDo: [| :node | c generate: node].
  statements size > 0
    ifTrue: [ c currentContext builder ret &value: (c generate: statements last) ]
    ifFalse: [ c currentContext builder ret &value: (c generate: (nodes Literal for: Nil)) ].

  isClosure ::= c currentContext isClosure.

  c currentContext function verify &failureAction: VerifierFailureAction PrintMessage.
  newBlock reserved5 := c currentContext function name intern.
  
  c contexts pop flush.
  "Forces the newBlock to record all the remaining stream input correctly."

  c contexts isEmpty \/ [topLevel]
    ifTrue: [newBlock]
    ifFalse: [isClosure
                ifTrue: [TODO]
                ifFalse: [c generate: (nodes Literal for: newBlock)]]
].

c@(Compiler traits) generate: def@(nodes MethodDefinition traits)
"Translate method definitions to equivalent asMethod:on: invocations."
[
  c contexts isEmpty ifTrue: [^ resend].
  blockRegister ::= #generate: sendTo: {c. def} through: {c. nodes Block}.
  selectorRegister ::= c emitSelector: def selector.
  rolesRegister ::= c generate: (def roles as: nodes Array).
  c emitSend: #asMethod:on: onRegisters: {blockRegister. selectorRegister. rolesRegister}
].

c@(Compiler traits) generate: r@(nodes Resend traits)
[
  shouldImplement.
  scope ::= c currentMethod sourceTree.
  lexOffset ::= c contexts indexLast -
    ((c contexts indexOfLastSatisfying: [| :context | context method sourceTree isSameAs: nodes MethodDefinition])
    ifNil:
      [error: 'resend must be used within a method definition.']).
  lexOffset > 0
    ifTrue:
    [(c contexts fromTop: lexOffset) method heapAllocate := True.
      (c contexts top: lexOffset) do: #(isClosure: True) `er].
  "resendMessage"
].

c@(Compiler traits) generate: r@(nodes Return traits)
[
  overrideThis
].

c@(Compiler traits) generate: r@(nodes Return traits) by: lexOffset
[ 
  shouldImplement.
  lexOffset > 0
    ifTrue:
      [(c contexts fromTop: lexOffset) method heapAllocate: True.
       (c contexts top: lexOffset) do: #(isClosure: True) `er].
  c generate: r value.
  "returnFrom"
].

c@(Compiler traits) generate: r@(nodes ReturnClose traits)
[
  "Exits the first enclosing named method in the lexical scope."
  shouldImplement.
  lexOffset ::= c contexts indexLast -
    ((c contexts indexOfLastSatisfying: [| :context | context method sourceTree isSameAs: nodes MethodDefinition])
       ifNil:
         [error: '^ must be used within a method definition.']).
  c generate: r by: lexOffset
].

c@(Compiler traits) generate: r@(nodes ReturnFar traits)
[
  "Exits the last enclosing named method in the lexical scope."
  shouldImplement.
  lexOffset ::= c contexts indexLast -
    ((c contexts indexOfFirstSatisfying: [| :context | context method sourceTree isSameAs: nodes MethodDefinition])
       ifNil: [error: '^^ must be used within a method definition.']).
  c generate: r by: lexOffset
].

c@(Compiler traits) generate: r@(nodes ReturnLevel traits)
[
  "Exits the Nth enclosing lexical scope."
  shouldImplement.
  c generate: r by: r level
].

c@(Compiler traits) generate: literal@(nodes Literal traits)
[
  ((value ::= literal value) is: SmallInteger)
    ifTrue:
      [(Type Integer32 value: (c number: value) signed: True)
         as: c module structObjectPtr]
    ifFalse:
      [value caseOf: {
         Nil -> [c currentContext builder load: c module nilObject &name: 'nil_addr' ].
         True -> [c currentContext builder load: c module nilObject &name: 'true_addr' ].
         False -> [c currentContext builder load: c module nilObject &name: 'false_addr' ]
       } otherwise:
         [c currentContext builder
            call: c module literalAtFunction
            arguments: {c generate: (nodes Literal for: (c literal: value))}
            &name: value]]
].

c@(Compiler traits) generate: n@(nodes CompoundStatement traits)
"return the registers that the values were saved into"
[
  n statements size < 1
    ifTrue: [#{}]
    ifFalse: [n statements collect: #(c generate: _) `er]
].

c@(Compiler traits) generate: n@(nodes Parenthesis traits)
"return the registers that the values were saved into"
[
  n statements size < 1
    ifTrue: [#{}]
    ifFalse:
      [n statements allButLastDo: #(c generate: _) `er.
       c generate: n statements last]
].

c@(Compiler traits) generate: i@(nodes ImplicitArgument traits)
[
  function ::= c module functionNamed: 'environment'.
  c currentContext builder call: function arguments: {} &name: 'environment'
].

c@(Compiler traits) generate: _@(nodes Namespace traits)
[
  shouldNotImplement
].

c@(Compiler traits) generate: load@(nodes LoadVariable traits)
[
  scope ::= load variable scope.
  varIndex ::= scope localVariables indexOf: load variable.
  lexOffset ::= c contexts indexLast -
    ((c contexts indexOfLastSatisfying: [| :context | context method sourceTree == scope])
      ifNil: [error: 'Could not determine variable scope.']).

  lexOffset isZero
    ifTrue:
      [variable ::= c currentContext variables at: load variable name ifAbsent:
         [error: 'unknown variable ' ; load variable name].
       c currentContext builder load: variable &name: (load variable name ; '_')]
    ifFalse:
      [TODO.
       "result `defaultsTo: gen newRegister.
       (gen contexts fromTop: lexOffset) method heapAllocate := True.
       (gen contexts top: lexOffset) do: #(isClosure: True) `er.
       gen emitInstruction: gen loadFreeVariable withParameters: {result. lexOffset. varIndex} from: load"]
].

c@(Compiler traits) generate: store@(nodes StoreVariable traits)
[
  scope ::= store variable scope.
  varIndex ::= scope localVariables indexOf: store variable.
  lexOffset ::= c contexts indexLast -
    ((c contexts indexOfLastSatisfying: [| :context | context method sourceTree == scope])
      ifNil:[ error: 'Could not determine variable scope.']).
  
  lexOffset isZero
    ifTrue:
      [variable ::= c currentContext variables at: store variable name ifAbsent: [error: 'unknown variable ' ; store variable name].
       value ::= c generate: store value.
       c currentContext builder store: value at: variable]
    ifFalse:
      [TODO.
       "gen generate: store value result: result.
         (gen contexts fromTop: lexOffset) method heapAllocate := True.
         (gen contexts top: lexOffset) do: #(isClosure: True) `er.
        gen emitInstruction: gen storeFreeVariable withParameters: {lexOffset. varIndex} from: store"]
].

c@(Compiler traits) generate: array@(nodes Array traits)
"Generate the code to push the element expression results on the stack,
then the appropriate literal-array constructor bytecode."
[
  valueRegisters ::= resend.
  arrayRegister ::= c generate: `(Array newSize: (nodes Literal for: array statements size) `unquote).
  valueRegisters doWithIndex:
    [| :valueRegister :index indexRegister |
     indexRegister := c generate: (nodes Literal for: index).
     c emitSend: #at:put: onRegisters: {arrayRegister. indexRegister. valueRegister}].
  arrayRegister
].

c@(Compiler traits) emitSelector: selector@(Symbol traits)
[
  index ::= c generate: (nodes Literal for: (c selector: selector)).
  function ::= c module selectorAtFunction.
  c currentContext builder call: function arguments: { index } &name: selector
].

c@(Compiler traits) emitSend: selector@(Symbol traits) onRegisters: argRegisters
"Generate the code to push the argument expression results on the stack, then
the push for the selector, and then the appropriate message send bytecode."
[
  selectorRegister ::= c emitSelector: selector.
  arityRegister ::= c generate: (nodes Literal for: argRegisters size).
  c currentContext builder
    call: c module findMethodAndSendWithArgs
    arguments: { selectorRegister. arityRegister } ; argRegisters
    &name: selector name
].

c@(Compiler traits) emitSend: selector@(Symbol traits) on: args
"Generate the code to push the argument expression results on the stack, then
the push for the selector, and then the appropriate message send bytecode."
[
  c emitSend: selector onRegisters: (args collect: #(c generate: _) `er)
].

c@(Compiler traits) generate: msg@(nodes Message traits) &optionals: opts
[
  opts ifNotNil: [TODO].
  opts `defaultsTo: msg.
  c emitSend: msg selector on: msg arguments
].

c@(Compiler traits) generate: macro@(nodes Macro traits) &optionals: opts
[
  "c generate: (macro macroExpand &optionals: opts &environment: c currentMethod sourceTree)"
  error: 'SSA Compiler cannot support macroexpansion at code generation time because of localVariable side-effects'.
].

c@(Compiler traits) generate: def@(nodes Deferred traits) &optionals: opts
[
  TODO.
  block ::= nodes Block new `>> [parentScope := c currentMethod sourceTree. ].
  def arguments size timesRepeat: [block addInputVariable].
  message ::= nodes Message sending: def selector to:
    (block inputVariables collect: #(nodes LoadVariable from: _) `er).
  opts ifNotNil:
    [message :=
       (nodes OptionalArguments for: message)
       `>> [arguments := opts arguments deepCopy: block. ]].
  block statements := {message}.
  c generate:
    (nodes KeywordMessage
       sending: #whenFulfilled:
       to: {def arguments as: nodes Array. block})
].

c@(Compiler traits) generate: selector@(Symbol traits) on: args from: opts@(nodes OptionalKeywords traits)
"Generate the code to push the argument expression results on the stack, then
the push for the selector, and then the appropriate message send bytecode."
[ 
  TODO.
  args do: [| :arg | c generate: arg].
  opts keywords with: opts arguments do:
    [| :key :arg | c generate: arg]
].

c@(Compiler traits) generate: opts@(nodes OptionalKeywords traits)
[
  c generate: opts message &optionals: opts
].

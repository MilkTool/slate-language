expr@(nodes MethodDefinition traits) inline
[
  InternalCompiler new generate: expr.
  expr disable
].

define: #InternalCompiler &parents: {Cloneable} &slots: {#contexts -> Stack new}.

ic@(InternalCompiler traits) new
[
  ic clone `>> [contexts := ic contexts new. ]
].

InternalCompiler traits define: #Context &parents: {Cloneable} &slots: {
  #isClosure -> False "Whether the method being compiled is a closure.".
  #method -> CompiledMethod new "The method the context targets.".
  #selectors -> ExtensibleArray new.
  "The gathering collection for the method's literal array; must be indexable
  before committing."
  #literals -> ExtensibleArray new.
  "The gathering collection for the method's selector array; must be indexable
  before committing."
}.

ic@(InternalCompiler Context traits) newOn: method
[
  "FIXME change method code to array instead of bytearray."
  method code := Array new.
  ic cloneSettingSlots: #{#method. #selectors. #literals}
     to: {method.
          ic selectors new.
          ic literals new}
].

ic@(InternalCompiler Context traits) copy
[
  resend `>> [selectors := ic selectors copy.
              literals := ic literals copy]
].

ic@(InternalCompiler Context traits) flush
[
  ic method literals := ic literals as: Array.
  ic method selectors := ic selectors as: Array.
  ic
].

ic@(InternalCompiler traits) currentContext
[
  ic contexts top
].

ic@(InternalCompiler traits) currentMethod
[
  ic currentContext method
].

ic@(InternalCompiler traits) literal: obj
[
"Ensure that the literal object is included in the literals array. If it is
not present already, it is appended to the end, thus ensuring that no other
indices require shifting. Answer the literal's index."
  (ic contexts top literals indexOfFirstSatisfying:
     [| :literal | obj = literal /\ [obj isSameAs: literal]])
    ifNil:
      [index ::= ic contexts top literals size.
       ic contexts top literals addLast: obj.
       index]
].

ic@(InternalCompiler traits) selector: selector
[
"Ensure that the literal object is included in the selectors array. If it is
not present already, it is appended to the end, thus ensuring that no other
indices require shifting. Answer the selector's index."
  ic contexts top selectors `>> [include: selector. indexOf: selector]
].

_@(InternalCompiler traits) generate: _@(nodes Node traits)
[
"Do nothing in the default case, for comments and annotations and such."
].

ic@(InternalCompiler traits) generate: ann@(nodes Annotation traits)
[
"Generate the annotation's value."
  ic generate: ann value
].

ic@(InternalCompiler traits) generate: block@(nodes Block traits) &topLevel
[
"Encountering a new block, build a new CompiledMethod object and push it and
a new bytecode array writer onto the generator, then go through the underlying
code and generate that. When done, pop both, set up the block as a literal
and push it onto the stack."
  topLevel `defaultsTo: False.
  newBlock ::= CompiledMethod new.
  newBlock environment := ic contexts isEmpty
    ifTrue: [block parentScope topLevel namespace]
    ifFalse: [ic currentMethod environment].
  newBlock sourceTree := block.
  ic contexts push: (ic Context newOn: newBlock).
    "we macroexpand everything before we set the current register because macroexpansion can add localvariables etc"
  statements ::= block statements collect:
    [| :statement | statement macroExpand &environment: ic currentMethod sourceTree].
  statements allButLastDo: #(ic generate: _) `er.
  statements size > 0
    ifTrue: ["returnRegister" ic generate: statements last]
    ifFalse: ["returnValue"].

  "Set the variable information after generation, just in case it was modified."
  newBlock `>>
  [inputVariables := block inputVariables size.
    localVariables := block localVariables size.
    restVariable := block restVariable isNotNil.
    optionalKeywords := block optionalKeywords. ].
  isClosure ::= ic currentContext isClosure.

  ic contexts pop flush.
  "Forces the newBlock to record all the remaining stream input correctly."

  ic contexts isEmpty \/ [topLevel] ifFalse:
    [isClosure
       ifTrue: ["newClosure"]
       ifFalse: ["loadLiteral"]].
].

ic@(InternalCompiler traits) generate: def@(nodes MethodDefinition traits)
"Translate method definitions to equivalent asMethod:on: invocations."
[
  ic contexts isEmpty ifTrue: [^ resend].
  #visit: sendTo: {gen. def} through: {gen. nodes Block}.
  def roles do: [| :role | ic generate: role].
  "directSendMessage"
].

ic@(InternalCompiler traits) generate: r@(nodes Resend traits)
[
  | lexOffset scope |
  scope := ic currentMethod sourceTree.
  lexOffset := ic contexts indexLast -
    ((ic contexts indexOfLastSatisfying: [| :context | context method sourceTree isSameAs: nodes MethodDefinition])
    ifNil:
      [error: 'resend must be used within a method definition.']).
  lexOffset > 0
    ifTrue:
    [(ic contexts fromTop: lexOffset) method heapAllocate := True.
      (ic contexts top: lexOffset) do: #(isClosure: True) `er].
].

ic@(InternalCompiler traits) generate: r@(nodes Return traits)
[
  overrideThis
].

ic@(InternalCompiler traits) generate: r@(nodes Return traits) by: lexOffset
[
  lexOffset isPositive
    ifTrue: [(ic contexts fromTop: lexOffset) method heapAllocate := True.
             (ic contexts top: lexOffset) do: #(isClosure: True) `er].
  ic generate: r value.
].

ic@(InternalCompiler traits) generate: r@(nodes ReturnClose traits)
"Exits the first enclosing named method in the lexical scope."
[| lexOffset |
    lexOffset := ic contexts indexLast -
    ((ic contexts indexOfLastSatisfying: [| :context | context method sourceTree isSameAs: nodes MethodDefinition])
    ifNil:
      [error: '^ must be used within a method definition.']).
  ic generate: r by: lexOffset
].

ic@(InternalCompiler traits) generate: r@(nodes ReturnFar traits)
"Exits the last enclosing named method in the lexical scope."
[| lexOffset |
  lexOffset := ic contexts indexLast -
    ((ic contexts indexOfFirstSatisfying: [| :context | context method sourceTree isSameAs: nodes MethodDefinition])
      ifNil: [error: '^^ must be used within a method definition.']).
  ic generate: r by: lexOffset
].

ic@(InternalCompiler traits) generate: r@(nodes ReturnLevel traits)
"Exits the Nth enclosing lexical scope."
[
  ic generate: r by: r level
].

ic@(InternalCompiler traits) generate: literal@(nodes Literal traits)
[
  inform: ('Literal[' ; (ic literal: literal) printString ; ']: ' ; literal printString).
].

ic@(InternalCompiler traits) generate: n@(nodes CompoundStatement traits)
"return the registers that the values were saved into"
[
  n statements do: #(ic generate: _) `er
].

ic@(InternalCompiler traits) generate: n@(nodes Parenthesis traits)
"return the registers that the values were saved into"
[
  n statements do: #(ic generate: _) `er
].

ic@(InternalCompiler traits) generate: i@(nodes ImplicitArgument traits)
[
].

ic@(InternalCompiler traits) generate: _@(nodes Namespace traits)
[
  shouldNotImplement
].

ic@(InternalCompiler traits) generate: load@(nodes LoadVariable traits)
[| scope lexOffset varIndex |
  scope := load variable scope.
  varIndex := scope localVariables indexOf: load variable.
  lexOffset := ic contexts indexLast -
    ((ic contexts indexOfLastSatisfying: [| :context | context method sourceTree == scope])
      ifNil: [error: 'Could not determine variable scope.']).
].

ic@(InternalCompiler traits) generate: store@(nodes StoreVariable traits)
[| scope lexOffset varIndex |
  scope := store variable scope.
  varIndex := scope localVariables indexOf: store variable.
  lexOffset := ic contexts indexLast -
    ((ic contexts indexOfLastSatisfying: [| :context | context method sourceTree == scope])
      ifNil: [error: 'Could not determine variable scope.']).
].

ic@(InternalCompiler traits) generate: array@(nodes Array traits)
[
"Generate the code to push the element expression results on the stack,
then the appropriate literal-array constructor bytecode."
].

ic@(InternalCompiler traits) generate: selector@(Symbol traits) on: args from: msg@(nodes Message traits)
[
"Generate the code to push the argument expression results on the stack, then
the push for the selector, and then the appropriate message send bytecode."
  args do: #(ic generate: _) `er.
].

ic@(InternalCompiler traits) generate: msg@(nodes Message traits) &optionals: opts
[
  ic generate: msg selector on: msg arguments from: (opts ifNil: [msg])
].

ic@(InternalCompiler traits) generate: macro@(nodes Macro traits) &optionals: opts
[
  "ic generate: (macro macroExpand &optionals: opts &environment: ic currentMethod sourceTree)"
  error: 'SSA InternalCompiler cannot support macroexpansion at code generation time because of localVariable side-effects'.
].

ic@(InternalCompiler traits) generate: def@(nodes Deferred traits) &optionals: opts
[
  block ::= nodes Block new `>> [parentScope := ic currentMethod sourceTree. ].
  def arguments size timesRepeat: [block addInputVariable].
  message ::= nodes Message sending: def selector to:
    (block inputVariables collect: [| :var | nodes LoadVariable from: var]).
  opts
    ifNotNil:
    [message :=
      ((nodes OptionalArguments for: message)
      `>> [arguments := opts arguments deepCopy: block. ])].
  block statements := {message}.
  ic generate:
    (nodes KeywordMessage
       sending: #whenFulfilled:
       to: {def arguments as: nodes Array. block})
].

ic@(InternalCompiler traits) generate: selector@(Symbol traits) on: args from: opts@(nodes OptionalKeywords traits)
"Generate the code to push the argument expression results on the stack, then
the push for the selector, and then the appropriate message send bytecode."
[
  args do: #(ic generate: _) `er.
  opts keywords with: opts arguments do:
    [| :key :arg | ic generate: arg]
].

ic@(InternalCompiler traits) generate: opts@(nodes OptionalKeywords traits)
[
  ic generate: opts message &optionals: opts
].

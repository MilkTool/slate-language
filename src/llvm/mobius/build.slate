

Image define: #Definition &parents: {Cloneable} &slots:
  {#bootstrapFilenames ->
"The names of the sources used to build the kernel REPL image, in necessary
load-order."
    ({'mobius/pre-bootstrap'.
     'lib/root'.
     'lib/nil'.
     'lib/boolean'.
     'lib/namespace'.
     'lib/derivable'.
     'lib/numeric'.
     'lib/method'.
     'lib/collection'.
     'lib/association'.
     'lib/collection-extensible'.
     'lib/set'.
     'lib/mapping'.
     'lib/sequence'.
     'lib/arrayed'.
     'lib/integer'.
     'lib/dictionary'.
     'lib/string'.
     'lib/symbol'.
     'lib/range'.
     'lib/sequence-extensible'.
     'lib/sorted'.
     'lib/mixin'.
     'lib/stack'. "Used by the conditionStack."
     'lib/condition'. "Essential error-handling logic."
     'lib/condition-epilogue'. "Error types for previous libraries."
     'lib/stream'. "Basic Streams, only depends on condition.slate."
     'lib/stream-collections'. "Streams over previous collection libraries."
     'lib/stream-transforms'. "Stream operation types."
     'lib/external'. "Abstract type for external resources and streams."
     'lib/console'. "Console I/O."
     'lib/file'. "File I/O."
     'lib/print'. "Print methods, pretty-printing (of objects, not source)."
     'lib/types'. "The object-based type system."
     'mobius/syntax'.
     'mobius/token'.
     'mobius/lexer'.
     'mobius/parser'.
     'lib/debugger'. "The Debugger, which targets a Console object."
     'mobius/macro'.
     'mobius/inference'.
     'mobius/compiler'.
     'mobius/debug'.
     'mobius/post-bootstrap'
    } collect: [| :name | 'src/' ; name ; '.slate']).
    #filename -> Nil. "The filename for the image."
    #bitSize -> 64. "The bitsize of the image"
    #primitives -> ExtensibleArray new.
    #littleEndian -> True "Whether to have a little-endian byte-word format."
  }.


Image Definition primitives clear.

"here are the primitives"
[| :each |
  inform: 'Adding primitive ' ; each printString.
  Image Definition primitives add: 
    each key key -> (Syntax MethodDefinition new `>>
      [selector: each key value.
       roles: (each value collect:
                 [ | :val | val = #NoRoleObject ifFalse: [Syntax UnaryMessage sending: val]]). ])] for: {
0 -> #asMethod:on: -> #{#MethodTraits. #SymbolTraits. #ArrayTraits}.
1 -> #asAccessor:for:on: -> #{#MethodTraits. #SymbolTraits. #NoRoleObject. #ArrayTraits}.
2 -> #_map -> #{#RootTraits}.
3 -> #_map: -> #{#RootTraits. #MapTraits}.
4 -> #addRolesFrom: -> #{#RootTraits. #RootTraits}.
5 -> #removeFrom: -> #{#MethodTraits. #ArrayTraits}.
6 -> #clone -> #{#CloneableTraits}.
7 -> #cloneSettingSlots:to: -> #{#RootTraits. #ArrayTraits. #ArrayTraits}.
8 -> #cloneWithSlot:valued: -> #{#RootTraits. #SymbolTraits. #NoRoleObject}.
9 -> #cloneWithDelegate:valued: -> #{#RootTraits. #SymbolTraits. #NoRoleObject}.
10 -> #cloneWithDelegate:before:valued: -> #{#RootTraits. #SymbolTraits. #NoRoleObject. #NoRoleObject}.
11 -> #cloneWithDelegate:after:valued: -> #{#RootTraits. #SymbolTraits. #NoRoleObject. #NoRoleObject}.
12 -> #cloneWithoutSlot: -> #{#RootTraits. #SymbolTraits}.
13 -> #atSlotNamed: -> #{#RootTraits. #SymbolTraits}.
14 -> #atSlotNamed: -> #{#SmallIntegerProto. #SymbolTraits}.
15 -> #atSlotNamed:put: -> #{#RootTraits. #SymbolTraits. #NoRoleObject}.
16 -> #forwardTo: -> #{#RootTraits. #NoRoleObject}.
17 -> #newSize: -> #{#ByteArrayTraits. #NoRoleObject}.
18 -> #size -> #{#ByteArrayTraits}.
19 -> #byteAt: -> #{#ByteArrayTraits. #NoRoleObject}.
20 -> #byteAt:put: -> #{#ByteArrayTraits. #NoRoleObject. #NoRoleObject}.
21 -> #newSize: -> #{#ArrayTraits. #NoRoleObject}.
22 -> #size -> #{#ArrayTraits}.
23 -> #at: -> #{#ArrayTraits. #NoRoleObject}.
24 -> #at:put: -> #{#ArrayTraits. #NoRoleObject. #NoRoleObject}.
25 -> #ensure: -> #{#MethodTraits. #MethodTraits}.
26 -> #applyTo: -> #{#MethodTraits. #ArrayTraits}.
27 -> #sendTo: -> #{#SymbolTraits. #ArrayTraits}.
28 -> #sendTo:through: -> #{#SymbolTraits. #ArrayTraits. #ArrayTraits}.
29 -> #findOn: -> #{#SymbolTraits. #ArrayTraits}.
30 -> #findOn:after: -> #{#SymbolTraits. #ArrayTraits. #NoRoleObject}.
31 -> #runArgsInto: -> #{#BootstrapObject. #ByteArrayTraits}.
32 -> #exit -> #{#BootstrapObject}.
33 -> #'==' -> #{#RootTraits. #RootTraits}.
34 -> #identityHash -> #{#RootTraits}.
35 -> #identityHash -> #{#SmallIntegerTraits}.
36 -> #'=' -> #{#SmallIntegerTraits. #SmallIntegerTraits}.
37 -> #'<' -> #{#SmallIntegerTraits. #SmallIntegerTraits}.
38 -> #bitOr: -> #{#SmallIntegerTraits. #SmallIntegerTraits}.
39 -> #bitAnd: -> #{#SmallIntegerTraits. #SmallIntegerTraits}.
40 -> #bitXor: -> #{#SmallIntegerTraits. #SmallIntegerTraits}.
41 -> #bitNot -> #{#SmallIntegerTraits}.
42 -> #bitShift: -> #{#SmallIntegerTraits. #SmallIntegerTraits}.
43 -> #'+' -> #{#SmallIntegerTraits. #SmallIntegerTraits}.
44 -> #'-' -> #{#SmallIntegerTraits. #SmallIntegerTraits}.
45 -> #'*' -> #{#SmallIntegerTraits. #SmallIntegerTraits}.
46 -> #quo: -> #{#SmallIntegerTraits. #SmallIntegerTraits}.
47 -> #interrupt -> #{#InterpreterTraits}.
48 -> #initializeThreadOn: -> #{#InterpreterTraits. #NoRoleObject}.
49 -> #framePointerOf: -> #{#InterpreterTraits. #NoRoleObject}.
50 -> #stackPointer -> #{#InterpreterTraits}.
51 -> #framePointer -> #{#InterpreterTraits}.
52 -> #codePointer -> #{#InterpreterTraits}.
53 -> #collectGarbage -> #{#BootstrapObject}.
54 -> #bytesPerWord -> #{#BootstrapObject}.
55 -> #firstObject -> #{#BootstrapObject}.
56 -> #nextObjectAfter: -> #{#BootstrapObject. #NoRoleObject}.
57 -> #firstObjectDelegatingTo: -> #{#BootstrapObject. #NoRoleObject}.
58 -> #nextObjectAfter:delegatingTo: -> #{#BootstrapObject. #NoRoleObject. #NoRoleObject}.
59 -> #firstObjectReferringTo: -> #{#BootstrapObject. #NoRoleObject}.
60 -> #nextObjectAfter:referringTo: -> #{#BootstrapObject. #NoRoleObject. #NoRoleObject}.
61 -> #isLastObject: -> #{#BootstrapObject. #NoRoleObject}.
62 -> #isLastObject:delegatingTo: -> #{#BootstrapObject. #NoRoleObject. #NoRoleObject}.
63 -> #isLastObject:referringTo: -> #{#BootstrapObject. #NoRoleObject. #NoRoleObject}.
64 -> #read:from:into:startingAt: -> #{#ConsoleObject. #NoRoleObject. #NoRoleObject. #NoRoleObject. #NoRoleObject}.
65 -> #write:to:from:startingAt: -> #{#ConsoleObject. #NoRoleObject. #NoRoleObject. #NoRoleObject. #NoRoleObject}.
66 -> #flushOutput -> #{#ConsoleObject}.
67 -> #handleFor: -> #{#FileTraits. #NoRoleObject}.
68 -> #handleForInput: -> #{#FileTraits. #NoRoleObject}.
69 -> #handleForOutput: -> #{#FileTraits. #NoRoleObject}.
70 -> #handleForNew: -> #{#FileTraits. #NoRoleObject}.
71 -> #close: -> #{#FileTraits. #NoRoleObject}.
72 -> #read:from:into:startingAt: -> #{#FileTraits. #NoRoleObject. #NoRoleObject. #NoRoleObject. #NoRoleObject}.
73 -> #write:to:from:startingAt: -> #{#FileTraits. #NoRoleObject. #NoRoleObject. #NoRoleObject. #NoRoleObject}.
74 -> #reposition:to: -> #{#FileTraits. #NoRoleObject. #NoRoleObject}.
75 -> #positionOf: -> #{#FileTraits. #NoRoleObject}.
76 -> #atEndOf: -> #{#FileTraits. #NoRoleObject}.
77 -> #sizeOf: -> #{#FileTraits. #NoRoleObject}.
78 -> #saveImageNamed: -> #{#BootstrapObject. #NoRoleObject}.
79 -> #primitiveOpen: -> #{#DirectoryTraits. #NoRoleObject}.
80 -> #primitiveClose: -> #{#DirectoryTraits. #NoRoleObject}.
81 -> #primitiveRead:into: -> #{#DirectoryTraits. #NoRoleObject. #NoRoleObject}.
82 -> #primitiveGetCurrentDirectory: -> #{#DirectoryTraits. #NoRoleObject}.
83 -> #primitiveSetCurrentDirectory: -> #{#DirectoryTraits. #NoRoleObject}.
84 -> #significand -> #{#FloatTraits}.
85 -> #exponent -> #{#FloatTraits}.
86 -> #withSignificand:exponent: -> #{#FloatTraits. #NoRoleObject. #NoRoleObject}.
87 -> #'=' -> #{#FloatTraits. #FloatTraits}.
88 -> #'<' -> #{#FloatTraits. #FloatTraits}.
89 -> #'+' -> #{#FloatTraits. #FloatTraits}.
90 -> #'-' -> #{#FloatTraits. #FloatTraits}.
91 -> #'*' -> #{#FloatTraits. #FloatTraits}.
92 -> #'/' -> #{#FloatTraits. #FloatTraits}.
93 -> #raisedTo: -> #{#FloatTraits. #FloatTraits}.
94 -> #ln -> #{#FloatTraits}.
95 -> #exp -> #{#FloatTraits}.
96 -> #sin -> #{#FloatTraits}.
97 -> #cos -> #{#FloatTraits}.
98 -> #tan -> #{#FloatTraits}.
99 -> #arcsin -> #{#FloatTraits}.
100 -> #arccos -> #{#FloatTraits}.
101 -> #arctan -> #{#FloatTraits}.
102 -> #arctan: -> #{#FloatTraits. #FloatTraits}.
103 -> #newFixedAreaSized: -> #{#ByteArrayTraits. #NoRoleObject}.
104 -> #close: -> #{#ByteArrayTraits. #NoRoleObject}.
105 -> #noteNewReferenceTo: -> #{#ByteArrayTraits. #NoRoleObject}.
106 -> #write:into:startingAt: -> #{#ByteArrayTraits. #NoRoleObject. #NoRoleObject. #NoRoleObject}.
107 -> #read:from:startingAt: -> #{#ByteArrayTraits. #NoRoleObject. #NoRoleObject. #NoRoleObject}.
108 -> #sizeOf: -> #{#ByteArrayTraits. #NoRoleObject}.
109 -> #resize:to: -> #{#ByteArrayTraits. #NoRoleObject. #NoRoleObject}.
110 -> #addressOf:at:into: -> #{#ByteArrayTraits. #NoRoleObject. #NoRoleObject. #NoRoleObject}.
111 -> #primitiveOpen:handle: -> #{#ExternalLibraryTraits. #ASCIIStringTraits. #ByteArrayTraits}.
112 -> #primitiveClose: -> #{#ExternalLibraryTraits. #ByteArrayTraits}.
113 -> #primitiveLookup:handle:into: -> #{#ExternalLibraryTraits. #ASCIIStringTraits. #ByteArrayTraits. #ByteArrayTraits}.
114 -> #primitiveErrorInto: -> #{#ExternalLibraryTraits. #ByteArrayTraits}.
115 -> #primitiveApply:accepting:callFormat:returning:to: -> #{#ExternalLibraryTraits. #ByteArrayTraits. #NoRoleObject. #NoRoleObject. #NoRoleObject. #ArrayTraits}.
116 -> #timeSinceEpoch -> #{#BootstrapObject}.
117 -> #cloneSystem -> #{#BootstrapObject}.
118 -> #readFromPipe:start:end: -> #{#NoRoleObject. #SmallIntegerTraits. #SmallIntegerTraits. #SmallIntegerTraits}.
119 -> #writeToPipe:start:end: -> #{#NoRoleObject. #SmallIntegerTraits. #SmallIntegerTraits. #SmallIntegerTraits}.
120 -> #selectOnReadPipesFor: -> #{#ArrayTraits. #SmallIntegerTraits}.
121 -> #selectOnWritePipesFor: -> #{#ArrayTraits. #SmallIntegerTraits}.
122 -> #closePipe -> #{#SmallIntegerTraits}.
123 -> #socketCreate:protocol: -> #{#SmallIntegerTraits. #SmallIntegerTraits. #SmallIntegerTraits}.
124 -> #socketListenSize: -> #{#SmallIntegerTraits. #SmallIntegerTraits}.
125 -> #socketAcceptConnection -> #{#SmallIntegerTraits}. "returns {retval. struct sockaddr}"
126 -> #socketBindOn: -> #{#SmallIntegerTraits. #ByteArrayTraits}.
127 -> #socketConnect: -> #{#SmallIntegerTraits. #ByteArrayTraits}.
128 -> #createIPAddress:port:options: -> #{#SmallIntegerTraits. #NoRoleObject. #NoRoleObject. #NoRoleObject}. "AF_INET createIPAddress: {127. 0. 0. 1} port: 80 options: #{}"
129 -> #smallIntegerMinimum -> #{#BootstrapObject}.
130 -> #smallIntegerMaximum -> #{#BootstrapObject}.
131 -> #socketGetError -> #{#SmallIntegerTraits}.
"lobby getAddrInfo: ('slatelanguage.org' as: ByteArray) 
       service: ('http' as: ByteArray)
       family: Net Socket Domains IP4 
       type: Net Socket Types Stream 
       protocol: Net Socket Protocols Default 
       flags: 0"
"returns an integer to the ticket you've been assigned (since it is asynchronous)"
132 -> #getAddrInfo:service:family:type:protocol:flags: -> #{#BootstrapObject. #NoRoleObject. #NoRoleObject. #SmallIntegerTraits. #SmallIntegerTraits. #SmallIntegerTraits. #SmallIntegerTraits}.
"Gets the result of the earlier async call or Nil if it's not ready. if it's done you get an error code(int) or an array (resolved addresses)"
133 -> #getAddrInfoResult -> #{#SmallIntegerTraits}.
134 -> #freeAddrInfoResult -> #{#SmallIntegerTraits}.
135 -> #vmArgCount -> #{#BootstrapObject}.
136 -> #vmArg: -> #{#BootstrapObject. #SmallIntegerTraits}.
}.

Image define: #BareDefinition -> (Image Definition cloneSettingSlots: #{#bootstrapFilenames}
 to: {{'src/llvm/mobius/pre-bootstrap.slate'}}).
"An Image Definition consisting of the bare minimum to run some primitive call,
like adding 3 + 4, say."
"TODO: refactor Image Definition so that we can just supply a block here."
 

def@(Image Definition traits) newNamed: filename littleEndian: littleEndian bitSize: bitSize
[
  (def cloneSettingSlots: #{#littleEndian. #bitSize} to: {littleEndian. bitSize})
    `>> [generateFilename &base: filename. ]
].

def@(Image Definition traits) generateFilename &base: base
[
  base `defaultsTo: 'kernel'.
  def filename: base ; '.' ; (def littleEndian ifTrue: ['little'] ifFalse: ['big'])
   ; '.' ; def bitSize printString ; '.' ; (lobby timeSinceEpoch as: Integer) printString ; '.image'].

c@(Image Definition traits) generate
[| builder bootBlock statements |
  builder: (Image Bootstrap Generator new &littleEndian: c littleEndian &bitSize: c bitSize).
  c filename ifNil: [c generateFilename].
  (File newNamed: c filename &mode: File CreateWrite) sessionDo:
    [| :imageFile image |
     image: imageFile writer.
     bootBlock: Syntax Block new.
     statements: bootBlock statements writer.
     c bootstrapFilenames do:
       [| :each |
        inform: 'Parsing ' ; each printString.
        (File newNamed: each &mode: File Read) sessionDo:
           [| :file | (Syntax Parser newOn: file reader) >> statements]].
     bootBlock statements: statements contents.
     inform: 'Building image.'.
     builder generateImageBooting: bootBlock withPrims: c primitives.
     builder emitOn: image].
  builder
].


i@Image littleEndian: littleEndian bitSize: bitSize
"Only to be called during or after fullCleanBootstrap to build new images
based on the new VM Definition."
[
  littleEndian
   ifTrue: [ i define: #newLittle ->
              (i Definition newNamed: 'kernel.new' littleEndian: True bitSize: bitSize).
            i newLittle generate ]
   ifFalse: [ i define: #newBig ->
               (i Definition newNamed: 'kernel.new' littleEndian: False bitSize: bitSize).
             i newBig generate ]

].

i@Image generateAmd64Test
[
  (i BareDefinition newNamed: 'k64' littleEndian: True bitSize: 64) generate.
].

i@Image generateAmd64
[
  (i Definition newNamed: 'amd64' littleEndian: True bitSize: 64) generate.
].





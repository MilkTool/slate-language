define: #Type &parents: {Pointer}.
Type traits atSlotNamed: #printName put: 'LLVM Type'.

t@(Type traits) new [
  t shouldNotImplement
].

t@(Type traits) newWithHandle: handle@(ByteArray traits) [
  Type allSlotsDo:
    [| :each | (each is: Type) /\ [each handle = handle] ifTrue: [^ each]].
  resend
].

"-------------------------------Operations on integer types------------------------------------"

Type traits define: #Integer &parents: {Type}.
Type Integer traits atSlotNamed: #printName put: 'LLVM Type Integer'.

"LLVMTypeRef LLVMIntType(unsigned NumBits);"
i@(Type Integer traits) newWithBits: numBits@(Integer traits) [
  i newWithHandle: (
    Lib primitives LLVMIntType applyTo: { numBits }
  )
].

Type traits define: #Integer1 &parents: {Oddball. Type Integer}.
Type Integer1 traits atSlotNamed: #printName put: 'LLVM Type Integer1'.

"LLVMTypeRef LLVMInt1Type(void);"
i1@(Type Integer1 traits) initialize [
  i1 handle: (
    Lib primitives LLVMInt1Type do
  )
].

Type Integer1 initialize.

Type traits define: #Integer8 &parents: {Oddball. Type Integer}.
Type Integer8 traits atSlotNamed: #printName put: 'LLVM Type Integer8'.

"LLVMTypeRef LLVMInt8Type(void);"
i8@(Type Integer8 traits) initialize [
  i8 handle: (
    Lib primitives LLVMInt8Type do
  )
].

Type Integer8 initialize.

Type traits define: #Integer16 &parents: {Oddball. Type Integer}.
Type Integer16 traits atSlotNamed: #printName put: 'LLVM Type Integer16'.

"LLVMTypeRef LLVMInt16Type(void);"
i16@(Type Integer16 traits) initialize [
  i16 handle: (
    Lib primitives LLVMInt16Type do
  )
].

Type Integer16 initialize.

Type traits define: #Integer32 &parents: {Oddball. Type Integer}.
Type Integer32 traits atSlotNamed: #printName put: 'LLVM Type Integer32'.

"LLVMTypeRef LLVMInt32Type(void);"
i32@(Type Integer32 traits) initialize [
  i32 handle: (
    Lib primitives LLVMInt32Type do
  )
].

Type Integer32 initialize.

Type traits define: #Integer64 &parents: {Oddball. Type Integer}.
Type Integer64 traits atSlotNamed: #printName put: 'LLVM Type Integer64'.

"LLVMTypeRef LLVMInt64Type(void);"
i64@(Type Integer64 traits) initialize [
  i64 handle: (
    Lib primitives LLVMInt64Type do
  )
].

Type Integer64 initialize.

"-------------------------------Operations on function types------------------------------------"

Type traits define: #Function &parents: {Type}.
Type Function traits atSlotNamed: #printName put: 'LLVM Type Function'. 

"LLVMTypeRef LLVMFunctionType(LLVMTypeRef ReturnType,
                             LLVMTypeRef *ParamTypes, unsigned ParamCount,
                             int IsVarArg);"
f@(Type Function traits) new &returnType &parameterTypes &isVarArg
[| parameters |
  returnType `defaultsTo: Type Void.
  parameterTypes `defaultsTo: {}.
  isVarArg `defaultsTo: False.
  parameters := (parameterTypes collect: #handle `er) reduce: #; `er.
  f newWithHandle: (
    Lib primitives LLVMFunctionType applyTo: { returnType handle. parameters. parameterTypes size. isVarArg }
  )
].

"LLVMTypeRef LLVMGetReturnType(LLVMTypeRef FunctionTy);"
f@(Type Function traits) returnType [
  Type newWithHandle: (
    Lib primitives LLVMGetReturnType applyTo: { f handle }
  )
].

"-------------------------------Operations on struct types------------------------------------"

Type traits define: #Struct &parents: {Type}.
Type Struct traits atSlotNamed: #printName put: 'LLVM Type Struct'. 

"LLVMTypeRef LLVMStructType(LLVMTypeRef *ElementTypes, unsigned ElementCount,
                           int Packed);"
s@(Type Struct traits) new &elementTypes &isPacked
[| elements |
  elementTypes `defaultsTo: {}.
  isPacked `defaultsTo: False.
  elements := (elementTypes collect: #handle `er) reduce: #; `er.
  s newWithHandle: (
    Lib primitives LLVMStructType applyTo: { elements. elementTypes size. isPacked }
  )
].

"------------Operations on array, pointer, and vector types (sequence types)-------------------------"

Type traits define: #Pointer &parents: {Type}.
Type Pointer traits atSlotNamed: #printName put: 'LLVM Type Pointer'.

"LLVMTypeRef LLVMPointerType(LLVMTypeRef ElementType, unsigned AddressSpace);"
p@(Type Pointer traits) newFor: type@(Type traits) &addressSpace [
  addressSpace `defaultsTo: 0.
  p newWithHandle: (
    Lib primitives LLVMPointerType applyTo: { type handle. addressSpace }
  )
].

Type traits define: #Array &parents: {Type}.
Type Array traits atSlotNamed: #printName put: 'LLVM Type Array'.

"LLVMTypeRef LLVMArrayType(LLVMTypeRef ElementType, unsigned ElementCount);"
a@(Type Array traits) newWith: type@(Type traits) &elementCount [
  elementCount `defaultsTo: 0.
  a newWithHandle: (
    Lib primitives LLVMArrayType applyTo: { type handle. elementCount }
  )
].

Type traits define: #Vector &parents: {Type}.
Type Vector traits atSlotNamed: #printName put: 'LLVM Type Vector'.

"LLVMTypeRef LLVMVectorType(LLVMTypeRef ElementType, unsigned ElementCount);"
v@(Type Vector traits) newWith: type@(Type traits) &elementCount [
  elementCount `defaultsTo: 0.
  v newWithHandle: (
    Lib primitives LLVMVectorType applyTo: { type handle. elementCount }
  )
].

"-------------------------------Operations on other types------------------------------------"

Type traits define: #Void &parents: {Oddball. Type}.
Type Void traits atSlotNamed: #printName put: 'LLVM Type Void'.

"LLVMTypeRef LLVMVoidType(void);"
v@(Type Void traits) initialize [
  v handle: (
    Lib primitives LLVMVoidType do
  )
].

Type Void initialize.

Type traits define: #Label &parents: {Oddball. Type}.
Type Label traits atSlotNamed: #printName put: 'LLVM Type Label'.

"LLVMTypeRef LLVMLabelType(void);"
l@(Type Label traits) initialize [
  l handle: (
    Lib primitives LLVMLabelType do
  )
].

Type Label initialize.

Type traits define: #Opaque &parents: {Type}.
Type Opaque traits atSlotNamed: #printName put: 'LLVM Type Opaque'.

"LLVMTypeRef LLVMOpaqueType(void);"
o@(Type Opaque traits) new [
  o newWithHandle: (
    Lib primitives LLVMOpaqueType do
  )
].

"-------------------------------Operations on type handles------------------------------------"

Type traits define: #Holder &parents: {Type}.
Type Holder traits atSlotNamed: #printName put: 'LLVM Type Holder'.

"LLVMTypeHandleRef LLVMCreateTypeHandle(LLVMTypeRef PotentiallyAbstractTy);"
t@(Type traits) holder [
  Type Holder newWithHandle: (
    Lib primitives LLVMCreateTypeHandle applyTo: { t handle }
  )
].

"void LLVMDisposeTypeHandle(LLVMTypeHandleRef TypeHandle);"
h@(Type Holder traits) dispose [
  Lib primitives LLVMDisposeTypeHandle applyTo: { h handle }.
  h
].

"LLVMTypeRef LLVMResolveTypeHandle(LLVMTypeHandleRef TypeHandle);"
h@(Type Holder traits) resolve [
  Type newWithHandle: (
    Lib primitives LLVMResolveTypeHandle applyTo: { h handle }
  )  
].

"void LLVMRefineType(LLVMTypeRef AbstractTy, LLVMTypeRef ConcreteTy);"
o@(Type traits) refineTo: type@(Type traits) [
  Lib primitives LLVMRefineType applyTo: { o handle. type handle }.
  o
].

"-------------------------------Operations on scalar constants------------------------------------"

"LLVMValueRef LLVMConstInt(LLVMTypeRef IntTy, unsigned long long N,
                          int SignExtend);"
t@(Type Integer traits) value: value@(Integer traits) signed: signed@(Boolean traits) [
  Value ConstantInt newWithHandle: (
    Lib primitives LLVMConstInt applyTo: { t handle. value. signed }
  )
].



                        




define: #IRBuilder &parents: {Pointer}.
IRBuilder traits atSlotNamed: #printName put: 'IRBuilder'.

"--------------------------------Instruction builders------------------------------"

"LLVMBuilderRef LLVMCreateBuilder(void);"
irb@(IRBuilder traits) new [
  irb newWithHandle: (
    Lib primitives LLVMCreateBuilder do
  )
].

"void LLVMDisposeBuilder(LLVMBuilderRef Builder);"
irb@(IRBuilder traits) dispose [
  Lib primitives LLVMDisposeBuilder applyTo: {irb handle}.
  irb
].

"void LLVMPositionBuilderAtEnd(LLVMBuilderRef Builder, LLVMBasicBlockRef Block);"
irb@(IRBuilder traits) insertPoint: block@(Value BasicBlock traits) [
  Lib primitives LLVMPositionBuilderAtEnd applyTo: {irb handle. block handle}.
  irb
].

"--------------------------------Terminators------------------------------"

"LLVMValueRef LLVMBuildRetVoid(LLVMBuilderRef);"
"LLVMValueRef LLVMBuildRet(LLVMBuilderRef, LLVMValueRef V);"
irb@(IRBuilder traits) ret &value [
  value
    ifNil: [
      Lib primitives LLVMBuildRetVoid applyTo: {irb handle}
    ]
    ifNotNil: [
      Lib primitives LLVMBuildRet applyTo: {irb handle. value handle}
    ]
].

"--------------------------------Arithmetic------------------------------"

"LLVMValueRef LLVMBuildAdd(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,
                          const char *Name);"
irb@(IRBuilder traits) add: values@(Tuple traits) &name [
  name `defaultsTo: 'addtmp'.
  Value newWithHandle: (
    Lib primitives LLVMBuildAdd applyTo: {irb handle. values first handle. values second handle. name }
  )
].

"--------------------------------Miscellaneous instructions------------------------------"

"LLVMValueRef LLVMBuildCall(LLVMBuilderRef B, LLVMValueRef Fn,
                           LLVMValueRef *Args, unsigned NumArgs,
                           const char *Name)"
irb@(IRBuilder traits) call: function@(Value traits) arguments: arguments@(Sequence traits) &name [
  | args |
  name `defaultsTo: ''.
  args: (arguments collect: [ | :each |
    (each is: Value) ifFalse: [ error: 'argument is not a Value' ].
    each handle
  ]).
  args: (args reduce: #; `er).
  Value newWithHandle: (
    Lib primitives LLVMBuildCall applyTo: { irb handle. function handle. args. arguments size. name }
  )
].

"--------------------------------Memory instructions------------------------------"

"LLVMValueRef LLVMBuildAlloca(LLVMBuilderRef, LLVMTypeRef Ty, const char *Name);"
irb@(IRBuilder traits) allocA: type@(Type traits) name: name [
  Value newWithHandle: (
    Lib primitives LLVMBuildAlloca applyTo: { irb handle. type handle. name }
  )
].

"LLVMValueRef LLVMBuildStore(LLVMBuilderRef, LLVMValueRef Val, LLVMValueRef Ptr);"
irb@(IRBuilder traits) store: value@(Value traits) at: pointer@(Value traits) [
  Value newWithHandle: (
    Lib primitives LLVMBuildStore applyTo: { irb handle. value handle. pointer handle }
  )
].

"LLVMValueRef LLVMBuildLoad(LLVMBuilderRef, LLVMValueRef PointerVal,
                           const char *Name);"
irb@(IRBuilder traits) load: pointer@(Value traits) &name [
  name `defaultsTo: 'load'.
  Value newWithHandle: (
    Lib primitives LLVMBuildLoad applyTo: { irb handle. pointer handle. name }
  )
].

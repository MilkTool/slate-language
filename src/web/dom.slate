lobby ensureNamespace: #Dom.

"fixme: this needs to be fixed to utf-16?"
Dom define: #DomString &parents: {UnicodeString}.

Dom define: #DomTimeStamp &parents: {Integer}.

Dom define: #DomObject &parents: {Cloneable}.

Dom define: #DomException &parents: {Error} &slots: {#code -> 0}.

Dom define: #DomErrors &builder: [|d| d := Dictionary new.
                                  {
#INDEX_SIZE_ERR                 -> 1.
#DOMSTRING_SIZE_ERR             -> 2.
#HIERARCHY_REQUEST_ERR          -> 3.
#WRONG_DOCUMENT_ERR             -> 4.
#INVALID_CHARACTER_ERR          -> 5.
#NO_DATA_ALLOWED_ERR            -> 6.
#NO_MODIFICATION_ALLOWED_ERR    -> 7.
#NOT_FOUND_ERR                  -> 8.
#NOT_SUPPORTED_ERR              -> 9.
#INUSE_ATTRIBUTE_ERR            -> 10.
#INVALID_STATE_ERR              -> 11.
#SYNTAX_ERR                     -> 12.
#INVALID_MODIFICATION_ERR       -> 13.
#NAMESPACE_ERR                  -> 14.
#INVALID_ACCESS_ERR             -> 15.
#VALIDATION_ERR                 -> 16.
#TYPE_MISMATCH_ERR              -> 17.
} do: [|:each newKey |
         newKey := (((each key as: String) toLowercase toCamelCase &separators: {$_})
                   as: Symbol).
         d at: newKey put: each value.
         d at: each value put: newKey].
         d].

Dom define: #NodeTypes &builder: [|d| d := Dictionary new.
                                  {
#ELEMENT_NODE                   -> 1.
#ATTRIBUTE_NODE                 -> 2.
#TEXT_NODE                      -> 3.
#CDATA_SECTION_NODE             -> 4.
#ENTITY_REFERENCE_NODE          -> 5.
#ENTITY_NODE                    -> 6.
#PROCESSING_INSTRUCTION_NODE    -> 7.
#COMMENT_NODE                   -> 8.
#DOCUMENT_NODE                  -> 9.
#DOCUMENT_TYPE_NODE             -> 10.
#DOCUMENT_FRAGMENT_NODE         -> 11.
#NOTATION_NODE                  -> 12.
} do: [|:each newKey |
         newKey := (((each key as: String) toLowercase toCamelCase &separators: {$_})
                   as: Symbol).
         d at: newKey put: each value.
         d at: each value put: newKey].
         d].

Dom define: #DocumentPositions &builder: [|d| d := Dictionary new.
{
#DOCUMENT_POSITION_DISCONNECTED -> 16r01.
#DOCUMENT_POSITION_PRECEDING    -> 16r02.
#DOCUMENT_POSITION_FOLLOWING    -> 16r04.
#DOCUMENT_POSITION_CONTAINS     -> 16r08.
#DOCUMENT_POSITION_CONTAINED_BY -> 16r10.
#DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC -> 16r20.
} do: [|:each newKey |
         newKey := (((each key as: String) toLowercase toCamelCase &separators: {$_})
                   as: Symbol).
         d at: newKey put: each value.
         d at: each value put: newKey].
         d].

Dom define: #DomList &parents: {Cloneable} &slots: {#array}.
Dom define: #NodeList &parents: {Dom DomList}.
Dom define: #StringList &parents: {Dom DomList}.
Dom define: #NameList &parents: {Dom DomList}.
Dom define: #NamedNodeMap &parents: {Cloneable} &slots: {#dict}.

"interface NamedNodeMap {
  Node               getNamedItem(in DOMString name);
  Node               setNamedItem(in Node arg)
                                        raises(DOMException);
  Node               removeNamedItem(in DOMString name)
                                        raises(DOMException);
  Node               item(in unsigned long index);
  readonly attribute unsigned long    length;
  // Introduced in DOM Level 2:
  Node               getNamedItemNS(in DOMString namespaceURI, 
                                    in DOMString localName);
  // Introduced in DOM Level 2:
  Node               setNamedItemNS(in Node arg)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  Node               removeNamedItemNS(in DOMString namespaceURI, 
                                       in DOMString localName)
                                        raises(DOMException);
};
"
sl@(Dom DomList traits) new [resend `>> [array := ExtensibleArray new. ]].

sl@(Dom DomList traits) length [sl array size].
sl@(Dom DomList traits) item: n [sl array at: n].

sl@(Dom NamedNodeMap traits) length [sl dict size].
sl@(Dom NamedNodeMap traits) item: n [sl dict at: n].

sl@(Dom NamedNodeMap traits) getNamedItem: item [sl dict at: item].
sl@(Dom NamedNodeMap traits) setNamedItem: item to: value [sl dict at: item put: value].
sl@(Dom NamedNodeMap traits) removeNamedItem: item [sl dict remove: item].

"fixme"
sl@(Dom NamedNodeMap traits) getNamedItem: item ns: ns[sl dict at: item].
sl@(Dom NamedNodeMap traits) setNamedItem: item ns: ns to: value [sl dict at: item put: value].
sl@(Dom NamedNodeMap traits) removeNamedItem: item ns: ns [sl dict remove: item].

sl@(Dom StringList traits) contains: item [sl array anySatisfy: #(= item) `er].

sl@(Dom NameList traits) contains: item [sl array anySatisfy: #(= item) `er].
sl@(Dom NameList traits) contains: item ns: ns [fixme].
sl@(Dom NameList traits) getName: n [fixme].
sl@(Dom NameList traits) getNamespaceUri: n [fixme].

Dom define: #Node &parents: {Cloneable} &slots: {#nodeName. #nodeValue. #parentNode. #childNodes.
#attributes. #ownerDocument. #namespaceURI. #prefix. #localName. #baseUri. #textContent}.

Dom define: #DocumentFragment &parents: {Dom Node} &slots: {}.
Dom define: #Document &parents: {Dom Node} &slots: {#doctype. #implementation. #element}.
Dom define: #CharacterData &parents: {Dom Node} &slots: {#data}.
Dom define: #Attr &parents: {Dom Node} &slots: {#name. #specified. #value. #ownerElement}.
Dom define: #Element &parents: {Dom Node} &slots: {#tagName}.

Dom define: #Text &parents: {Dom CharacterData} &slots: {}.
Dom define: #CDATASection &parents: {Dom Text} &slots: {}.
Dom define: #Comment &parents: {Dom CharacterData} &slots: {}.
Dom define: #Notation &parents: {Dom Node} &slots: {#systemId. #publicId}.
Dom define: #DocumentType &parents: {Dom Node} &slots: {#name. #entities. #notations.
#publicId. #systemId. #interalSubset}.
Dom define: #Entity &parents: {Dom Node} &slots: {#systemId. #publicId. #notationName}.
Dom define: #EntityReference &parents: {Dom Node} &slots: {}.

Dom define: #ProcessingInstruction &parents: {Dom Node} &slots: {#target. #data}.

_@(Dom Node traits) nodeType [overrideThis].
_@(Dom Element traits) nodeType [Dom NodeTypes ElementNode].
_@(Dom Attr traits) nodeType [Dom NodeTypes AttributeNode].
_@(Dom Text traits) nodeType [Dom NodeTypes TextNode].
_@(Dom CDATASection traits) nodeType [Dom NodeTypes CdataSectionNode].
_@(Dom EntityReference traits) nodeType [Dom NodeTypes EntityReferenceNode].
_@(Dom Entity traits) nodeType [Dom NodeTypes EntityNode].
_@(Dom ProcessingInstruction traits) nodeType [Dom NodeTypes ProcessingInstructionNode].
_@(Dom Comment traits) nodeType [Dom NodeTypes CommentNode].
_@(Dom Document traits) nodeType [Dom NodeTypes DocumentNode].
_@(Dom DocumentType traits) nodeType [Dom NodeTypes DocumentTypeNode].
_@(Dom DocumentFragment traits) nodeType [Dom NodeTypes DocumentFragmentNode].
_@(Dom Notation traits) nodeType [Dom NodeTypes NotationNode].

_@(Dom CharacterData traits) nodeType [error: 'fixme'].

_@(Dom Node traits) new
[
  resend `>> [childNodes := Dom NodeList new. attributes := Dom NamedNodeMap new. ]
].

n@(Dom Node traits) firstChild [n childNodes isEmpty ifTrue: [Nil] ifFalse: [n childNodes first]].
n@(Dom Node traits) lastChild [n childNodes isEmpty ifTrue: [Nil] ifFalse: [n childNodes last]].

n@(Dom Node traits) previousSibling [n parentNode childNodes before: n].
n@(Dom Node traits) nextSibling [n parentNode childNodes after: n].
n@(Dom Node traits) cloneNode: depth [fixme].
n@(Dom Node traits) normalize [fixme].
n@(Dom Node traits) supports: feature version: v [fixme].
n@(Dom Node traits) getFeature: feature version: v [fixme].
n@(Dom Node traits) compareDocumentPositionWith: other [fixme].
n@(Dom Node traits) isSameNode: other [fixme].
n@(Dom Node traits) isEqualNode: other [fixme].
n@(Dom Node traits) lookupNamespaceUri: other [fixme].
n@(Dom Node traits) setUserDataKey: key data: data handler: handler [fixme].
n@(Dom Node traits) getUserDataKey: key [fixme].
n@(Dom Node traits) isDefaultNamespace: namespace [fixme].

n@(Dom Node traits) hasAttributes [fixme].


"
DOMException

HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not
allow children of the type of the newChild node, or if the node to
insert is one of this node's ancestors or this node itself, or if this
node is of type Document and the DOM application attempts to insert a
second DocumentType or Element node.

WRONG_DOCUMENT_ERR: Raised if newChild was created from a different
document than the one that created this node.

NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly or if the
parent of the node being inserted is readonly.

NOT_FOUND_ERR: Raised if refChild is not a child of this node.

NOT_SUPPORTED_ERR: if this node is of type Document, this exception
might be raised if the DOM implementation doesn't support the
insertion of a DocumentType or Element node.

"
n@(Dom Node traits) insert: child before: otherChild
[
  (n childNodes find: child) ifNotNil: [n childNodes remove: child].
  otherChild ifNil: [^ (n childNodes add: child)].
  n childNodes insert: child before: otherChild
].

n@(Dom Node traits) insert: doc@(Dom DocumentFragment traits) before: otherChild
[
  doc childNodes do: [|:child| n insert: child before: otherChild].
].

n@(Dom Node traits) hasChildNodes [n childNodes isEmpty not].

n@(Dom Node traits) replaceChild: child with: otherChild
[
fixme
].

n@(Dom Node traits) append: child
[
  n childNodes insert: child before: Nil
].

"DOMException

NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.

NOT_FOUND_ERR: Raised if oldChild is not a child of this node.

NOT_SUPPORTED_ERR: if this node is of type Document, this exception
might be raised if the DOM implementation doesn't support the removal
of the DocumentType child or the Element child."

n@(Dom Node traits) removeChild: child
[
  n childNodes remove: child
].
"
interface Document : Node {
  readonly attribute DocumentType     doctype;
  readonly attribute DOMImplementation  implementation;
  readonly attribute Element          documentElement;
  Element            createElement(in DOMString tagName)
                                        raises(DOMException);
  DocumentFragment   createDocumentFragment();
  Text               createTextNode(in DOMString data);
  Comment            createComment(in DOMString data);
  CDATASection       createCDATASection(in DOMString data)
                                        raises(DOMException);
  ProcessingInstruction createProcessingInstruction(in DOMString target, 
                                                    in DOMString data)
                                        raises(DOMException);
  Attr               createAttribute(in DOMString name)
                                        raises(DOMException);
  EntityReference    createEntityReference(in DOMString name)
                                        raises(DOMException);
  NodeList           getElementsByTagName(in DOMString tagname);
  // Introduced in DOM Level 2:
  Node               importNode(in Node importedNode, 
                                in boolean deep)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  Element            createElementNS(in DOMString namespaceURI, 
                                     in DOMString qualifiedName)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  Attr               createAttributeNS(in DOMString namespaceURI, 
                                       in DOMString qualifiedName)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  NodeList           getElementsByTagNameNS(in DOMString namespaceURI, 
                                            in DOMString localName);
  // Introduced in DOM Level 2:
  Element            getElementById(in DOMString elementId);
};
"

d@(Dom Document traits) createElement: tagName &namespace: ns
[
  fixme
].

d@(Dom Document traits) createDocumentFragment [Dom DocumentFragment new].


d@(Dom Document traits) createTextNode: data
[
  fixme
].

d@(Dom Document traits) createComment: data
[
  fixme
].

d@(Dom Document traits) createCDATASection: data
[
  fixme
].

d@(Dom Document traits) createProcessingInstruction: target data: data
[
  fixme
].

d@(Dom Document traits) createAttribute: attr &namespace: ns
[
  fixme
].

d@(Dom Document traits) createEntityReference: name
[
  fixme
].

d@(Dom Document traits) getElementsByTagName: attr &namespace: ns
[
  fixme
].

d@(Dom Document traits) importNode: node deep: deep
[
  fixme
].

d@(Dom Document traits) getElementById: id
[
  fixme
].

"
interface CharacterData : Node {
           attribute DOMString        data;
                                        // raises(DOMException) on setting
                                        // raises(DOMException) on retrieval

  readonly attribute unsigned long    length;
  DOMString          substringData(in unsigned long offset, 
                                   in unsigned long count)
                                        raises(DOMException);
  void               appendData(in DOMString arg)
                                        raises(DOMException);
  void               insertData(in unsigned long offset, 
                                in DOMString arg)
                                        raises(DOMException);
  void               deleteData(in unsigned long offset, 
                                in unsigned long count)
                                        raises(DOMException);
  void               replaceData(in unsigned long offset, 
                                 in unsigned long count, 
                                 in DOMString arg)
                                        raises(DOMException);
};
"

cd@(Dom CharacterData traits) length
[
  cd data length
].

cd@(Dom CharacterData traits) offset: offset count: count
[
  cd data copyFrom: offset to: offset + count
].

"fixme these throw errors"
cd@(Dom CharacterData traits) append: data
[
  cd data: cd data <> data.
].

cd@(Dom CharacterData traits) insert: data at: index
[
  cd data: (cd data first: index) <> data <> (cd data allButFirst: index).
].

cd@(Dom CharacterData traits) deleteOffset: offset count: count
[
  cd data: (cd data first: index) <> (cd data allButFirst: index + count).
].

cd@(Dom CharacterData traits) replaceOffset: offset count: count with: replacement
[
  cd data: (cd data first: index) <> replacement <> (cd data allButFirst: index + count).
].

"interface Attr : Node {
  readonly attribute DOMString        name;
  readonly attribute boolean          specified;
           attribute DOMString        value;
                                        // raises(DOMException) on setting

  // Introduced in DOM Level 2:
  readonly attribute Element          ownerElement;
};
"

"interface Element : Node {
  readonly attribute DOMString        tagName;
  DOMString          getAttribute(in DOMString name);
  void               setAttribute(in DOMString name, 
                                  in DOMString value)
                                        raises(DOMException);
  void               removeAttribute(in DOMString name)
                                        raises(DOMException);
  Attr               getAttributeNode(in DOMString name);
  Attr               setAttributeNode(in Attr newAttr)
                                        raises(DOMException);
  Attr               removeAttributeNode(in Attr oldAttr)
                                        raises(DOMException);
  NodeList           getElementsByTagName(in DOMString name);
  // Introduced in DOM Level 2:
  DOMString          getAttributeNS(in DOMString namespaceURI, 
                                    in DOMString localName);
  // Introduced in DOM Level 2:
  void               setAttributeNS(in DOMString namespaceURI, 
                                    in DOMString qualifiedName, 
                                    in DOMString value)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  void               removeAttributeNS(in DOMString namespaceURI, 
                                       in DOMString localName)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  Attr               getAttributeNodeNS(in DOMString namespaceURI, 
                                        in DOMString localName);
  // Introduced in DOM Level 2:
  Attr               setAttributeNodeNS(in Attr newAttr)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  NodeList           getElementsByTagNameNS(in DOMString namespaceURI, 
                                            in DOMString localName);
  // Introduced in DOM Level 2:
  boolean            hasAttribute(in DOMString name);
  // Introduced in DOM Level 2:
  boolean            hasAttributeNS(in DOMString namespaceURI, 
                                    in DOMString localName);
};
"

"fixme, html probably uses simple strings, xml uses nodes"
e@(Dom Element traits) getAttribute: name &namespace: ns
[
  e attributes at: name 
].

e@(Dom Element traits) setAttribute: name value: value &namespace: ns
[
  e attributes at: name put: value
].

e@(Dom Element traits) removeAttribute: name &namespace: ns
[
  e attributes remove: name
].

e@(Dom Element traits) getAttributeNode: name &namespace: ns
[
  e attributes at: name 
].

e@(Dom Element traits) setAttributeNode: name value: value &namespace: ns
[
  e attributes at: name put: value
].

e@(Dom Element traits) removeAttribute: name &namespace: ns
[
  e attributes remove: name
].

"fixme use ns"
e@(Dom Element traits) getElementsByTagName: name &namespace: ns
[
  NodeList newWithAll: (e attributes select: [|:attr| attr name = name])
].

e@(Dom Element traits) hasAttribute: name &namespace: ns
[
  e attributes includes: name
].

"interface Text : CharacterData {
  Text               splitText(in unsigned long offset)
                                        raises(DOMException);
};"

t@(Dom Text traits) splitText: offset
[
  fixme
].

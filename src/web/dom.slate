
lobby ensureNamespace: #Dom.

"fixme: this needs to be fixed to utf-16?"
Dom define: #DomString &parents: {UnicodeString}.

Dom define: #DomTimeStamp &parents: {Integer}.

Dom define: #DomObject &parents: {Cloneable}.


Dom define: #DomException &parents: {Error} &slots: {#code -> 0}.

Dom define: #DomErrors &builder: [|d| d: Dictionary new.
                                  {
#INDEX_SIZE_ERR                 -> 1.
#DOMSTRING_SIZE_ERR             -> 2.
#HIERARCHY_REQUEST_ERR          -> 3.
#WRONG_DOCUMENT_ERR             -> 4.
#INVALID_CHARACTER_ERR          -> 5.
#NO_DATA_ALLOWED_ERR            -> 6.
#NO_MODIFICATION_ALLOWED_ERR    -> 7.
#NOT_FOUND_ERR                  -> 8.
#NOT_SUPPORTED_ERR              -> 9.
#INUSE_ATTRIBUTE_ERR            -> 10.
#INVALID_STATE_ERR              -> 11.
#SYNTAX_ERR                     -> 12.
#INVALID_MODIFICATION_ERR       -> 13.
#NAMESPACE_ERR                  -> 14.
#INVALID_ACCESS_ERR             -> 15.
#VALIDATION_ERR                 -> 16.
#TYPE_MISMATCH_ERR              -> 17.
} do: [|:each newKey |
         newKey: (((each key as: String) toLowercase toCamelCase &separators: {$_}) uncapitalized
                   as: Symbol).
         d at: newKey put: each value.
         d at: each value put: newKey].
         d].

Dom define: #NodeTypes &builder: [|d| d: Dictionary new.
                                  {
#ELEMENT_NODE                   -> 1.
#ATTRIBUTE_NODE                 -> 2.
#TEXT_NODE                      -> 3.
#CDATA_SECTION_NODE             -> 4.
#ENTITY_REFERENCE_NODE          -> 5.
#ENTITY_NODE                    -> 6.
#PROCESSING_INSTRUCTION_NODE    -> 7.
#COMMENT_NODE                   -> 8.
#DOCUMENT_NODE                  -> 9.
#DOCUMENT_TYPE_NODE             -> 10.
#DOCUMENT_FRAGMENT_NODE         -> 11.
#NOTATION_NODE                  -> 12.
} do: [|:each newKey |
         newKey: (((each key as: String) toLowercase toCamelCase &separators: {$_}) uncapitalized
                   as: Symbol).
         d at: newKey put: each value.
         d at: each value put: newKey].
         d].

Dom define: #DocumentPositions &builder: [|d| d: Dictionary new.
#DOCUMENT_POSITION_DISCONNECTED -> 16r01.
#DOCUMENT_POSITION_PRECEDING    -> 16r02.
#DOCUMENT_POSITION_FOLLOWING    -> 16r04.
#DOCUMENT_POSITION_CONTAINS     -> 16r08.
#DOCUMENT_POSITION_CONTAINED_BY -> 16r10.
#DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC -> 16r20.
} do: [|:each newKey |
         newKey: (((each key as: String) toLowercase toCamelCase &separators: {$_}) uncapitalized
                   as: Symbol).
         d at: newKey put: each value.
         d at: each value put: newKey].
         d].

Dom define: #DomList &parents: {ExtensibleArray}.
Dom define: #NodeList &parents: {Dom DomList}.
Dom define: #StringList &parents: {Dom DomList}.
Dom define: #NameList &parents: {Dom DomList}.

sl@(Dom DomList traits) length [sl size].
sl@(Dom DomList traits) item: n [sl at: n].
sl@(Dom StringList traits) contains: item [sl anySatisfy: #= `er <-* item].


sl@(Dom NameList traits) contains: item [sl anySatisfy: #= `er <-* item].
sl@(Dom NameList traits) contains: item ns: ns [fixme].
sl@(Dom NameList traits) getName: n [fixme].
sl@(Dom NameList traits) getNamespaceUri: n [fixme].

Dom define: #Node &parents: {Cloneable} &slots: {#nodeName. #nodeValue. #parentNode. #childNodes.
#attributes. #ownerDocument. #namespaceURI. #prefix. #localName. #baseUri. #textContent}.

Dom define: #DocumentFragment &parents: {Dom Node} &slots: {}.
Dom define: #Document &parents: {Dom Node} &slots: {}.


_@(Dom Node traits) new
[
  resend `>> [childNodes: Dom NodeList new. attributes: Dom NamedNodeMap new. ]
].


_@(Dom Node traits) nodeType [overrideThis].
n@(Dom Node traits) firstChild [n childNodes isEmpty ifTrue: [Nil] ifFalse: [n childNodes first]].
n@(Dom Node traits) lastChild [n childNodes isEmpty ifTrue: [Nil] ifFalse: [n childNodes last]].

n@(Dom Node traits) previousSibling [n parentNode childNodes before: n].
n@(Dom Node traits) nextSibling [n parentNode childNodes after: n].
n@(Dom Node traits) cloneNode: depth [fixme].
n@(Dom Node traits) normalize [fixme].
n@(Dom Node traits) supports: feature version: v [fixme].
n@(Dom Node traits) getFeature: feature version: v [fixme].
n@(Dom Node traits) compareDocumentPositionWith: other [fixme].
n@(Dom Node traits) isSameNode: other [fixme].
n@(Dom Node traits) isEqualNode: other [fixme].
n@(Dom Node traits) lookupNamespaceUri: other [fixme].
n@(Dom Node traits) setUserDataKey: key data: data handler: handler [fixme].
n@(Dom Node traits) getUserDataKey: key [fixme].
n@(Dom Node traits) isDefaultNamespace: namespace [fixme].

n@(Dom Node traits) hasAttributes [fixme].


"
DOMException

HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not
allow children of the type of the newChild node, or if the node to
insert is one of this node's ancestors or this node itself, or if this
node is of type Document and the DOM application attempts to insert a
second DocumentType or Element node.

WRONG_DOCUMENT_ERR: Raised if newChild was created from a different
document than the one that created this node.

NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly or if the
parent of the node being inserted is readonly.

NOT_FOUND_ERR: Raised if refChild is not a child of this node.

NOT_SUPPORTED_ERR: if this node is of type Document, this exception
might be raised if the DOM implementation doesn't support the
insertion of a DocumentType or Element node.

"
n@(Dom Node traits) insert: child before: otherChild
[
  (n childNodes find: child) ifNotNil: [n childNodes remove: child].
  otherChild ifNil: [^ (n childNodes add: child)].
  n childNodes insert: child before: otherChild
].

n@(Dom Node traits) insert: doc@(Dom DocumentFragment traits) before: otherChild
[
  doc childNodes do: [|:child| n insert: child before: otherChild].
].

n@(Dom Node traits) hasChildNodes [n childNodes isEmpty not].

n@(Dom Node traits) replaceChild: child with: otherChild
[
fixme
].

n@(Dom Node traits) append: child
[
  n childNodes insert: child before: Nil
].


"DOMException

NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.

NOT_FOUND_ERR: Raised if oldChild is not a child of this node.

NOT_SUPPORTED_ERR: if this node is of type Document, this exception
might be raised if the DOM implementation doesn't support the removal
of the DocumentType child or the Element child."

n@(Dom Node traits) removeChild: child
[
  n childNodes remove: child
].




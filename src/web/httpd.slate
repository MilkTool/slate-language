lobby ensureNamespace: #Http.

Http define: #HeaderParser &parents: {Parsing BasicParser}.
Http define: #Server &parents: {Cloneable}.
Http define: #Request &parents: {Cloneable} &slots: {#headers. #request. #stream}.


p@(Http HeaderParser traits) readHeaders
[ | headers line lineReader keyVal|
  headers: Dictionary new.
  lineReader: p source reader.
  [line: lineReader next. line isEmpty]
    whileFalse: [keyVal: line reader.
                 headers at: (keyVal upTo: $:) put: keyVal upToEnd].
  headers
].

r@(Http Request traits) handle
[ | reply out |
  out: '' writer.
  out ; 'Hello, <em>world</em>!'.
  out ; '<br/>Request: ' ; r request printString ; '<br/>'.
  out ; '<br/>Headers: ' ; r headers printString ; '<br/>'.

  reply: (out contents as: ByteArray).
  r stream nextPutAll: (('HTTP/1.1 200 OK\r\nServer: Slate/0.0\r\nContent-Type: text/html; charset=UTF-8\r\n'
                           ; 'Content-Length: '; reply length printString
                           ; '\r\nConnection: keep-alive\r\nKeep-Alive: timeout=10\r\n\r\n') as: ByteArray) ; reply.

].



server@(Http Server traits) start
[ | socket |
  socket: (Net SocketServer newOn: {127. 0. 0. 1} port: 8080 dispatch: [
    | :parent :peer stream headers parser request lineStream streamReader |

    stream: (Net SocketStream newOn: peer).
    streamReader: stream reader.
    r@(streamReader) next [resend as: $c]. "hack fixme"
    lineStream: streamReader lines. 
    parser: (Http HeaderParser newOn: lineStream). "fix LineStream to not suck up all the lines from the underlying stream"
    request: lineStream next.
    headers: parser readHeaders.
    lobby inform: 'Headers: ' ; headers printString.

    Http Request new `>> [headers: headers. stream: stream. request: request. handle].
    stream flush.
  ]).
  socket start.
].


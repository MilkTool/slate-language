
"XML 1.1 parser"

lobby ensureNamespace: #Xml.

Xml define: #Parser &parents: {Parsing BasicParser} &slots: {#rootElement}.

"this parser won't read any DTD info. it creates the objects below. it's non-conforming"
Xml define: #SimpleParser &parents: {Parsing BasicParser} &slots: {#rootElement. #dtd.
#whitespaceRange -> #(16r20 16r9 16rD 16rA).
#startCharacterRange -> #(16r3A":" (16r41 16r5A "A-Z") 16r5F "_" (16r61 16r7A"a-z") (16rC0 16rD6) (16rD8 16rF6) (16rF8 16r2FF) (16r370 16r37D) (16r37F 16r1FFF) (16r200C 16r200D) (16r2070 16r218F) (16r2C00 16r2FEF) (16r3001 16rD7FF) (16rF900 16rFDCF) (16rFDF0 16rFFFD) (16r10000 16rEFFFF)).
#nonStartCharacterRange -> #(16r2D"-" 16r2E"." (16r30 16r39)"(0-9)" 16rB7 (16r0300-16r036F) (16r203F-16r2040)).
}.

Xml define: #Dtd &parents: {Cloneable} &slots: {#blah}.
Xml define: #Namespace &parents: {Cloneable} &slots: {#uri}.
Xml define: #Identifier &parents: {Cloneable} &slots: {#name. #namespace}.
Xml define: #Element &parents: {Cloneable} &slots: {#name. #children. #attributes}.
Xml define: #Attribute &parents: {Cloneable} &slots: {#name. #text}.




"simple xml parser"

p@(Xml SimpleParser traits) new
[
  resend `>> [dtd: Xml Dtd new. ]
].

p@(Xml SimpleParser traits) newOn: s@(String traits)
[
  p newOn: s reader
].

p@(Xml SimpleParser traits) reset
[
  p source reset.

].

p@(Xml SimpleParser traits) parse
[
  p reset.
  p readProlog.
  p rootElement: p readElement
].

p@(Xml SimpleParser traits) readProlog
[
  (p isNextEqualTo: '<?') ifTrue: [p readUntil: '?>'. p source skip: 2].
].


p@(Xml SimpleParser traits) assertNext: char
[ |next|
  next: p source next.
  next ~= char ifTrue: [p error: 'Read: ' ; next printString ; ' expected: ' ; char printString].
].

p@(Xml SimpleParser traits) assertNext: str@(String traits)
[ 
  (p isNextEqualTo: str) ifTrue: [p source next: str length]
                         ifFalse: [p error: 'Read: ' ; (p peek: str length) printString ; ' expected: ' ; str printString]
].



p@(Xml SimpleParser traits) eatWhitespace &required: required
[ |next start end |
  required `defaultsTo: False.
  start: p source position.
  (p readOnly: p whitespaceRange).
  end: p source position.
  required /\ [start = end] ifTrue: [p error: 'Expected whitespace but found none '].
  end - start
].


p@(Xml SimpleParser traits) readElement
[ |name next element |
  p assertNext: $<.
  element: Xml Element new `>> [children: ExtensibleArray new. ].
  element name: p readName.
  "inform: 'element name is: ' ; element name printString."
  p eatWhitespace.

  p readAttributesFor: element.
  next: p source next.

  next = $/ ifTrue: [p assertNext: $>. 
                     element definesNamespace ifTrue: [p currentNamespace pop].
                     ^ element].

  next = $> ifTrue: [p readElementContentFor: element.
                     element definesNamespace ifTrue: [p currentNamespace pop].
                     ^ element].
  p error: 'Read: ' ; next printString ; ' expected end of element marker / or >'.
  
].


p@(Xml SimpleParser traits) readNamespaceOrName
[ |char name namespace |
  name: ExtensibleArray new.
  char: p source next.
  (p isCharacter: char inRange: p startCharacterRange) ifFalse: [p error: char printString ; ' is not a valid name start character.'].
  name addLast: char.

  [char: p source next.
   ((p isCharacter: char inRange: p startCharacterRange) \/ [p isCharacter: char inRange: p nonStartCharacterRange])
     ifTrue: [name addLast: char]
     ifFalse: [p source skip: -1. ^ (name as: p source collectionType)].
  ] loop.
].

p@(Xml SimpleParser traits) currentNamespace
[ "fixme"
  Nil
].

p@(Xml SimpleParser traits) namespaceFromName: name
[ "fixme"
  name
].


xi@(Xml Identifier traits) = s@(String traits)
[
  xi name = s
].

xi@(Xml Identifier traits) as: s@(String traits)
[
  xi name
].


p@(Xml SimpleParser traits) readName
[ |char name namespace |
  namespace: p readNamespaceOrName.
  char: p source peek.
  "(p isCharacter: char inRange: p whitespaceRange) \/ [p isNextEqualTo: '>'] \/ [p isNextEqualTo: '=']"
  (p isNextEqualTo: ':')
    ifFalse: [^ (Xml Identifier new `>> [name: namespace. namespace: p currentNamespace. ])].
  p assertNext: $:.
  name: p readNamespaceOrName.
  Xml Identifier new `>> [name: name. namespace: (p namespaceFromName: namespace). ]
].


p@(Xml SimpleParser traits) error: str
[ "fixme include location"
  error: str.
].

"reads until '<' '&' or ']]>' "
p@(Xml SimpleParser traits) readCharacterData
[ | str |
  str: (p readUntilAny: {'<'. '&'. ']]>'}).
  "fixme expand entities?"
  str
].

p@(Xml SimpleParser traits) readCdataSection
[ |str|
  p assertNext: '<![CDATA['.
  str: (p readUntil: ']]>').
  p assertNext: ']]>'.
  str
].

p@(Xml SimpleParser traits) readCdataSection
[ |str|
  p assertNext: '<!--'.
  str: (p readUntil: '-->').
  
  (str beginsWith: '-' \/ str endsWith: '-' \/ False"fixme be sure string contains no --")
    ifTrue: [p error: 'Comment contains extra -'].
  p assertNext: '-->'.
  str
].


p@(Xml SimpleParser traits) atEndTagFor: element
[ "fixme namespaces"
  p isNextEqualTo: '</' ; element name name
].

p@(Xml SimpleParser traits) assertEndTagFor: element
[ "fixme namespaces"
  p assertNext: '</' ; element name name.
  p eatWhitespace.
  p assertNext: '>'.
].

"read until </element name>"
"#content -> #( (CharData ?) ((| element Reference CDSect PI Comment) (CharData ?) *))."
p@(Xml SimpleParser traits) readElementContentFor: element
[ | seq cdata |
  seq: ExtensibleArray new.

  [
   cdata: p readCharacterData.
   cdata isEmpty ifFalse: [seq add: cdata].
   "inform: 'next up: ' ; (p source peek: 5) printString."
   (p isNextEqualTo: '</') ifTrue: [(p atEndTagFor: element) ifTrue: [p assertEndTagFor: element. 
                                                                      element children: seq.
                                                                      ^ element]
                                                             ifFalse: [p error: 'End tag expected for ' ; element printString]].
   (p isNextEqualTo: '<![CDATA[') ifTrue: [seq add: (p readCdataSection)].
   (p isNextEqualTo: '<?') ifTrue: [seq add: (p readProcessingInstruction)].
   (p isNextEqualTo: ']]>') ifTrue: [p error: ']]> not expected'].
   (p isNextEqualTo: '<!--') ifTrue: [seq add: (p readComment)].
   (p isNextEqualTo: '<') ifTrue: [seq add: (p readElement)].
   p source isAtEnd ifTrue: [p error: 'Could not end tag: ' ; element printString].
  ] loop.

  
].

p@(Xml SimpleParser traits) readAttributeValue
[ |delim str|
  delim: p source next.
  str: (p readUntil: delim).
  p assertNext: delim.
  "fixme resolve attributes"
  str
].


p@(Xml SimpleParser traits) readAttributesFor: element
[ |attrs name attvalue|
  attrs: Dictionary new.
  [p eatWhitespace.
   (p isNextEqualTo: '>') \/ [p isNextEqualTo: '/'] ifTrue: [element attributes: attrs. ^ element].
   name: p readName.
   p eatWhitespace.
   p assertNext: $=.
   p eatWhitespace.
   attvalue: p readAttributeValue.
   attrs at: (name as: String) put: attvalue.
  ] loop.
].


p@(Xml SimpleParser traits) isCharacter: char inRange: range
[ |charInt|
  charInt: (char as: Integer).
  range
   do: [|:item| (item is: Integer)
                   ifTrue: [item = charInt ifTrue: [^ True]]
                   ifFalse: [item first <= charInt /\ [item second >= charInt] ifTrue: [^ True]]].
  False
].


p@(Xml Element traits) definesNamespace
[
  False "fixme"
].



"main XML parser"


"the problem with this LL grammar is that it won't work because of XML entities and such"

". cannot be negated so [^<&]* is like (~ '<' '&' . *)"


"Xml Parser setRules:" {
#Document -> #(prolog element (Misc *)).
#Char -> #(| (16r1 16rD7FF) (16rE000 16rFFFD) (16r10000 16r10FFFF)).
#RestrictedChar -> #(| (16r1 16r8) (16rB 16rC) (16rE 16r1F) (16r7F 16r84) (16r86 16r9F)).
#S -> #(| 16r20 16r9 16rD 16rA +).
#NameStartChar -> #(| 16r3A":" (16r41 16r5A "A-Z") 16r5F "_" (16r61 16r7A"a-z") (16rC0 16rD6) (16rD8 16rF6) (16rF8 16r2FF) (16r370 16r37D) (16r37F 16r1FFF) (16r200C 16r200D) (16r2070 16r218F) (16r2C00 16r2FEF) (16r3001 16rD7FF) (16rF900 16rFDCF) (16rFDF0 16rFFFD) (16r10000 16rEFFFF)).
#NameNonStartChar -> #(| 16r2D"-" 16r2E"." (16r30 16r39)"(0-9)" 16rB7 (16r0300-16r036F) (16r203F-16r2040)).
#NameChar -> #(| NameStartChar NameNonStartChar).
#Name -> #(NameStartChar (NameChar *)).
#Names -> #(Name (16r20 Name *)).
#Nmtoken -> #((NameChar +)).
#Nmtokens -> #(Nmtoken (16r20 Nmtoken *)).
#EntityValue -> #(| ('"'  (| (~ '%' '&' '"') PEReference Reference . *) '"') ('\'' (| (~ '%' '&' '\'') PEReference Reference . *) '\'')).
#AttValue -> #(| ('"'  (| (~ '<' '&' '"') Reference . *) '"')  ('\'' (| (~ '<' '&' '\'') Reference . *) '\'')).
#SystemLiteral -> #(| ('"' (~ '"' . *) '"') ('\'' (~ '\'' . *) '\'')).
#PubidLiteral -> #(| ('"' (PubidChar *) '"') ('\'' ((~ '\'') PubidChar *) '\'')).
#PubidChar -> #(| 16r20 16rD 16rA (16r61 16r7A) (16r41 16r5A) (16r30 16r39) 45 39 40 41 43 44 46 47 58 61 63 59 33 42 35 64 36 95 37).
#CharData -> #((~ (| '<' '&' ']]>')) . *).
#Comment -> #('<!--' ((~ '--' ) Char *) '-->').
#PI -> #('<?' PITarget (S ((~ '?>') Char *) ?) '?>').
#PITarget -> #((~ (| 'X' 'x') (| 'M' 'm') (| 'L' 'l')) Name).
#CDSect -> #( CDStart  CData  CDEnd).
#CDStart -> #('<![CDATA[').
#CData -> #((~ ']]>') Char *).
#CDEnd -> #(']]>').
#prolog -> #( XMLDecl  (Misc *) (doctypedecl  (Misc *) ?)).
#XMLDecl -> #('<?xml' VersionInfo (EncodingDecl ?) (SDDecl ?) (S ?) '?>').
#VersionInfo -> #(S 'version' Eq (| ('\'' VersionNum '\'') ('"' VersionNum '"'))).
#Eq -> #((S ?) '=' (S ?)).
#VersionNum -> #('1.1').
#Misc -> #(| (Comment PI S)).
#doctypedecl -> #('<!DOCTYPE' S  Name (S  ExternalID ?) (S ?) ('[' intSubset ']' (S ?) ?) '>').
#DeclSep -> #(| PEReference S).
#intSubset -> #(| markupdecl DeclSep *).
#markupdecl -> #(| elementdecl AttlistDecl EntityDecl NotationDecl PI Comment).
#extSubset -> #( (TextDecl ?) extSubsetDecl).
#extSubsetDecl -> #((| markupdecl conditionalSect DeclSep *)).
#SDDecl -> #(  S   'standalone' Eq (| ('\'' (| 'yes' 'no') '\'') ('"' (| 'yes' 'no') '"'))).
#element -> #(| (EmptyElemTag) (STag content ETag) ).
#STag -> #('<' Name (S  Attribute *) (S ?) '>').
#Attribute -> #( Name  Eq  AttValue  ).
#ETag -> #('</' Name  (S ?) '>').
#content -> #( (CharData ?) ((| element Reference CDSect PI Comment) (CharData ?) *)).
#EmptyElemTag -> #('<' Name (S  Attribute *) (S ?) '/>').
#elementdecl -> #('<!ELEMENT' S  Name  S  contentspec  (S ?) '>').
#contentspec -> #(| ('EMPTY' 'ANY' Mixed children)  ).
#children -> #((| choice seq) (| '?'  '*' '+' ?)).
#cp -> #((| Name choice seq) (| '?' '*' '+' ?)).
#choice -> #('(' (S ?) cp ( (S ?) '|' (S ?) cp +) (S ?) ')').
#seq -> #('(' (S ?) cp ( (S ?) ',' (S ?) cp *) (S ?) ')').
#Mixed -> #(| ('(' (S ?) '#PCDATA' ((S ?) '|' (S ?) (Name *)) (S ?) ')*') ('(' (S ?) '#PCDATA' (S ?) ')') ).
#AttlistDecl -> #('<!ATTLIST' S  Name  (AttDef *) (S ?) '>').
#AttDef -> #(S Name S AttType S DefaultDecl ).
#AttType -> #(| StringType TokenizedType EnumeratedType).
#StringType -> #('CDATA').
#TokenizedType -> #(| 'ID' 'IDREF' 'IDREFS' 'ENTITY' 'ENTITIES' 'NMTOKEN' 'NMTOKENS').
#EnumeratedType -> #(| NotationType  Enumeration  ).
#NotationType -> #('NOTATION' S '(' (S ?) Name ((S ?) '|' (S ?) Name *) (S ?) ')').
#Enumeration -> #('(' (S ?) Nmtoken ((S ?) '|' (S ?) Nmtoken *) (S ?) ')').
#DefaultDecl -> #(| '#REQUIRED' '#IMPLIED' (('#FIXED' S ?) AttValue)).
#conditionalSect -> #(| includeSect ignoreSect).
#includeSect -> #('<![' (S ?) 'INCLUDE' (S ?) '[' extSubsetDecl ']]>' ).
#ignoreSect -> #('<![' (S ?) 'IGNORE' (S ?) '[' (ignoreSectContents *) ']]>').
#ignoreSectContents -> #( Ignore ('<![' ignoreSectContents ']]>' Ignore *)).
#Ignore -> #((~ (| '<![' ']]>')) Char *).
#CharRef -> #(| ('&#' ((16r30 16r39) +) ';') ('&#x' ((16r30 16r39) (16r61 16r66) (16r41 16r46) +) ';')).
#Reference -> #(| EntityRef CharRef).
#EntityRef -> #('&' Name ';').
#PEReference -> #('%' Name ';').
#EntityDecl -> #(| GEDecl  PEDecl).
#GEDecl -> #('<!ENTITY' S Name S EntityDef (S ?) '>').
#PEDecl -> #('<!ENTITY' S '%' S Name S PEDef (S ?) '>').
#EntityDef -> #(| EntityValue (ExternalID (NDataDecl ?))).
#PEDef -> #(| EntityValue ExternalID ).
#ExternalID -> #(| ('SYSTEM' S  SystemLiteral) ('PUBLIC' S PubidLiteral S SystemLiteral)).
#NDataDecl -> #(S 'NDATA' S Name ).
#TextDecl -> #('<?xml' (VersionInfo ?) EncodingDecl  (S ?) '?>').
#extParsedEnt -> #(  (  (TextDecl ?) content   ) "-  (  Char* RestrictedChar  Char*  )"  ).
#EncodingDecl -> #( S 'encoding' Eq (| ('"' EncName '"') ('\'' EncName '\'' ))).
#EncName -> #((| (16r41 16r5A) (16r61 16r7A)) (| ((16r41 16r5A) (16r61 16r7A) (16r30 16r39) '.' '_' '-') *)).
#NotationDecl -> #('<!NOTATION' S  Name  S (| ExternalID PublicID) (S ?) '>').
#PublicID -> #('PUBLIC' S PubidLiteral ).



}.

p@(Xml Parser traits) parseDocument
[
  p parse
].

Xml define: #Writer &parents: {Stream WrapperStream} &slots: {#tagStack -> Stack new}.

w@(Xml Writer traits) on: outputStream
[
  resend `>> [tagStack: w tagStack new. ]
].

w@(Xml Writer traits) emitAttribute: key valued: value
[
  w original ; ' ' ; key ; '=' ; '\"' ; (w encodeAttribute: value) ; '\"'.
].

w@(Xml Writer traits) inTag: tagName do: block &attributes: attributes
[
  attributes `defaultsTo: #().
  w original ; '<' ; tagName.
  attributes do: [| :item | w emitAttribute: item key valued: item value].
  w original ; '>'.
  w tagStack push: tagName.
  block applyWith: w.
  w original ; '</' ; tagName ; '>'.
  w tagStack pop.
].

w@(Xml Writer traits) emitTag: tagName &attributes: attributes
[
  attributes `defaultsTo: #().
  w original ; '<' ; tagName.
  attributes do: [| :item | w emitAttribute: item key valued: item value].
  w original ; ' />'.
].

w@(Xml Writer traits) inTag: tagName print: string
[
  w inTag: tagName do: [|:w| w nextPutAll: string]
].

w@(Xml Writer traits) encode: char@(String Character traits)
"TODO use generic entity code instead"
[
  char caseOf: {
    $< -> ['&lt;'].
    $> -> ['&gt;'].
    $& -> ['&amp;'].
    $\' -> ['&apos;'].
    $\n -> ['<br/>'].
    $\r -> ['<br/>'].
    $\t -> ['&nbsp;&nbsp;&nbsp;'].
  }
].

w@(Xml Writer traits) nextPutAll: c
"Write the whole String, translating each character."
[
  c do: [| :char | w nextPut: char]
].

w@(Xml Writer traits) nextPut: char
[
  (w encode: char) ifNil: [resend] ifNotNilDo:
    [| :encoded | w original ; encoded. w]
].

w@(Xml Writer traits) encodeAttribute: attrib
[
  [| :result |
   attrib do:
     [| :char |
      (w encode: char) ifNil: [result nextPut: char]
		       ifNotNilDo: [| :encoded | result ; encoded]]
  ] writingAs: attrib
].

w@(Xml Writer traits) emitHeader
[
  w original ; '<?xml version="1.0"?>\n'.
].

w@(Xml Writer traits) writeCharacterData: cdata
[ "fixme ensure cdata doesn't contain terminator"
  w original ; '<![CDATA['.
  w original ; cdata.
  w original ; ']]>'.
].


Xml define: #XHTMLWriter &parents: {Xml Writer}.

w@(Xml XHTMLWriter traits) emitHeader
[
  w original ; '<?xml version="1.0"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n'.
].

w@(Xml XHTMLWriter traits) inDocumentDo: block &head: head &attributes: attrib
[
  w emitHeader.
  w inTag: 'html' do:
    [| :w |
     w inTag: 'head' do: [| :w | head ifNotNil: [ head applyWith: w]].
     w inTag: 'body' do:
       [| :w |
	block applyWith: w.
	]
    ] &attributes: attrib.
].

w@(Xml XHTMLWriter traits) didNotUnderstand: message at: position
[
  position > 0
    ifTrue: [resend]
    ifFalse:
      [message selector isUnarySelector ifTrue:
	[| tagName |
	 "selector = tag-name, attributes = optionals, except for &content: which is innerHTML"
         w inTag: message selector do:
	   [| :w |
	    message optionals pairsDo:
	      [| :key :value keyString |
	       ((key as: String) `cache) = 'content'
		 ifTrue: [w ; (value as: String)]
		 ifFalse: [w emitAttribute: (key as: String) allButFirst allButLast valued: (value as: String)]]]].
       message selector isKeywordSelector ifTrue:
	 [| keywords args |
	  "selector's first keyword = tag-name, attributes = optionals, first argument is innerHTML"
	  keywords: ((message selector as: String) splitWith: $:).
	  keywords size = 1
	    ifTrue:
	      [w inTag: keywords first do:
		[| :w |
		 [w ; message arguments second.
		  message optionals pairsDo:
		    [| :key :value keyString |
		     w emitAttribute: (key as: String) allButFirst allButLast valued: (value as: String)]]]]
	    ifFalse: "TODO: Support multi-keyword selectors?"
	      [resend]]]
].

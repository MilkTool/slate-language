Mixins define: #NumericMixin &parents: {Mixin}.

t@(NumericMixin traits) as: x@(Number traits)
[
  t collect: #(as: n) `er
].

t@(NumericMixin traits) + n@(Number traits)
[
  t collect: #(+ n) `er
].

t@(NumericMixin traits) + u@(NumericMixin traits)
[
  t with: u collect: #+ `er
].

t@(NumericMixin traits) * n@(Number traits)
[
  t collect: #(* n) `er
].

t@(NumericMixin traits) * u@(NumericMixin traits)
[
  t with: u collect: #* `er
].

t@(NumericMixin traits) / n@(Number traits)
[
  t collect: #(/ n) `er
].

t@(NumericMixin traits) / u@(NumericMixin traits)
[
  t with: u collect: #/ `er
].

t@(NumericMixin traits) // n@(Number traits)
[
  t collect: #(// n) `er
].

t@(NumericMixin traits) // u@(NumericMixin traits)
[
  t with: u collect: #// `er
].

t@(NumericMixin traits) \\ n@(Number traits)
[
  t collect: #(\\ n) `er
].

t@(NumericMixin traits) \\ u@(NumericMixin traits)
[
  t with: u collect: #\\ `er
].

t@(NumericMixin traits) isNegative
[
  t collect: #isNegative `er
].

t@(NumericMixin traits) abs
[
  t collect: #abs `er
].

t@(NumericMixin traits) - x
[
  t collect: [| :each | each + x negated]
].

t@(NumericMixin traits) isZero
[
  (contents detect: [| :each | each isZero not]) isNil
].

c@(NumericMixin traits) min
[
  c inject: c anyOne into: #min: `er
].

c@(NumericMixin traits) max
[
  c inject: c anyOne into: #max: `er
].

c@(NumericMixin traits) range
[
  c max - c min
].

c@(NumericMixin traits) median
[
  (c as: SortedArray) median
].

c@(NumericMixin traits) average
[
  c sum / c size
].

c@(NumericMixin traits) sum
"Kludge to include unit'd measurement support."
[
  (c inject: 0 into: #+ `er) - c anyOne
].

c@(NumericMixin traits) <= d@(NumericMixin traits)
[
  c doWithIndex: [| :index | (c at: index) <= (d at: index)
    ifFalse: [^ False]].
  True
].

c@(NumericMixin traits) >= d@(NumericMixin traits)
[
  c doWithIndex: [| :index | (c at: index) >= (d at: index)
    ifFalse: [^ False]].
  True
].

c@(NumericMixin traits) < d@(NumericMixin traits)
[
  c doWithIndex: [| :index | (c at: index) < (d at: index)
    ifFalse: [^ False]].
  True
].

c@(NumericMixin traits) > d@(NumericMixin traits)
[
  c doWithIndex: [| :index | (c at: index) > (d at: index)
    ifFalse: [^ False]].
  True
].

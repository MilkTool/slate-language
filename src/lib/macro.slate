
n@(nodes Node traits) disable
"Expands a textual program element into nothing, effectively commenting it out.
Of course it does nothing to actual run-time configuration of the thing
described."
[n surroundings Literal Nil].

n@(nodes Literal traits) er
"Takes a piece of Symbol/String literal syntax and expands into a block which
can apply it to the number of arguments the Symbol can take as a selector."
[| selector block |
  selector: n value.
  (selector is: Symbol) ifFalse: [error: '`er may only use a Symbol literal.'].
  block: n surroundings Block new.
  block statements: {n surroundings Message sending: selector to:
    ([n surroundings LoadVariable from: block addInputVariable] reader next: selector arity)}.
  block
].

n@(nodes Pattern traits) er &environment: env
[| block message |
  block := n surroundings Block new.
  message := n message copy.
  message arguments infect:
    [| :arg |
     ({n surroundings Placeholder. n surroundings ImplicitArgument} includes: arg)
       ifTrue: [n surroundings LoadVariable from: block addInputVariable]
       ifFalse: [arg]].
  block statements := {message}.
  block
].

expr@(nodes Node traits) er &environment: method
[(expr surroundings Literal for: (expr evaluateIn: method)) er].

n@(nodes Literal traits) erOnKey: attribute@(nodes Literal traits)
"Variant on the `er macro which calls the selector on the results of sending
the attribute selector to each argument."
[| selector attribSelector block |
  selector := n value.
  attribSelector := attribute value.
  (selector is: Symbol) /\ [attribSelector is: Symbol]
    ifFalse: [error: '`erOnKey: may only use a Symbol literal.'].
  n surroundings Block new `>>
    [| :block |
     statements := {n surroundings Message sending: selector to:
                    ([n surroundings UnaryMessage sending: attribSelector to:
                        {n surroundings LoadVariable from: block addInputVariable}]
                       reader next: selector arity)}. ]
].

def@(nodes MethodDefinition traits) commutatively
"Expands into a sequence of the original meethod and another having the
same body with the roles reversed."
[
  def roles = def roles reversed
    ifTrue: [def]
    ifFalse:
      [{def.
        def deepCopy `>>
          [| :newDef |
           roles := newDef roles reversed.
           inputVariables := newDef inputVariables reversed.
          ]} parenthesize]
].

def@(nodes MethodDefinition traits) alias: newName
[
  {def. def deepCopy `>> [selector := newName evaluate. ]} parenthesize
].

expr@(nodes Node traits) suspend
"Expands into a suspension-creating expression for a Block."
[`((nodes Block newFor: expr) `unquote suspend)].

"These exist to define returns as special binary macros."
"[| :context :value | nodes ReturnClose of: value] asMethod: #^ on: {NoRole. nodes Node traits}."
"[| :context :value | nodes ReturnFar of: value]  asMethod: #^^ on: {NoRole. nodes Node traits}."

expr@(nodes Node traits) cache &environment: method
"An environment-altering macro that performs no transformation on the argument:
It creates a new local binding with the result of evaluating the expression
when the surrounding method is run. All other uses of an equivalent (=)
expression in the same or deeper lexical context are replaced with an access
of that local."
[| newVar loadExpr macroCall |
  "Do nothing outside of a method."
  method ifNil: [warn: 'Cannot cache outside of a method'. ^ expr].
  "Make the new local, uniquely named."
  newVar := method addVariable.
  "Replace any equal expression (except this one) with a load of the variable."
  loadExpr := newVar load.
  macroCall := expr `cache `quote.
  method transformBy:
    [| :node | node = expr \/ [node = macroCall]
       ifTrue: [loadExpr] ifFalse: [node]].
  "Expand into a store expression."
  newVar store: expr
].

expr@(nodes Node traits) cacheAs: varName &environment: method
"An environment-altering macro that performs no transformation on the argument:
It creates a new local binding with the result of evaluating the expression
when the surrounding method is run. All other uses of an equivalent (=)
expression in the same or deeper lexical context are replaced with an access
of that local."
[| newVar expressionsToReplace loadExpr |
  "Do nothing outside of a method."
  method ifNil: [warn: 'Cannot cache outside of a method'. ^ expr].
  "Make the new local, uniquely named."
  newVar := method addVariableNamed: varName value intern.
  "Replace any equal expression (except this one) with a load of the variable."
  loadExpr := newVar load.
  expressionsToReplace := {
    expr.
    expr `cache `quote.
    nodes UnaryMessage sending: varName value intern to: {nodes ImplicitArgument}
  }.
  method transformBy:
    [| :node | (expressionsToReplace includes: node)
       ifTrue: [loadExpr] ifFalse: [node]].
  "Expand into a store expression."
  newVar store: expr
].

expr@(nodes Node traits) rememberAs: varName &environment: method
"An environment-altering macro that performs no transformation on the argument:
It creates a new local binding with the result of evaluating the expression
when the surrounding method is run. All other uses of an equivalent (=)
expression in the same or deeper lexical context are replaced with an access
of that local."
[| newVar expressionsToReplace loadExpr |
  "Do nothing outside of a method."
  method ifNil: [warn: 'Cannot cache outside of a method'. ^ expr].
  "Make the new local, uniquely named."
  newVar := method addVariableNamed: varName value intern.
  "Replace any equal expression (except this one) with a load of the variable."
  loadExpr := newVar load.
  expressionsToReplace := {
    nodes UnaryMessage sending: varName value intern to: {nodes ImplicitArgument}
  }.
  method transformBy:
    [| :node | (expressionsToReplace includes: node)
       ifTrue: [loadExpr] ifFalse: [node]].
  "Expand into a store expression."
  newVar store: expr
].

x@(Root traits) compareAndHashUsingSlots: relevantSlotNames
"Defines methods for #= and #hash for the simple case of just recursively
calling them on each value of the slots with the given names.
NOTE: This is not a macro but relies on the macro facilities."
[| xLiteral |
  relevantSlotNames
   isEmpty ifTrue: [error: 'Some slot names must be specified.'].

  xLiteral := nodes Literal for: x.
  nodes Block new
    `>> [statements :=
           {nodes MethodDefinition of: #= on: {xLiteral. xLiteral}
              from: #{#obj1. #obj2} to:
                [| :obj1 :obj2 |
                 "relevantSlotNames collect:
         [| :slotName |
          (obj1 `load atSlotNamed: slotName `unquote)
                = (obj2 `load atSlotNamed: slotName `unquote)]"
                 relevantSlotNames allButFirst
                   inject:
                     `((obj1 `load atSlotNamed: relevantSlotNames first `unquote)
                         = (obj2 `load atSlotNamed: relevantSlotNames first `unquote))
                   into: [| :expr :slotName |
                          `(expr `unquote /\
                              [(obj1 `load atSlotNamed: slotName `unquote)
                                 = (obj2 `load atSlotNamed: slotName `unquote)])]]
              &linkVariables: True.
            nodes MethodDefinition of: #hash on: {xLiteral}
              from: #{#obj} to:
                [| :obj |
                 relevantSlotNames allButFirst
                   inject:
                     `((obj `load atSlotNamed: relevantSlotNames first `unquote) hash)
                   into: [| :hash :slotName |
                          `(hash `unquote bitXor:
                              (obj `load atSlotNamed: slotName `unquote) hash)]]
              &linkVariables: True}.
         compileAndRun].
].

x@(Root traits) extendCompareAndHashUsingSlots: relevantSlotNames
"Defines methods for #= and #hash for the simple case of just recursively
calling them on each value of the slots with the given names; uses a resend
to re-use the more abstract definition.
NOTE: This is not a macro but relies on the macro facilities."
"FIXME: The resend results in a compilation error."
[| xLiteral |
  relevantSlotNames
   isEmpty ifTrue: [error: 'Some slot names must be specified.'].

  xLiteral := nodes Literal for: x.
  nodes Block new
    `>> [statements:
      {nodes MethodDefinition of: #= on: {xLiteral. xLiteral}
        from: #{#obj1. #obj2} to:
          [| :obj1 :obj2 |
            relevantSlotNames inject: nodes Resend into:
              [| :expr :slotName |
                `(expr `unquote /\
                   [(obj1 `load atSlotNamed: slotName `unquote)
                     = (obj2 `load atSlotNamed: slotName `unquote)])]]
          &linkVariables: True.
       nodes MethodDefinition of: #hash on: {xLiteral}
         from: #{#obj} to:
           [| :obj |
             relevantSlotNames inject: nodes Resend into:
               [| :hash :slotName |
                 `(hash `unquote bitXor:
                    (obj `load atSlotNamed: slotName `unquote) hash)]]
           &linkVariables: True}.
      compileAndRun].
].

"Bootstrap-time fix-ups:" (
ExternalResource traits compareAndHashUsingSlots: #{#locator}.
File Locator traits compareAndHashUsingSlots: #{#name. #path. #version. #fileType}.
File RelativeLocator traits compareAndHashUsingSlots: #{#basePath. #path. #name. #fileType. #version}.
Directory traits compareAndHashUsingSlots: #{#locator}.
nodes Annotation traits compareAndHashUsingSlots: #{#value}.
nodes Comment traits compareAndHashUsingSlots: #{#comment. #value}.
nodes OptionalKeywords traits compareAndHashUsingSlots: #{#message. #keywords. #arguments}.
nodes Literal traits compareAndHashUsingSlots: #{#value}.
nodes Namespace traits compareAndHashUsingSlots: #{#namespace}.
nodes Variable traits compareAndHashUsingSlots: #{#name. #scope}.
nodes LoadVariable traits compareAndHashUsingSlots: #{#variable}.
nodes StoreVariable traits compareAndHashUsingSlots: #{#variable. #value}.
CompiledMethod traits compareAndHashUsingSlots: #{#literals. #selectors. #code}.
Types Not traits compareAndHashUsingSlots: #{#argument}.
Types Member traits compareAndHashUsingSlots: #{#elements}.
Types Block traits compareAndHashUsingSlots: #{#resultType. #argumentTypes}.
Types Range traits compareAndHashUsingSlots: #{#type. #start. #end}.
Types Array traits compareAndHashUsingSlots: #{#type}.
).

x@(nodes Node traits) swapWith: y@(nodes Node traits) &environment: env
[
  TODO: 'Determine how to perform a generic variable swap outside of a Method context without a global.'
].

x@(nodes LoadVariable traits) swapWith: y@(nodes LoadVariable traits) &environment: env
"A macro that expands into simple code swapping the values of two variables
in the current scope."
[| tmpVar |
  env ifNil: [error: 'Cannot swap variables outside of a method'].
  tmpVar := env addVariable.
  {tmpVar store: x variable load.
   x variable store: y variable load.
   y variable store: tmpVar load} parenthesize
].

_@(nodes Node traits) matchAppend: keyword with: val
"Encapsulates the idiom of taking a message and adding a keyword to denote an
additional yet non-optional parameter.
E.g. foo -> fooWith: -> fooWith:with:, fooWith:with:with: ..."
"TODO: Provide a way to call methods with syntactic *rest: parameters instead?"
[overrideThis].

message@(nodes UnaryMessage traits) matchAppend: keyword with: val
[
  nodes KeywordMessage sending: (intern: message selector name ; keyword name capitalized)
    to: {message arguments first. val}
].

message@(nodes KeywordMessage traits) matchAppend: keyword with: val
[
  nodes KeywordMessage sending: (intern: message selector name ; keyword name)
    to: message arguments ; {val}
].

paren@(nodes Parenthesis traits) matchAppend: keyword with: val
[paren statements first matchAppend: keyword with: val].

collection@(nodes Node traits) match: elements@(nodes Node traits) with: message@(nodes Node traits)
  &otherwise: failBlock &append: keyword &environment: env
[| tmpVar cases |
  env ifNil: [error: 'Cannot match a collection outside of a method'].
  keyword := keyword
    ifNil: [#with:]
    ifNotNil: [keyword evaluate].
  elements := elements evaluate sort.
  tmpVar := env addVariable.
  cases :=
    ((elements first upTo: elements last) collect:
      [| :size |
        `((size + 1) `literal ->
           (elements inject: message into: [| :message :element |
              element <= size
                ifTrue:
                  [message matchAppend: keyword with: `(tmpVar `load at: element `literal)]
                ifFalse:
                  [message]]) `block)]).
  failBlock
    ifNil:
      [`((tmpVar `store: collection) size caseOf: cases `array)]
    ifNotNil:
      [`((tmpVar `store: collection) size caseOf: cases `array otherwise: failBlock `unquote)]
].

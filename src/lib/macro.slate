
n@(Syntax Node traits) bootstrapping
"Override of the bootstrapping macro so that source marked that way no longer
has any effect when evaluated."
[n surroundings Literal Nil].

n@(Syntax Node traits) disable
"Expands a textual program element into nothing, effectively commenting it out.
Of course it does nothing to actual run-time configuration of the thing
described."
[n surroundings Literal Nil].

n@(Syntax Literal traits) er
"Takes a piece of Symbol/String literal syntax and expands into a block which
can apply it to the number of arguments the Symbol can take as a selector."
[| selector block |
  selector: n value.
  (selector is: Symbol) ifFalse: [error: '`er may only use a Symbol literal.'].
  block: n surroundings Block new.
  block statements: {n surroundings Message sending: selector to:
    ([n surroundings LoadVariable from: block addInputVariable] reader next: selector arity)}.
  block
].

expr@(Syntax Node traits) er &environment: method
[(expr surroundings Literal for: (expr evaluateIn: method)) er].

n@(Syntax Literal traits) erOnKey: attribute@(Syntax Literal traits)
"Variant on the `er macro which calls the selector on the results of sending
the attribute selector to each argument."
[| selector attribSelector block |
  selector: n value.
  attribSelector: attribute value.
  (selector is: Symbol) /\ [attribSelector is: Symbol]
    ifFalse: [error: '`erOnKey: may only use a Symbol literal.'].
  block: n surroundings Block new.
  block statements: {n surroundings Message sending: selector to:
    ([n surroundings UnaryMessage sending: attribSelector to: {n surroundings LoadVariable from: block addInputVariable}] reader next: selector arity)}.
  block
].

def@(Syntax MethodDefinition traits) commutatively
"Expands into a sequence of the original meethod and another having the
same body with the roles reversed."
[
  def roles = def roles reversed
    ifTrue: [def]
    ifFalse:
      [{def.
    def deepCopy `>>
      [| :newDef |
       roles: newDef roles reversed.
       inputVariables: newDef inputVariables reversed.
       ]} parenthesize]
].

def@(Syntax MethodDefinition traits) alias: newName
[
  {def. def deepCopy `>> [selector: newName evaluate. ]} parenthesize
].

expr@(Syntax Node traits) suspend
"Expands into a suspension-creating expression for a Block."
[`((Syntax Block newFor: expr) `unquote suspend)].

expr@(Syntax Node traits) cache &environment: method
"An environment-altering macro that performs no transformation on the argument:
It creates a new local binding with the result of evaluating the expression
when the surrounding method is run. All other uses of an equivalent (=)
expression in the same or deeper lexical context are replaced with an access
of that local."
[| newVar loadExpr macroCall |
  "Do nothing outside of a method."
  method ifNil: [warn: 'Cannot cache outside of a method'. ^ expr].
  "Make the new local, uniquely named."
  newVar: method addVariable.
  "Replace any equal expression (except this one) with a load of the variable."
  loadExpr: newVar load.
  macroCall: expr `cache `quote.
  method transformBy:
    [| :node | node = expr \/ [node = macroCall]
       ifTrue: [loadExpr] ifFalse: [node]].
  "Expand into a store expression."
  Syntax StoreVariable of: expr into: newVar
].

expr@(Syntax Node traits) cacheAs: varName &environment: method
"An environment-altering macro that performs no transformation on the argument:
It creates a new local binding with the result of evaluating the expression
when the surrounding method is run. All other uses of an equivalent (=)
expression in the same or deeper lexical context are replaced with an access
of that local."
[| newVar loadExpr macroCall unaryAccess |
  "Do nothing outside of a method."
  method ifNil: [warn: 'Cannot cache outside of a method'. ^ expr].
  "Make the new local, uniquely named."
  newVar: (method addVariableNamed: varName value intern).
  "Replace any equal expression (except this one) with a load of the variable."
  loadExpr: newVar load.
  macroCall: expr `cache `quote.
  unaryAccess: (Syntax UnaryMessage sending: varName value intern
                    to: {Syntax ImplicitArgument}).
  method transformBy:
    [| :node | node = expr \/ [node = macroCall] \/ [node = unaryAccess]
       ifTrue: [loadExpr] ifFalse: [node]].
  "Expand into a store expression."
  Syntax StoreVariable of: expr into: newVar
].

x@(Root traits) compareAndHashUsingSlots: relevantSlotNames
"Defines methods for #= and #hash for the simple case of just recursively
calling them on each value of the slots with the given names.
NOTE: This is not a macro but relies on the macro facilities."
[ | xLiteral |
  relevantSlotNames
   isEmpty ifTrue: [error: 'Some slot names must be specified.'].

  xLiteral: (Syntax Literal new `>> [value: x. ]).
  Syntax Block new
    `>> [statements:
      {Syntax MethodDefinition of: #= on: {xLiteral. xLiteral}
        from: #(obj1 obj2) to:
          [| :obj1 :obj2 |
       "relevantSlotNames collect:
         [| :slotName |
          (obj1 `load atSlotNamed: slotName `unquote)
                = (obj2 `load atSlotNamed: slotName `unquote)]"
            relevantSlotNames allButFirst 
              inject: 
                `((obj1 `load atSlotNamed: relevantSlotNames first `unquote)
                   = (obj2 `load atSlotNamed: relevantSlotNames first `unquote))
              into: [| :expr :slotName |
                `(expr `unquote /\
                   [(obj1 `load atSlotNamed: slotName `unquote)
                     = (obj2 `load atSlotNamed: slotName `unquote)])]]
          &linkVariables: True.
       Syntax MethodDefinition of: #hash on: {xLiteral}
         from: #(obj) to:
           [| :obj |
             relevantSlotNames allButFirst
               inject:
                 `((obj `load atSlotNamed: relevantSlotNames first `unquote) hash)
               into: [| :hash :slotName |
                 `(hash `unquote bitXor:
                    (obj `load atSlotNamed: slotName `unquote) hash)]]
           &linkVariables: True}.
      compileAndRun].
].

x@(Root traits) extendCompareAndHashUsingSlots: relevantSlotNames
"Defines methods for #= and #hash for the simple case of just recursively
calling them on each value of the slots with the given names; uses a resend
to re-use the more abstract definition.
NOTE: This is not a macro but relies on the macro facilities."
"FIXME: The resend results in a compilation error."
[ |xLiteral|
  relevantSlotNames
   isEmpty ifTrue: [error: 'Some slot names must be specified.'].

  xLiteral: (Syntax Literal new `>> [value: x. ]).
  Syntax Block new
    `>> [statements:
      {Syntax MethodDefinition of: #= on: {xLiteral. xLiteral}
        from: #(obj1 obj2) to:
          [| :obj1 :obj2 |
            relevantSlotNames inject: Syntax Resend into:
              [| :expr :slotName |
                `(expr `unquote /\
                   [(obj1 `load atSlotNamed: slotName `unquote)
                     = (obj2 `load atSlotNamed: slotName `unquote)])]]
          &linkVariables: True.
       Syntax MethodDefinition of: #hash on: {xLiteral}
         from: #(obj) to:
           [| :obj |
             relevantSlotNames inject: Syntax Resend into:
               [| :hash :slotName |
                 `(hash `unquote bitXor:
                    (obj `load atSlotNamed: slotName `unquote) hash)]]
           &linkVariables: True}.
      compileAndRun].
].

"Bootstrap-time fix-ups:" (
ExternalResource traits compareAndHashUsingSlots: #(locator).
File Locator traits compareAndHashUsingSlots: #(name path version fileType).
File RelativeLocator traits compareAndHashUsingSlots: #(basePath path name fileType version).
Directory traits compareAndHashUsingSlots: #(locator).
Syntax Annotation traits compareAndHashUsingSlots: #(value).
Syntax Comment traits compareAndHashUsingSlots: #(comment value).
Syntax OptionalKeywords traits compareAndHashUsingSlots: #(message keywords arguments).
Syntax Literal traits compareAndHashUsingSlots: #(value).
Syntax Namespace traits compareAndHashUsingSlots: #(namespace).
Syntax Variable traits compareAndHashUsingSlots: #(name scope).
Syntax LoadVariable traits compareAndHashUsingSlots: #(variable).
Syntax StoreVariable traits compareAndHashUsingSlots: #(variable value).
CompiledMethod traits compareAndHashUsingSlots: #(literals selectors code).
Types Not traits compareAndHashUsingSlots: #(argument).
Types Member traits compareAndHashUsingSlots: #(elements).
Types Block traits compareAndHashUsingSlots: #(resultType argumentTypes).
Types Range traits compareAndHashUsingSlots: #(type start end).
Types Array traits compareAndHashUsingSlots: #(type).
).

load@(Syntax LoadVariable traits) defaultsTo: default
"A macro that expands to an expression that sets a variable in the scope to
the expression in the default."
[`(load `unquote ifNil: [(load store: default parenthesize) `unquote])].

x@(Syntax Node traits) swapWith: y@(Syntax Node traits) &environment: env
[
  TODO: 'Determine how to perform a generic variable swap outside of a Method context without a global.'
].

x@(Syntax LoadVariable traits) swapWith: y@(Syntax LoadVariable traits) &environment: env
"A macro that expands into simple code swapping the values of two variables
in the current scope."
[| tmpVar |
  env ifNil: [error: 'Cannot swap variables outside of a method'].
  tmpVar: env addVariable.
  {tmpVar store: x variable load.
   x variable store: y variable load.
   y variable store: tmpVar load} parenthesize
].

_@(Syntax Node traits) matchAppend: keyword with: val
"Encapsulates the idiom of taking a message and adding a keyword to denote an
additional yet non-optional parameter.
E.g. foo -> fooWith: -> fooWith:with:, fooWith:with:with: ..."
"TODO: Provide a way to call methods with syntactic *rest: parameters instead?"
[overrideThis].

message@(Syntax UnaryMessage traits) matchAppend: keyword with: val
[
  Syntax KeywordMessage sending: (intern: message selector name ; keyword name capitalized)
    to: {message arguments first. val}
].

message@(Syntax KeywordMessage traits) matchAppend: keyword with: val
[
  Syntax KeywordMessage sending: (intern: message selector name ; keyword name)
    to: message arguments ; {val}
].

paren@(Syntax Parenthesis traits) matchAppend: keyword with: val
[paren statements first matchAppend: keyword with: val].

collection@(Syntax Node traits) match: elements@(Syntax Node traits) with: message@(Syntax Node traits)
  &otherwise: failBlock &append: keyword &environment: env
[| tmpVar cases |
  env ifNil: [error: 'Cannot match a collection outside of a method'].
  keyword:
    (keyword 
      ifNil: [keyword: #with:]
      ifNotNil: [keyword evaluate]).
  elements: elements evaluate sort.
  tmpVar: env addVariable.
  cases: 
    ((elements first upTo: elements last) collect:
      [| :size |
        `((size + 1) `literal ->
           (elements inject: message into: [| :message :element |
              element <= size
                ifTrue:
                  [message matchAppend: keyword with: `(tmpVar `load at: element `literal)]
                ifFalse: 
                  [message]]) `block)]).
  failBlock
    ifNil:
      [`((tmpVar `store: collection) size caseOf: cases `array)]
    ifNotNil:
      [`((tmpVar `store: collection) size caseOf: cases `array otherwise: failBlock `unquote)]
].

n@(Syntax Node traits) setTo: val
"A macro to expand the node and value into an appropriate assignment for the
location that the message appears to use."
"TODO: Use type inference on arguments to detect if there should be a concrete
slot attribute or other type of accessor to verify or distinguish."
[overrideThis].

#: alias: #setTo: on: {Syntax Node traits. NoRole}.
#:= alias: #setTo: on: {Syntax Node traits. NoRole}.
"Shorthands for the setTo: macro."

paren@(Syntax Parenthesis traits) setTo: val
"Transforms the last statement into an assignment."
[
  paren statements size caseOf:
    {0 -> [paren].
     1 -> [paren statements last setTo: val]
   } otherwise:
     [| result |
      result: paren copy.
      result statements at: result statements indexLast put:
        (result statements last setTo: val).
      result]
].

array@(Syntax Array traits) setTo: vals &environment: env
"Performs a multiple-assignment."
[
  array statements size caseOf:
    {0 -> [vals].
     1 -> [array statements last setTo:
             (Syntax UnaryMessage sending: #first to: {vals})]
    } otherwise:
      [| result tmpVar |
       tmpVar: env addVariable.
       result: array copy.
       "result statements: (array statements collectWithIndex:"
       array statements doWithIndex:
         [| :statement :index |
          result statements at: index put:
            (statement setTo:
               (Syntax KeywordMessage sending: #at: to:
                  {tmpVar load. Syntax Literal for: index}))].
          Syntax Parenthesis of: {tmpVar store: vals. result}]
].

load@(Syntax LoadVariable traits) setTo: val
"Expands a local variable reference into a store to it."
[Syntax StoreVariable of: val into: load variable].

message@(Syntax UnaryMessage traits) setTo: val
"Makes a substitution of the unary message with a keyword message that is the
mutator form of that selector (appends a colon)."
[
  Syntax KeywordMessage
    sending: (message argument mutatorNameFor: message selector)
    to: {message argument. val}
].

message@(Syntax KeywordMessage traits) setTo: val
"Expands a message by looking at its selector and picking the right setter."
[
  (message selector isKeywordSelector ifTrue:
    [message selector caseOf:
      {#atSlotNamed: -> [#atSlotNamed:put:].
       #at: -> [#at:put:].
       #byteAt: -> [#byteAt:put:].
       #wordAt: -> [#wordAt:put:]}
              otherwise:
            [| selectorWithPut |
             selectorWithPut: (message selector name ; 'put:').
             selectorWithPut isInterned ifTrue:
               [selectorWithPut intern]]])
  ifNil: [error: 'The selector cannot be handled via setTo:.'. message]
  ifNotNilDo:
    [| :newSel | message sending: newSel to: (message arguments copyWith: val)]
].

node@(Syntax Node traits) defaultsTo: value
"Conditional assignment on the value being Nil or absent.
This generalizes on Load defaultsTo:."
[
  Syntax Message sending: #ifNil: to:
    {node.
     Syntax Block newFor: (node setTo: value)}
].

node@(Syntax Node traits) ?= value
[
  node defaultsTo: value
].

node@(Syntax Node traits) += value
[
  node setTo: (Syntax BinaryMessage sending: #+ to: {node. value})
].

node@(Syntax Node traits) -= value
[
  node setTo: (Syntax BinaryMessage sending: #- to: {node. value})
].

node@(Syntax Node traits) *= value
[
  node setTo: (Syntax BinaryMessage sending: #* to: {node. value})
].

node@(Syntax Node traits) /= value
[
  node setTo: (Syntax BinaryMessage sending: #/ to: {node. value})
].

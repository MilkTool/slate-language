
"for talking to databases through a socket interface"

networking ensureNamespace: #databases &delegate: True.


databases define: #Database &parents: {Cloneable}.
databases define: #DatabaseCommand &parents: {Database} &slots: {}.
databases define: #DatabaseReply &parents: {Database} &slots: {}.

databases define: #Postgres &parents: {Database} &slots: {#stream -> Nil}.
databases define: #PostgresReply &parents: {DatabaseReply} &slots: {#type -> Nil. #length -> 0. #response -> Nil}.
databases define: #PostgresCommand &parents: {DatabaseCommand. StructMixin}.
databases define: #PostgresStartCommand &parents: {PostgresCommand}
  &slots: {#length -> 0. #protocol -> 196608. #user -> 'user'. #database -> 'mydb'.
           #binaryDescription -> #((length Int32)
                                   (protocol Int32)
                                   ('user\0' Fixed)
                                   (user CString)
                                   ('database\0' Fixed)
                                   (database CString)
                                   ('\0' Fixed))}.

databases define: #PostgresPasswordMessage &parents: {PostgresCommand}
  &slots: {#length -> 0. #password -> ''.
           #binaryDescription -> #(('p' Fixed)(length Int32)(password CString))}.


db@(Database traits) newOn: stream
[
OverrideThis
].

db@(Database traits) sendCommand: cmd@(DatabaseCommand traits)
[
OverrideThis
].

db@(Database traits) close
[
OverrideThis
].

reply@(DatabaseReply traits) isError
[
OverrideThis
].


" ... Postgresql specific ... "

pc@(PostgresCommand traits) littleEndian
[
  False
].

db@(Postgres traits) newOn: stream
[ | ret |
  ret: db new.
  db stream: stream.
  db
].

db@(Postgres traits) sendCommand: cmd@(PostgresCommand traits)
[
  db stream ; cmd packed.
  db stream flush.
].

db@(Postgres traits) close
[
  db stream close.
].



reply@(PostgresReply traits) newType: type response: response
[ | return |
  reply new `>> [type: type. length: response size. response: response. ]
].


db@(Postgres traits) connectTo: addr
[ | socket |
  socket: (Socket newFor: addr domain type: Socket Types Stream protocol: Socket Protocols Default).
  socket connectTo: addr.
  db stream: (SocketStream newOn: socket).
  db
].

reply@(PostgresReply traits) isError
[
  reply type = $E code
].

reply@(PostgresReply traits) printError
[
  reply isError ifFalse: [^ Nil].
  reply response first = 0
        ifTrue: [inform: 'Generic Error']
        ifFalse: [inform: 'Postgres Error: ' ; (reply response allButFirst as: ASCIIString)]
].


db@(Postgres traits) readReply
[ | responseTypeByte responseLength response |

[
  responseTypeByte: db stream next.
  inform: 'response type: ' ; responseTypeByte printString.
  responseLength: ((db stream next: 4) bigEndianInt32At: 0)."fixme replace with int32 constant size or something"
  inform: 'response len: ' ; responseLength printString.
  inform: 'read buf ' ; db stream internalReadBuffer printString.
  inform: 'write buf ' ; db stream internalWriteBuffer printString.
  response: ((responseLength >= 4)
               ifTrue: [(db stream next: responseLength - 4)] 
               ifFalse: [error: 'malformed message from ' ; db printString]).
 "fixme coerce to real structure"
  PostgresReply newType: responseTypeByte response: response

] on: Stream Exhaustion do: [ |:e| ^ Nil]

].

db@(Postgres traits) md5Encrypt: pw salt: salt
[
  ((pw as: ByteArray) ; (salt as: ByteArray)) md5String
].

db@(Postgres traits) handleLogin: user password: pw
[ | cmd reply reply authCode|
  reply: db readReply.
  inform: 'reply: ' ; reply printString.
  reply isError ifTrue: [reply printError. error: 'Login Failed.'].
  reply type ~= $R code ifTrue: [error: 'Reply from server is not an authentication request'].
  authCode: (reply response bigEndianInt32At: 0).
  inform: 'auth code: ' ; authCode printString.
  authCode = 0 ifTrue: [ ^ True].
  authCode = 5 "md5 with salt on pw"
    ifTrue: [inform: 'salt: ' ; (reply response allButFirst: 4) printString.
             cmd: (PostgresPasswordMessage new `>> [password: 'md5' ; (db md5Encrypt: (db md5Encrypt: pw salt: user) salt: (reply response allButFirst: 4)). ]).
             cmd length: cmd packed size - 1.
             inform: 'sending md5 pw: ' ; cmd password printString.
             db sendCommand: cmd.
             ^ (db handleLogin: user password: pw)
             ]
    ifFalse: [error: 'unhandled authentication'].

].

db@(Postgres traits) loginAs: user password: pw &database: database
[ | cmd |
  database `defaultsTo: user.
  cmd: (PostgresStartCommand new `>> [user: user. database: database. ]).
  cmd length: cmd packed size.
  db sendCommand: cmd.
  (db handleLogin: user password: pw) ifTrue: [inform: 'Login success'].

].


"for talking to databases through a socket interface"


networking define: #Database &parents: {Cloneable} &slots: {#stream -> Nil}.

networking define: #Postgres &parents: {Database}" &slots: {#stream -> Nil}".
networking define: #PostgresCommand &parents: {StructMixin}.
networking define: #PostgresStartCommand &parents: {PostgresCommand}
  &slots: {#length -> 0. #protocol -> 196608. #user -> 'user'. #database -> 'mydb'.
           #binaryDescription -> #((length Int32)
                                   (protocol Int32)
                                   ('user' Fixed)
                                   (user CString)
                                   ('database' Fixed)
                                   (database CString))}.

db@(Database traits) newOn: stream
[ | ret |
  ret: db new.
  db stream: stream.
  db
].

db@(Database traits) sendCommand: cmd@(PostgresCommand traits)
[
  db stream ; cmd packed.
].


db@(Postgres traits) loginAs: user password: pw &database: database
[ | cmd reply |
 
  db sendCommand: PostgresStartCommand new `>> [user: user. database: database. ].
  reply: db readReply.
  "..."

].

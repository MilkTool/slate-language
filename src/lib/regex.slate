define: #Regex &parents: {Cloneable} &slots: {}.
Regex traits ensureNamespace: #Syntax.
Regex traits define: #Match.

"counter is incremented and stored inside expressions"
Regex define: #Parser &parents: {Regex} &slots: {
  #source.
  #position -> 0.
  #counter -> 0
}.

"regex slot is a regex syntax node"
Regex define: #Expression &parents: {Regex} &slots: {
  #regex.
  #parser -> Regex Parser
}.

"regex slot is a regex expression. subexpressions are the () portions that match. see the counter property.
the matchee is what we are trying to match"
Regex define: #Matcher &parents: {Regex} &slots: {
  #regex.
  #subexpressions -> Dictionary new.
  #matchee
}.

"nodes are output by the parser"
Regex Syntax define: #Node &parents: {Regex}.

"the top element with expressions surrounded by branches 'exp|exp'"
Regex Syntax define: #Branch &parents: {Regex Syntax Node} &slots: {
  #nextBranch.
  #expressions -> ExtensibleArray new
}.

"must match in consecutive order 'ab'"
Regex Syntax define: #Expression &parents: {Regex Syntax Node} &slots: {
  #term.
  #counter.
  #repeatCount
}.

"^"
Regex Syntax define: #BeginningMarker &parents: {Regex Syntax Node} &slots: {}.
"$"
Regex Syntax define: #EndMarker &parents: {Regex Syntax Node} &slots: {}.

"'[abc]'"
Regex Syntax define: #CharacterGroup &parents: {Regex Syntax Node} &slots: {
  #negated -> False.
  #elements -> ExtensibleArray new
}.

group@(Regex Syntax CharacterGroup traits) newForAll: elements &negated: negated
[
  negated `defaultsTo: group negated.
  group new `>> [elements := elements as: group elements. negated := negated. ]
].

"'a'"
Regex Syntax define: #Character &parents: {Regex Syntax Node} &slots: {
  #character -> $\0
}.
"'a-z'"
Regex Syntax define: #CharacterRange &parents: {Regex Syntax Node} &slots: {
  #start.
  #end
}.

"Regex Match define: #Terminator &parents: {Regex}."

r@(Regex Syntax Character traits) newOn: c
[
  r new `>> [character := c. ]
].

Regex Syntax define: #DecimalDigits -> (Regex Syntax CharacterRange new `>> [start := $0. end := $9. ]).
Regex Syntax define: #UppercaseLetters -> (Regex Syntax CharacterRange new `>> [start := $A. end := $Z. ]).
Regex Syntax define: #LowercaseLetters -> (Regex Syntax CharacterRange new `>> [start := $a. end := $z. ]).
Regex Syntax define: #WhitespaceElements -> {
  Regex Syntax Character newOn: $\e.
  Regex Syntax Character newOn: $\n.
  Regex Syntax Character newOn: $\s .
  Regex Syntax Character newOn: $\r.
  Regex Syntax Character newOn: $\f.
  Regex Syntax Character newOn: $\t.
}.

Regex Parser traits define: #BackslashSpecials -> (Dictionary new*,
  $e -> (Regex Syntax Character newOn: $\e),
  $n -> (Regex Syntax Character newOn: $\n),
  $r -> (Regex Syntax Character newOn: $\r),
  $f -> (Regex Syntax Character newOn: $\f),
  $t -> (Regex Syntax Character newOn: $\t),
  $w -> (Regex Syntax CharacterGroup newForAll:
           {Regex Syntax UppercaseLetters.
            Regex Syntax LowercaseLetters.
            Regex Syntax DecimalDigits.
            Regex Syntax Character newOn: $_. }),
  $W -> (Regex Syntax CharacterGroup newForAll:
           {Regex Syntax UppercaseLetters.
            Regex Syntax LowercaseLetters.
            Regex Syntax DecimalDigits.
            Regex Syntax Character newOn: $_} &negated: True),
  $s -> (Regex Syntax CharacterGroup newForAll: Regex Syntax WhitespaceElements),
  $S -> (Regex Syntax CharacterGroup newForAll: Regex Syntax WhitespaceElements &negated: True),
  $d -> (Regex Syntax CharacterGroup newForAll: {Regex Syntax DecimalDigits}),
  $D -> (Regex Syntax CharacterGroup newForAll: {Regex Syntax DecimalDigits} &negated: True)).

r@(Regex Expression traits) newOn: s@(String traits)
[
  r new `>>
    [| :result |
     parser := r parser newOn: s.
     regex := result parser parse. ]
].

p@(Regex Parser traits) newOn: s@(String traits)
[
  p new `>> [
    source := s.
    position := 0.
    counter := 0. ]
].

n@(Regex Syntax Node traits) as: e@(Regex Syntax Expression traits)
[
  e new `>> [term := n. ]
].

n@(Regex Syntax Expression traits) as: e@(Regex Syntax Expression traits)
[
  n
].

p@(Regex Parser traits) next
[
  p position >= p source size
    ifTrue: [p position += 1. Nil]
    ifFalse: [obj ::= p source at: p position.
              p position += 1.
              obj]
].

p@(Regex Parser traits) previous
[
  p position -= 1.
].

p@(Regex Parser traits) expected: x butFound: y
[
  error: 'Parser expected ' ; x printString ; ' but found ' ; y printString.
].

p@(Regex Parser traits) parse
[
  p parseBranch
].

p@(Regex Parser traits) nextAssertIs: item
[
  (next ::= p next) = item ifFalse: [p expected: item butFound: next].
].

p@(Regex Parser traits) backspaceCharacterFor: c
[
  p BackslashSpecials at: c ifAbsent: [p Syntax Character newOn: c]
].

"branch ::= expression* 
          | branch '|' branch"

p@(Regex Parser traits) parseBranch
[| branch oldBranch obj next firstBranch |
  branch := p Syntax Branch new `>> [| :b | nextBranch := Nil. expressions := b expressions new. ].
  firstBranch := branch.
  [
    obj := p parseExpression.
    next := p next.
    branch expressions addLast: obj.
    next caseOf: {
      Nil -> [^ (branch expressions size <= 1 /\ [oldBranch isNil] ifTrue: [obj] ifFalse: [firstBranch])].
      $\) -> [p previous.
              ^ (branch expressions size <= 1 /\ [oldBranch isNil] ifTrue: [obj] ifFalse: [firstBranch])].
      $| -> [oldBranch := branch.
             branch := p Syntax Branch new `>> [| :b | nextBranch := Nil. expressions := b expressions new. ].
             oldBranch nextBranch := branch].
    } otherwise: [p previous]
  ] loop.
].
"repeatcount ::= {m,n}"

p@(Regex Parser traits) parseRepeatCount
[
  error: 'fixme'.
].

"expression ::= term | term '?' | term '+' | term '*' | term numericrange"
p@(Regex Parser traits) parseExpression
[| obj next |
  obj := p parseTerm.
  (next := p next) caseOf: {
    $? -> [obj := obj as: p Syntax Expression. obj repeatCount := 0 to: 1 by: 1].
    $+ -> [obj := obj as: p Syntax Expression. obj repeatCount := 1 to: PositiveInfinity by: 1].
    $* -> [obj := obj as: p Syntax Expression. obj repeatCount := 0 to: PositiveInfinity by: 1].
    $\{ -> [obj := obj as: p Syntax Expression. obj repeatCount := p parseRepeatCount. p nextAssertIs: $\}]
  } otherwise: [p previous].
  obj
].

"term ::= group | '(' branch ')"
p@(Regex Parser traits) parseTerm
[| count |
  p next caseOf: {
    $\( -> [count := p counter. 
            p counter += 1.
            obj ::= p parseBranch as: p Syntax Expression. "need the counter slot"
            obj counter := count.
            p nextAssertIs: $\). 
            obj]
  } otherwise: [p previous. p parseGroup]
].

"group ::= symbol | '[' '^'? range* ']'"
p@(Regex Parser traits) parseGroup
[| next |
  (next := p next) caseOf: {
    $\[ -> [obj ::= p Syntax CharacterGroup new `>> [elements := ExtensibleArray new. ].
            (next := p next) = $^ ifTrue: [obj negated := True] ifFalse: [p previous].
            [(next := p next) ifNil: [p expected: $\] butFound: Nil].
             next = $\]] whileFalse:
               [p previous. p parseRange ifNotNilDo: [|:r| obj elements addLast: r]].
            obj]
  } otherwise: [p previous. p parseSymbol]
].

"range ::= symbol | symbol '-' symbol"
p@(Regex Parser traits) parseRange
[
  start ::= p parseSymbol.
  p next caseOf: {
    $\] -> [p previous. start].
    $- -> [p Syntax CharacterRange new `>> [start := start. end := p parseSymbol. ]]
  } otherwise: [p previous. start]
].

"symbol ::= . | char | escape char"
p@(Regex Parser traits) parseSymbol
[
  (next ::= p next) caseOf: {
    $^ -> [p Syntax BeginningMarker new].
    $$ -> [p Syntax EndMarker new].
    $. -> [p Syntax CharacterRange new `>> [start: $\x00. end: $\xFF. ]]. "fixme ascii"
    $\\ -> [p backspaceCharacterFor: p next]
  } otherwise: [p Syntax Character new `>> [character := next. ]]
].


"
--------
Matching
--------
"

Regex Matcher define: #Fail -> -1.

m@(Regex Matcher traits) newOn: s@(String traits)
[
  m newOn: (m Expression newOn: s)
].

m@(Regex Matcher traits) newOn: r@(Regex Expression traits)
[
  m new `>> [regex := r. ]
].

s@(String traits) regex
[
  Regex Expression newOn: s
].

r@(Regex Expression traits) matcher
[
  Regex Matcher newOn: r
].

m@(Regex Matcher traits) subexpressionAt: x
[
  (se ::= m subexpressions at: x ifAbsent: [^ Nil]) key >= m matchee size
    ifFalse: [m matchee copyFrom: se key to: se value]
].

m@(Regex Matcher traits) subexpressionMatches
[
  matches ::= Dictionary new.
  m subexpressions keysDo:
    [| :key | matches at: key put: (m subexpressionAt: key)].
  matches
].

m@(Regex Matcher traits) subexpressionMatchesArray
[
  capacity ::= m subexpressions keys reduce: #max:`er ifEmpty: [0].
  matches ::= Array new &capacity: capacity + 1.
  m subexpressions keysDo:
    [| :key | matches at: key put: (m subexpressionAt: key)].
  matches
].

m@(Regex Matcher traits) matches: node
[
  (m match: node) ~= m Fail
].

m@(Regex Matcher traits) match: node@(Regex Syntax Expression traits) from: pos to: endPos
[
  node counter ifNotNilDo:
    [| :counter | m subexpressions at: counter put: {pos. endPos}]
].

m@(Regex Matcher traits) match: s@(String traits)
[ 
  m match: s from: 0
].

string@(String traits) =~ regex@(Regex Matcher traits)
[
  regex `>> [match: string. subexpressionMatchesArray]
].

string@(String traits) =~ regex@(String traits)
[
  string =~ (Regex Matcher newOn: regex)
].

string@(String traits) =~ regex@(Regex Expression traits)
[
  string =~ (regex Matcher newOn: regex)
].

m@(Regex Matcher traits) match: s@(String traits) from: fromStart
[
  m subexpressions := m subexpressions new.
  m matchee := s.
  ((res ::= m match: m regex regex from: fromStart) is: Sequence)
    ifTrue: [res isEmpty ifTrue: [-1] ifFalse: [res last]]
    ifFalse: [res]
].

"these functions return the position they match until"
m@(Regex Matcher traits) match: node@(Regex Syntax Node traits) from: pos
[
  overrideThis
].

"match all in sequence(from start to end in sequence) or none"
m@(Regex Matcher traits) match: expressions@(Sequence traits) from: pos start: start end: end
[| curPos newPos exp futurePos|
  curPos := pos.
  [start > end ifTrue: [^ curPos].
   exp := expressions at: start.
   newPos := m match: exp from: curPos.
   "wildcard matches produce array results of all the possible matches."
   "do them in reverse to be greedy"
   "inform: expressions printString ; 'from pos: ' ; pos printString ; ' start: ' ; start printString ; ' end: ' ; end printString.
    inform: 'newPos: ' ; newPos printString."
   (newPos is: Sequence)
     ifTrue: [newPos reverseDo:
                [| :matchPos |
                 futurePos := m match: expressions from: matchPos start: start + 1 end: end.
                 (futurePos is: Sequence) ifTrue: [error: 'crap'].
                 futurePos ~= -1 ifTrue: [m markExpression: exp from: curPos to: matchPos.
                                          ^ futurePos]].
              ^ -1]
     ifFalse: [newPos = -1 ifTrue:
                 [m markExpression: exp from: curPos to: curPos.
                  ^ newPos].
               start += 1.
               curPos := newPos]
  ] loop.
].

m@(Regex Matcher traits) match: node@(Sequence traits) from: pos
[m match: node from: pos start: 0 end: node size - 1].

"expressions can return a list of matches because of repeating things"
m@(Regex Matcher traits) match: node@(Regex Syntax Branch traits) from: pos
[
  (newPos ::= m match: node expressions from: pos) = -1
    /\ [node nextBranch isNotNil]
    ifTrue: [m match: node nextBranch from: pos]
    ifFalse: [newPos]
].

m@(Regex Matcher traits) markExpression: node@(Regex Syntax Expression traits) from: start to: end
[
  node counter ifNotNil: [m subexpressions at: node counter put: start -> (end - 1)]
].

m@(Regex Matcher traits) markExpression: node@(Regex Syntax Node traits) from: start to: end
[ "cannot mark node" ].

m@(Regex Matcher traits) match: node@(Regex Syntax Expression traits) from: pos
[| curPos newPos matches numMatches |
  "no repeatCount means it just has to match once"
  node repeatCount ifNil:
    [(curPos := m match: node term from: pos) > pos
       ifTrue: [m markExpression: node from: pos to: curPos].
     ^ curPos].
  curPos := pos.
  matches := ExtensibleArray new.
  node repeatCount start = 0 ifTrue: [matches addLast: pos]. "optional argument may match nil matchee"
  numMatches := 0.
  [numMatches < node repeatCount end] whileTrue:
    [newPos: (m match: node term from: curPos).
     "no match"
     "inform: 'match: ' ; newPos printString ; ' from: ' ; node printString."
     newPos = -1 ifTrue: [numMatches >= node repeatCount start
                            ifTrue: [curPos > pos ifTrue: [m markExpression: node from: pos to: curPos].
                                     ^ matches]
                            ifFalse: [^ newPos]].
     curPos := newPos.
     matches addLast: curPos.
     numMatches += 1].
  matches isEmpty ifTrue: [-1] ifFalse: [matches]
].

m@(Regex Matcher traits) match: node@(Regex Syntax Character traits) from: pos
[
  pos >= m matchee size ifTrue: [^ -1].
  (m matchee at: pos) = node character ifTrue: [pos + 1] ifFalse: [-1]
].

m@(Regex Matcher traits) match: node@(Regex Syntax CharacterRange traits) from: pos
[
  pos >= m matchee size ifTrue: [^ -1].
  (charCode := (m matchee at: pos) code) >= node start code
    /\ [charCode <= node end code]
    ifTrue: [pos + 1]
    ifFalse: [-1]
].

m@(Regex Matcher traits) match: node@(Regex Syntax CharacterGroup traits) from: pos
[ "there should be another way than assuming a match is just pos+1"
  pos >= m matchee size ifTrue: [^ -1].
  node negated
    ifTrue: [(node elements noneSatisfy: [| :each | (m match: each from: pos) ~= -1]) ifTrue: [pos + 1] ifFalse: [-1]]
    ifFalse: [(node elements anySatisfy: [| :each | (m match: each from: pos) ~= -1]) ifTrue: [pos + 1] ifFalse: [-1]]
].

m@(Regex Matcher traits) match: node@(Regex Syntax BeginningMarker traits) from: pos
[
  pos = 0 ifTrue: [pos] ifFalse: [-1]
].

m@(Regex Matcher traits) match: node@(Regex Syntax EndMarker traits) from: pos
[
  m matchee size <= pos ifTrue: [pos] ifFalse: [-1]
].

s@(PositionableStream traits) upToRegex: pattern@(String traits)
[
  s upTo: pattern regex matcher
].

"fixme put this somewhere reasonable"

s@(PositionableStream traits) upToRegex: str@(String traits)
[
  s upToRegex: str regex matcher
].

s@(PositionableStream traits) throughRegex: str@(String traits)
[
  s throughRegex: str regex matcher
].

s@(PositionableStream traits) scanForRegex: matcher@(Regex Matcher traits) &goThrough: goThrough
[| data line found |
  goThrough `defaultsTo: False.
  data := s collectionType new writer.
  s restoringPositionDo: 
    [[s isAtEnd not /\ [(line := s nextLine) isNotNil]] whileTrue:
       [0 to: line size do:
          [| :pos |
           (found := matcher match: line from: pos) >= 0
             ifTrue: [(line first: (goThrough ifTrue: [found] ifFalse: [pos])) >> data.
                      ^ data contents]].
        line >> data]].
  data contents
].

s@(PositionableStream traits) upToRegex: matcher@(Regex Matcher traits)
[
  s scanForRegex: matcher &goThrough: False
].

s@(PositionableStream traits) throughRegex: matcher@(Regex Matcher traits)
[
  s scanForRegex: matcher &goThrough: True
].

l maskedEntries: mask@(Regex Expression traits) do: block
"Works with glob code."
[ 
  l maskedEntries: (mask Matcher newOn: mask) do: block
].

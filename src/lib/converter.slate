"A Converter translates data from one type to another."
prototypes ensureNamespace: #converters &delegate: True.

converters define: #Converter &slots: {
    #in. "the input stream"
    #out -> Console writer "the output stream"
}.

c@(Converter traits) new
[c clone].

c@(Converter traits) newFrom: in to: out
"Creates a new Converter using the given streams for input and output."
[c cloneSettingSlots: #(in out) to: {in reader. out writer}].

c@(Converter traits) newFrom: in
[c cloneSettingSlots: #(in) to: {in reader}].

c@(Converter traits) newTo: out
[c cloneSettingSlots: #(out) to: {out writer}].

c@(Converter traits) convert
[overrideThis].

c@(Converter traits) convert: x
[c in: x reader. c convert].

r@(ReadStream traits) >> c@(Converter traits)
"Sets up a new Converter reading from the given source. This is unlike normal
>> calls in that it does NOT answer a ReadStream, but a Converter."
[c newFrom: r].

c@(Converter traits) >> out
[
  c out: out writer.
  c convert.
  out
].

c1@(Converter traits) >> c2@(Converter traits)
[| buf |
  buf: ExtensibleArray new.
  c1 >> buf.
  c2 newFrom: buf
].

converters define: #Encoder &parents: {Converter}.
converters define: #Decoder &parents: {Converter}.


converters define: #Base64Encoder &parents: {Encoder}.
converters define: #Base64Decoder &parents: {Decoder}.
"Uses the Base64 data-encoding scheme to store/load binary data in printable
ASCII Characters. Based on RFC 1421, 2045."
"TODO: RFC 2152 extensions for Unicode?"

Base64Encoder traits define: #table &builder:
  ['ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' as: Array].
Base64Decoder traits define: #table &builder:
  [| result | result: (Array newSize: 256).
   Base64Encoder table doWithIndex:
     [| :each :index | result at: (each as: Integer) put: index].
   result].

c@(Base64Encoder traits) convert
[| triple |
  triple: 0. "one triple consists one three chars"
  [c in isAtEnd] whileFalse:
    [| byte1 |
     triple = 18 ifTrue: [c out ; '\r\n'. triple: 0].
     byte1: (c in next as: Integer).
     c out nextPut: (c table at: byte1 >> 2).
     c in isAtEnd
       ifTrue:
	 [c out nextPut: (c table at: (byte1 bitAnd: 2r11) << 4).
	  c out ; '==']
       ifFalse:
	 [| byte2 |
	  byte2: (c in next as: Integer).
	  c out nextPut: (c table at:
	    ((byte1 bitAnd: 2r11) << 4 bitOr: byte2 >> 4)).
	  c in isAtEnd
	    ifTrue: [c out nextPut: (c table at: (byte2 bitAnd: 2r1111) << 2).
		     c out nextPut: $=]
	    ifFalse: [| byte3 |
		      byte3: (c in next as: Integer).
		      c out nextPut: (c table at:
			((byte2 bitAnd: 2r1111) << 2 bitOr: byte3 >> 6)).
		      c out nextPut: (c table at: (byte3 bitAnd: 2r111111)).
		      triple: triple + 1]]].
  c out ; '\r\n'.
].

c@(Base64Decoder traits) convert
[
  [c in isAtEnd] whileFalse:
    [| byte1 byte2 byte3 byte4 |
     "TODO: raise an exception on failure?"
     (byte1: c nextValue) ifNil: [^ c].
     (byte2: c nextValue) ifNil: [^ c].
     c out nextPut: ((byte1 << 2 bitOr: byte2 >> 4) as: ASCIIString Character).
     (byte3: c nextValue) ifNil: [^ c].
     c out nextPut: (((byte2 << 4 bitAnd: 16rFF) bitOr: byte3 >> 2)
      as: ASCIIString Character).
     (byte4: c nextValue) ifNil: [^ c].
     c out nextPut: (((byte3 << 6 bitAnd: 16rFF) bitOr: byte4) as: ASCIIString Character)].
].

c@(Base64Decoder traits) nextValue
"Reads and answers the next value, checking for the suffix code $=, and using
the translation table."
[| value |
  [c in isAtEnd ifTrue: [^ Nil].
   (value: c in next) = $= ifTrue: [^ Nil].
   (c table at: (value as: Integer)) ifNotNilDo: [| :x | ^ x]] loop
].

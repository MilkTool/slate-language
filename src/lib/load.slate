prototypes define: #Load &parents: {Cloneable} &slots: {#source. #parser -> Syntax Parser. #targetNamespace -> lobby. #verbose -> False. #showMessage -> True}.
Load traits addSlot: #Level valued: 0.
"How many levels of recursion has load: been invoked on."
"TODO: This should be a dynamic, not a global."
Load traits define: #DefaultSourceDir &builder: [Directory current].
"Records the concrete directory where the sources are available and where
the bootstrap occurred."
Load traits define: #defaultPaths &builder: [{SlateDir} as: ExtensibleArray].

l@(Load traits) of: file@(File traits)
[| oldLevel |
  l resolvePathOf: file.
  oldLevel: l Level.
  l Level: l Level + 1.
  [file reader sessionDo: [| :input | l process: input] &mode: file Read]
    ensure: [l Level: oldLevel].
].

l@(Load traits) resolvePathOf: file@(File traits)
[
  (file locator isSameAs: file RelativeLocator)
    ifTrue:
      [[file exists] whileFalse:
	[(l defaultPaths before: file locator basePath)
	  ifNil: [error: 'Could not find the file relative to any of the default directories.'. ^ Nil]
	  ifNotNilDo: [| :newL | file locator basePath: newL]]]
].

l@(Load traits) process: source
[l source: source. l run].

l@(Load traits) printMessage
[
  l Level timesRepeat: [DebugConsole writer nextPut: $\s].
  inform: 'Loading ' ; l source resource locator printString &target: DebugConsole.
].

l@(Load traits) skipShebang
"Ignore an initial she-bang line."
[
  (l source peek: 2) = '#!' ifTrue: [l source upTo: $\n].
].

l@(Load traits) run
"Evaluate the input from the open source ReadStream."
[| retry skip |
  retry: Retry clone.
  _@retry describeOn: out [ out ; 'Retry loading ' ; fileName printString ;'\n' ].
  skip: Retry clone.
  _@skip describeOn: out [ out ; 'Skip loading ' ; fileName printString ; '\n' ].
  l showMessage ifTrue: [l printMessage].
  l skipShebang.
  "Ensure a fresh Parser."
  [(l parser: (l parser newOn: l source)) do:
    [| :each |
     l verbose ifTrue:
       [l Level timesRepeat: [DebugConsole writer nextPut: $\s].
	inform: 'Parsed to line ' ; l parser lexer lineNumber printString &target: DebugConsole].
	each evaluateIn: l targetNamespace]]
    handlingCases: {retry -> [|:_| ^ (l of: l source resource)].
                    skip -> [|:_| ^ Nil]}.
].

ns@(Namespace traits) load: fileName &in: namespace &verbose: verbose &showLoadMessage: showLoadMessage
"A command to open a file with the name, load, and compile/evaluate the
contents within the argument namespace or an optional override."
[| src retry skip |
  src: (File newNamed: fileName &mode: File Read).
  src exists ifTrue: [ns load: src &in: namespace &verbose: verbose &showLoadMessage: showLoadMessage]
	     ifFalse: [warn: 'You tried to call load: on something that didn\'t describe a file. Hopefully the argument you passed what was you wanted. Here it is.'. fileName]
].

ns@(Namespace traits) load: file@(File traits) &in: namespace &verbose: verbose &showLoadMessage: showMessage
"A command to open the file, load, and compile/evaluate the
contents within the argument namespace or an optional override."
[| oldLevel loader |
  verbose `defaultsTo: False.
  namespace `defaultsTo: ns.
  showMessage `defaultsTo: True.
  loader: (Load cloneSettingSlots: #(targetNamespace verbose showMessage) to: {namespace. verbose. showMessage}).
  loader resolvePathOf: file.
  oldLevel: loader Level.
  loader Level: loader Level + 1.
  [file reader sessionDo: [| :input | loader process: input] &mode: file Read]
    ensure: [loader Level: oldLevel].
].

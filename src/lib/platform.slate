prototypes define: #Platform
  &slots: {#name -> ''.
	   #nodeName -> ''.
	   #systemRelease -> ''.
	   #systemVersion -> ''.
	   #machine -> ''.
	   #endianness -> #LittleEndian.
	   #bytesPerWord -> 4}.

p@(Platform traits) update
[
  p `>>
   [name := (lobby systemPlatform as: String).
    nodeName := (lobby systemName as: String).
    systemRelease := (lobby systemRelease as: String).
    systemVersion := (lobby systemVersion as: String).
    machine := (lobby systemMachine as: String).
    endianness := (lobby isLittleEndian ifTrue: [#LittleEndian] ifFalse: [#BigEndian]).
    bytesPerWord := lobby bytesPerWord. ]
].

p@(Platform traits) current
[p clone update].

Platform traits define: #Current &builder: [Platform current].

Platform traits define: #PosixNames -> #{#Linux. #Darwin. #Cygwin. #FreeBSD. #NetBSD. #OpenBSD. #SunOS. #BeOS. #Haiku}.

Platform traits define: #WindowsNames -> #{#Win32. #Win64}.

p@(Platform traits) isPosix
"Whether the underlying platform implements (enough of?) the POSIX API."
[p PosixNames anySatisfy: [| :name | (name as: p name) = p name]].

p@(Platform traits) isWindows
"Whether the underlying platform implements (enough of?) the POSIX API."
[p WindowsNames anySatisfy: [| :name | (name as: p name) = p name]].

p@(Platform traits) lineEnding
[
  p isPosix ifTrue: ['\n'] ifFalse: [p isWindows ifTrue: ['\r\n'] ifFalse: ['\r']]
].

s@(String traits) escapeForShell
"Performs shell-escaping for POSIX-style command shells."
[
  [| :result |
   s do: [| :char |
     (';<>*|`&$#!()[]{}: \\\'"' includes: char) ifTrue: [result nextPut: $\\].
     result nextPut: char
   ]] writingAs: s
].

p@(Platform traits) run: command
[lobby systemExecute: command].

Image startupActions at: #Platform put:
[
  Platform Current update
].

globals define: #Environment &parents: {Mapping. ExtensibleCollection}
&slots: {#variables -> Dictionary new}.

p@(Platform traits) environment [Environment].

Image startupActions at: #Environment put:
[Environment update].

e@(Environment traits) update
[| variables |
  variables := lobby environmentVariables.
  e variables := (e variables newSizeOf: variables).
  variables do:
    [| :each eachString equalsIndex key value |
     eachString := (each as: String).
     equalsIndex := (eachString indexOf: $= ifAbsent: [eachString length]).
     key := (eachString first: equalsIndex).
     value := (eachString allButFirst: equalsIndex + 1).
     e variables at: key put: value].
].

e@(Environment traits) size
[
  e variables size
].

e@(Environment traits) capacity
[
  e variables capacity
].

_@(Environment traits) acceptsKey: _
[False].

_@(Environment traits) acceptsKey: _@(String traits)
[True].

_@(Environment traits) accepts: _
[False].

_@(Environment traits) accepts: _@(String traits)
[True].

_@(Environment traits) defaultElement
[''].

e@(Environment traits) at: name ifAbsent: block
[
  e variables at: name ifAbsent: block
].

e@(Environment traits) at: name put: value
[
  lobby environmentAt: name put: value.
  e variables at: name put: value
].

e@(Environment traits) removeKey: name ifAbsent: block
[
  (e variables includesKey: name) ifTrue: [lobby environmentRemoveKey: name].
  e variables removeKey: name ifAbsent: block
].

e@(Environment traits) keyAtValue: obj ifAbsent: block
[
  e variables keyAtValue: obj ifAbsent: block
].

e@(Environment traits) keysAndValuesDo: block
[
  e variables keysAndValuesDo: block
].

e@(Environment traits) allSatisfy: block
[
  e variables allSatisfy: block
].

e@(Environment traits) printOn: s [s ; e printName].

e@(Environment traits) homePath [e at: 'HOME'].
e@(Environment traits) currentPath [e at: 'PWD'].
e@(Environment traits) temporaryPath [e at: 'TMPDIR'].
e@(Environment traits) includedPaths
"Where the shell expects to find binary executables."
[(e at: 'PATH') ifNil: [#{}] ifNotNilDo: #(splitWith: $:) `er].
e@(Environment traits) userName [e at: 'LOGNAME'].
e@(Environment traits) terminalType [e at: 'TERM'].

e@(Environment traits) sourcePaths
"Where Slate expects to find code."
[(e at: 'SLATEPATH') ifNil: [#{}] ifNotNilDo: #(splitWith: $:) `er].

"Load defaultPaths addAll:
  (Environment sourcePaths collect: [| :each | each as: File Locator])."

p@(Platform traits) edit: m@(Method traits) &editor: editor &reload: reload
[
  editor `defaultsTo:
    (p environment at: 'EDITOR' ifAbsent:
       [(query: 'Select an editor for files: ')
          ifNotNilDo:
            [| :editor | p environment at: 'EDITOR' put: editor. editor]]).
  reload `defaultsTo: False.
  m sourceTree
    ifNil:
      [warn: 'No source information available.'. False]
    ifNotNilDo:
      [| :src |
       src source resource locator
         ifNil:
           [warn: 'File-based source information unavailable.'. False]
         ifNotNilDo:
           [| :fileName result |
            result := (p run: editor
              ; (src lineNumber ifNil: [''] ifNotNilDo: [| :n | ' +' ; n printString])
              ; ' ' ; (fileName as: String)).
            result /\ reload ifTrue: [m reload].
            result]]
].

p@(Platform traits) view: f@(File traits) &pager: pager
[
  pager `defaultsTo:
    (p environment at: 'PAGER' ifAbsent:
       [(query: 'Select a viewer for files: ')
          ifNotNilDo:
            [| :pager | p environment at: 'PAGER' put: pager. pager]]).
  p run: pager ; ' ' ; (f locator as: String)
].

p@(Platform traits) browse: url &browser: browser
[
  browser `defaultsTo:
    (p environment at: 'BROWSER' ifAbsent:
       [(query: 'Select a browser for URLs: ')
          ifNotNilDo:
            [| :browser | p environment at: 'BROWSER' put: browser. browser]]).
  p run: browser ; ' ' ; (s as: String)
].

define: #shell &builder: [lobby newSubSpace].

_@shell didNotUnderstand: message at: position
"Form a command string and execute it."
[
  position > 0
    ifTrue: [resend]
    ifFalse:
      [([| :command |
         message selector isUnarySelector
           ifTrue:
             [command ; message selector.
              message optionals pairsDo:
                [| :key :value |
                 command ; ' -' ; (key as: String) allButFirst allButLast ; ' ' ; (value as: String)]].
         message selector isKeywordSelector ifTrue:
           [| keywords args |
            keywords := message selector keywords.
            command ; keywords first.
            keywords size = 1 ifTrue: "Read a string or array of arguments."
              [args := message arguments second.
               `conditions: (
                 [args is: String] -> [command ; ' ' ; args].
                 [args is: Collection] -> [args do: [| :arg | command ; ' ' ; arg]]
               )
           ]].
         message arguments allButFirst: message selector arity do:
           [| :arg | command ; ' ' ; (arg as: String)]] writingAs: String)
         ifNil: [resend] ifNotNilDo: [| :cmd | [Platform run: cmd]]]
].

collections define: #Queue &parents: {ArrayBacked}
"A Queue is an ExtensibleSequence designed to use its underlying Array in a
wrap-around manner, maintaining a (moving) gap for efficient extension to
either end of the Queue."
&slots: {#firstIndex -> 0.
"The lower inclusive bound of the used section of the Array."
#lastIndex -> 0
"The upper exclusive bound of the used section of the Array (the address of
the first non-Queue element); if this is less than the firstIndex, then the
contents themselves surround a gap."
}.

q@(Queue traits) clear
[
  resend.
  q firstIndex: 0.
  q lastIndex: 0.
  q
].

q@(Queue traits) new &capacity: n
"The Queue always maintains atleast one unusable sentinel element so that
all n requested elements may fit without lastIndex = firstIndex (the empty
condition) occurring."
[n ifNotNil: [n: n + 1]. resend clear].

q@(Queue traits) isFull
"The Queue is full if the indices span the whole array or are adjacent."
[
  q firstIndex = 0
   /\ [q contents size - 1 = q lastIndex]
   \/ [q lastIndex + 1 = q firstIndex]
].

q@(Queue traits) isEmpty
"The Queue is empty if the indices are equal."
[
  q lastIndex = q firstIndex
].

q@(Queue traits) isSplit
"Whether the contents are split into two pieces or contiguous."
[
  q lastIndex < q firstIndex
].

q@(Queue traits) gapSize
"How many elements can be added to fill the Queue Array."
[
  q isSplit
    ifTrue: [q firstIndex - q lastIndex - 1]
    ifFalse: [q contents size - q lastIndex + q firstIndex - 1]
].

q@(Queue traits) capacity
[
  q contents size - 1
].

q@(Queue traits) size
[
  q isSplit
    ifTrue: [q contents size - q firstIndex + q lastIndex]
    ifFalse: [q lastIndex - q firstIndex]
].

q@(Queue traits) growTo: n
"Provide a new Array of the appropriate capacity and transfer the contents
and adjust the indices to match, then replace the old one."
[| newContents |
  n <= (q gapSize + q size) ifTrue: [error: 'The contents will not fit.'].
  newContents: (q contents new &capacity: n + 1).
  q isSplit
    ifTrue:
      [| offset |
       offset: newContents size - q contents size.
       newContents replaceFrom: 0 to: q lastIndex with: q contents.
       newContents replaceFrom: q firstIndex + offset below: newContents size with: q contents &startingAt: q firstIndex.
       q firstIndex: q firstIndex + offset]
    ifFalse:
      [newContents replaceFrom: q firstIndex to: q lastIndex with: q contents &startingAt: q firstIndex].
  q contents: newContents.
  q
].

q@(Queue traits) at: n
"The firstIndex is treated as the 0 address. Wrap-around is handled."
[| index |
  index: q firstIndex + n.
  index >= q contents size
    ifTrue: [index: index - q contents size].
  q contents at: index
].

q@(Queue traits) at: n put: obj
"The firstIndex is treated as the 0 address. Wrap-around is handled."
[| index |
  index: q firstIndex + n.
  index >= q contents size
    ifTrue: [index: index - q contents size].
  q contents at: index put: obj
].

q@(Queue traits) do: block
[
  q isSplit
    ifTrue: [q contents from: q firstIndex to: q contents size - 1 do: block.
             q contents from: 0 to: q lastIndex do: block]
    ifFalse: [q contents from: q firstIndex to: q lastIndex do: block]
].

q@(Queue traits) addLast: obj
[
  q isFull ifTrue: [q grow].
  q contents at: q lastIndex put: obj.
  q lastIndex: q lastIndex + 1 \\ q contents size.
  obj
].

q@(Queue traits) addFirst: obj
[
  q isFull ifTrue: [q grow].
  q firstIndex: q firstIndex - 1 \\ q contents size.
  q contents at: q firstIndex put: obj.
  obj
].

q@(Queue traits) addAllLast: seq
[| newLastIndex |
  "Make room for the sequence as necessary."
  seq size > q gapSize ifTrue: [q growTo: seq size - q gapSize].
  "The new lastIndex after all the elements are added."
  newLastIndex: q lastIndex + seq size \\ q contents size.
  "Whether adding the elements to the end will push the lastIndex past the
   underlying Array's end."
  newLastIndex < q lastIndex
    ifTrue:
      [| split |
       "The number of elements that will fit before wrap-around."
       split: q contents size - q lastIndex.
       q contents replaceFrom: q lastIndex below: q contents size with: seq.
       q contents replaceFrom: 0 below: seq size - split with: seq &startingAt: split]
    ifFalse: [q contents replaceFrom: q lastIndex below: newLastIndex with: seq].
  "Finally, update the lastIndex."
  q lastIndex: newLastIndex.
  seq
].

q@(Queue traits) addAllFirst: seq
[| newFirstIndex |
  "Make room for the sequence as necessary."
  seq size > q gapSize ifTrue: [q growTo: q contents size + seq size].
  "The new firstIndex after all the elements are added."
  newFirstIndex: q firstIndex - seq size \\ q contents size.
  "Whether adding the elements to the end will push the firstIndex past the
   underlying Array's start."
  newFirstIndex > q firstIndex
    ifTrue:
      [| split |
       "The number of elements that will need to be added at the end of the Array."
       split: seq size - q firstIndex.
       q contents replaceFrom: 0 below: q firstIndex with: seq &startingAt: split.
       q contents replaceFrom: newFirstIndex below: q contents size with: seq]
    ifFalse: [q contents replaceFrom: newFirstIndex below: q firstIndex with: seq].
  "Finally, update the firstIndex."
  q firstIndex: newFirstIndex.
  seq
].

q@(Queue traits) removeLast
[| result |
  q lastIndex: q lastIndex - 1 \\ q contents size.
  result: (q contents at: q lastIndex).
  q contents at: q lastIndex put: Nil.
  result
].

q@(Queue traits) removeFirst
[| oldIndex result |
  q firstIndex: (oldIndex: q firstIndex) + 1 \\ q contents size.
  result: (q contents at: oldIndex).
  q contents at: oldIndex put: Nil.
  result
].

q@(Queue traits) removeLast: n
[| removed newLastIndex |
  removed: (q contents new &capacity: n).
  newLastIndex: q lastIndex - n \\ q contents size.
  "Whether removing the N elements will push the lastIndex past the underlying
   Array's start."
  newLastIndex > q lastIndex
    ifTrue: [| split |
	     split: n - q lastIndex.
	     removed replaceFrom: split below: n with: q contents.
	     removed replaceFrom: 0 below: split with: q contents &startingAt: q contents size - split.
	     "Clear the contents Array at the removed locations."
	     0 below: n - split do: [| :i | q contents at: i put: Nil].
	     newLastIndex below: q contents size do: [| :i | q contents at: i put: Nil]]
    ifFalse: [removed replaceFrom: 0 below: removed size with: q contents &startingAt: q lastIndex.
	      newLastIndex below: q lastIndex do: [| :index | q contents at: index put: Nil]].
  "Finally, update the firstIndex."
  q lastIndex: newLastIndex.
  removed
].

q@(Queue traits) removeFirst: n
[| removed newFirstIndex |
  removed: (q contents new &capacity: n).
  newFirstIndex: q firstIndex + n \\ q contents size.
  "Whether removing the first N elements will push the firstIndex past the
  underlying Array's end."
  newFirstIndex < q firstIndex
    ifTrue: [| split |
	     split: q contents size - q firstIndex.
	     removed replaceFrom: split below: n with: q contents &startingAt: q firstIndex.
	     removed replaceFrom: 0 below: split with: q contents.
	     q firstIndex below: q contents size do:
	       [| :i | q contents at: i put: Nil].
	     0 below: newFirstIndex do: [| :i | q contents at: i put: Nil]]
    ifFalse: [removed replaceFrom: 0 below: n with: q contents &startingAt: q firstIndex.
	      q firstIndex below: q firstIndex + n do:
		[| :i | q contents at: i put: Nil]].
  "Finally, update the firstIndex."
  q firstIndex: newFirstIndex.
  removed
].

q@(Queue traits) remove [q removeFirst].
q@(Queue traits) remove: n [q removeFirst: n].

"Stack-compatible protocol: " (
q@(Queue traits) push: obj [q add: obj].
q@(Queue traits) pop [q remove].
q@(Queue traits) pushAll: c [q addAll: c].
q@(Queue traits) pop: n [q remove: n].
).

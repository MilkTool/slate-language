collections define: #OrderedTree
  &parents: {LinkedCollection. ExtensibleSequence}
  &slots: {#treeParent. "The parent node, Nil for top-level nodes."
           #children -> ExtensibleArray new "The sub-nodes."}.
"A Tree node, linking to its parent node and storing its children in a
Sequence."

ot@(OrderedTree traits) clear
[
  ot children := ot children new.
  ot
].

ot@(OrderedTree traits) new &capacity: n
[ot clone `setting: #{#children} to: {ot children new &capacity: n}].

ot@(OrderedTree traits) newFor: obj &capacity: n
[(ot new &capacity: n) `>> [add: obj]].

ot@(OrderedTree traits) newForAll: c@(Collection traits)
[ot clone `setting: #{#children} to: {c as: ot children}].

ot@(OrderedTree traits) size [ot children size].

ot@(OrderedTree traits) do: block [ot children do: block].

ot@(OrderedTree traits) at: index [ot children at: index].

ot@(OrderedTree traits) iterator
[ot children iterator].

ot@(OrderedTree traits) reader
[ot children reader].

ot@(OrderedTree traits) writer
"NOTE: If the children object is not Extensible. Otherwise, a new structure
may be constructed which is not placed into the slot implicitly."
[ot children writer].

ot@(OrderedTree traits) siblings
"Return all children of the node's parent, excepting the original node.
Answer Nil if there is no parent or the wrong parent."
[
  ot treeParent
    ifNil: [ExtensibleArray new]
    ifNotNilDo: [| :p | p children copy `>> [remove: ot ifAbsent: [^ Nil]. ]]
].

ot@(OrderedTree traits) previousSibling
[ot treeParent ifNotNilDo: [| :p | p children before: ot]].

ot@(OrderedTree traits) nextSibling
[ot treeParent ifNotNilDo: [| :p | p children after: ot]].

ot@(OrderedTree traits) raise
"Moves this tree element to the first in the collection list of the parent -
relies on being able to directly manipulate that collection."
[
  ot treeParent children move: ot to: ot children indexFirst.
].

ot@(OrderedTree traits) bury
"Moves this tree element to the last in the children list of the parent -
relies on being able to directly manipulate that collection."
[| siblings |
  (siblings := ot treeParent children) move: ot to: siblings indexLast.
].

ch@(OrderedTree traits) reparentTo: ot
"Handle the aspect of unsetting any parent link and backlink as necessary.
Avoid adding to the new parent, since the position matters."
[
  ch treeParent ifNotNilDo: #(remove: ch) `er.
  ch treeParent := ot.
].

obj reparentTo: ot@(OrderedTree traits)
[].

ot@(OrderedTree traits) isLeaf: child
"Answer whether the given element would not count as a sub-tree of the
tree if it were a child of it - if it's anything but a tree itself."
[(child is: ot) not].

ot@(OrderedTree traits) at: index put: ch
[
  ch reparentTo: ot.
  ot children at: index put: ch.
  ot
].

ot@(OrderedTree traits) addFirst: ch
[
  ch reparentTo: ot.
  ot children addFirst: ch.
  ot
].

ot@(OrderedTree traits) addLast: ch
"Add a tree node as a child, and set the parent back-link."
[
  ch reparentTo: ot.
  ot children addLast: ch.
  ot
].

ot@(OrderedTree traits) remove: ch
"Remove the tree node as a child, making sure to remove the parent link."
[
  ot children remove: ch ifAbsent: [^ Nil].
  ch reparentTo: Nil.
  ot
].

ot@(OrderedTree traits) remove: ch ifAbsent: block
[
  ot children remove: ch ifAbsent: [block do]
].

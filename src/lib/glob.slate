define: #Glob &parents: {Cloneable} &slots: {}.

Glob traits define: #Pattern &parents: {Glob} &slots: {
  #components -> ExtensibleArray new
}.
Glob traits define: #PatternMatcher &parents: {Glob} &slots: {#reader. #maskPattern}.

Glob traits define: #PatternFailure.

Glob traits define: #PatternComponent &parents: {Glob}.
Glob traits define: #PatternLiteral &parents: {Glob PatternComponent} &slots: {#string -> ''}.
Glob traits define: #PatternRange &parents: {Glob PatternComponent} &slots: {
  #ranges -> ExtensibleArray new.
  #negate -> False
}.
Glob traits define: #PatternAny &parents: {Glob PatternComponent}.
Glob traits define: #PatternAnyOne &parents: {Glob PatternComponent}.

glob@(Glob traits) newOn: s
[glob Pattern newOn: s].

glob@(Glob Pattern traits) newOn: s@(String traits)
[
  glob components := glob components new.
  glob readFrom: s reader.
  glob
].

glob@(Glob Pattern traits) readFrom: s@(ReadStream traits)
[| prev |
  prev := '' writer.
  glob components :=
    [| :matcher |
     s do:
       [| :token |
        (#{$*. $?. $\[. } includes: token) /\ [prev contents isEmpty not]
          ifTrue: [matcher nextPut: (glob PatternLiteral new `>> [string := prev contents. ]).
                   prev := '' writer].
        token caseOf: {
          $*  -> [matcher nextPut: glob PatternAny].
          $?  -> [matcher nextPut: glob PatternAnyOne].
          $\[ -> [matcher nextPut: (glob readRange := s upTo: $\])]
        } otherwise: [prev nextPut: token]].
     prev contents isEmpty ifFalse: [matcher nextPut: (glob PatternLiteral new `>> [string := prev contents. ])]] writingAs: glob components.
].

glob@(Glob Pattern traits) readRange: str@(String traits)
[| p char2 s |
  s := str reader.
  p := glob PatternRange new `>>
    [| :p |
     ranges := p ranges new.
     negate := '^!' includes: (char2 := s peek). ].
  s do:
    [| :char |
     (char2 := s peek) = $-
       ifTrue: [s next. p ranges addLast: char -> s next]
       ifFalse: [p ranges addLast: char]].
  p
].

glob@(Glob Pattern traits) match: str@(String traits) from: pos
[
  (glob PatternMatcher new `>> [maskPattern := glob. reader := glob components reader. ]) match: str from: pos
].

glob@(Glob PatternMatcher traits) match: str@(String traits) from: pos
[
  "inform: 'match reader: ' ; glob reader printString ;  ' pos: ' ; pos printString."
  glob reader do:
    [| :token |
     (token isSameAs: glob PatternAny)
       ifTrue: [str size downTo: pos do:
                  [| :start | ((glob new `>> [reader := glob reader clone. ]) match: str from: start) = str size
                               ifTrue: [^ str size]]]
       ifFalse: [(pos := (token match: str from: pos))
                   == glob PatternFailure ifTrue: [^ pos]]].
  pos
].

glob@(Glob Pattern traits) matches: str@(String traits)
[
  (match ::= glob match: str from: 0) ~== glob PatternFailure /\ [match = str size]
].

glob@(Glob PatternAny traits) match: str@(String traits) from: pos
[
  (pos to: str size - pos)
].

glob@(Glob PatternAnyOne traits) match: str@(String traits) from: pos
[
  pos >= str size ifTrue: [glob PatternFailure] ifFalse: [pos + 1]
].

glob@(Glob PatternRange traits) match: str@(String traits) from: pos
[
  pos >= str size \/ [glob matches: (str at: pos)] ifTrue: [glob PatternFailure] ifFalse: [pos + 1]
].

glob@(Glob PatternLiteral traits) match: str@(String traits) from: pos
[
  pos + glob string size > str size ifTrue: [^ glob PatternFailure].
  (str copyFrom: pos to: pos + glob string size - 1) = glob string ifTrue: [pos + glob string size] ifFalse: [glob PatternFailure]
].

glob@(Glob PatternRange traits) matches: c@(String Character traits)
[
  glob ranges detect:
    [| :range | ((range isSameAs: c) /\ [range = c]) \/
                  [c code between: range key code and: c code]]
].

d@(File Locator traits) maskedEntries: mask@(String traits) do: block
[
  d maskedEntries: (Glob newOn: mask) do: block
].

l maskedEntries: mask@(Regex Expression traits) do: block
[ 
  l maskedEntries: (mask Matcher newOn: mask) do: block
].

l@(File Locator traits) maskedEntries: mask do: block
[ 
  (Directory new `>> [locator := l. ]) maskedEntries: mask do: block
].

l@(File Locator traits) collectMasked: mask
[
  [| :result | l maskedEntries: mask do: #(result nextPut: _) `er]
    writingAs: #{}
].

d@(File Locator traits) /* mask
[d collectMasked: mask].

d@(Directory traits) /* mask
[d locator collectMasked: mask].

d@(Directory traits) maskedEntries: mask do: block
[
  d sessionDo:
    [| :d |
     (d reader do:
        [| :each | (mask matches: each) ifTrue:
           [block applyWith: (File Locator new `>> [readFilenameFrom: each. ])]])].
].

d@(Directory traits) find: block &maxDepth: maxDepth
[
  maxDepth `defaultsTo: PositiveInfinity.
  result ::= Set new writer.
  d select: block into: result depth: maxDepth.
  result contents
].

d@(Directory traits) select: block into: result depth: maxDepth
[
  maxDepth isZero ifFalse:
    [entries ::= d entries collect:
       [| :each | (File RelativeLocator newFrom: d) `>> [readPathElementsFrom: each reader. ]].
     ((reader ::= entries reader) select: block) >> result.
     entries do:
       [| :each info |
        (info := each fileInfo) isNotNil /\ [info isDirectory] /\ [info isLink not]
          /\ [each name ~= '..'] /\ [each name ~= '.']
          ifTrue: [(d childNamed: each name) select: block into: result depth: maxDepth - 1]]]
].

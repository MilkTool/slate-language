
"DebugConsole writeStream collectionLimit: 512.
DebugConsole writeStream nestingLimit: 3.
Stream PrettyPrinter collectionLimit: 512.
Stream PrettyPrinter nestingLimit: 3."

Stream PrettyPrinter collectionLimit: 256.
Stream PrettyPrinter nestingLimit: 2.

conditions define: #Debugger &parents: {Cloneable}
  &slots: {#condition -> Nil.
           #restarts -> ExtensibleArray new.
           #interpreter -> bootstrapInterpreter.
           #resource -> DebugConsole.
           #parser -> Syntax Parser.
           #printer -> DebugConsole writer.
           #namespace -> lobby newSubSpace.
           #frameList -> Nil.
           #currentFrame -> Nil.
           #baseFramePointer -> Nil.
           #slateFrameSize -> 6.
           #maxBacktraceSize -> 200.
           #basePrompt -> ': '}.

conditions define: #DebuggingFrame &parents: {Cloneable}
  &slots: {#resultStackLocation -> Nil.
           #instructionPointer -> Nil.
           #method -> Nil.
           #framePointer -> Nil.
           #lexicalContext -> Nil.
           }.



d@(Debugger traits) refreshWorkspace
[d namespace: d namespace newSisterSpace. d installMethods].

d@(Debugger traits) on: resource
[
  d resource: resource.
  d parser: (d parser newOn: resource reader).
  d printer: resource writer.
  d printer collectionLimit: Stream PrettyPrinter collectionLimit.
  d printer nestingLimit: Stream PrettyPrinter nestingLimit.
  d
].

d@(Debugger traits) newFor: c &interpreter: interp &console: resource &topMethod: symbol
[
  interp `defaultsTo: d interpreter.
  resource `defaultsTo: d resource.
  symbol `defaultsTo: #invokeDebugger.
  d clone `>>
    [| :newD |
     on: resource.
     condition: c.
     restarts: d restarts new.
     namespace: d namespace clone.
     parser currentScope: (Syntax Namespace for: newD namespace).
     parser parseInteractively:
       ([repl parser parseInteractively]
	  on: SeriousCondition do: [| :c | c return: False]).
     baseFramePointer: (d interpreter framePointerOf: symbol).
     buildFrames.]
].

c@(Condition traits) invokeDebugger
"The hook for any Condition to start the debugger and enter its loop."
[(Debugger newFor: c) enter].

d@(Debugger traits) findRestarts
"Rebuilds the list of applicable restarts."
[
  d restarts clear.
  conditionStack
    reverseDo:
      [| :context |
       (context is: Restart) /\ [context appliesTo: d condition]
	 ifTrue: [d restarts addLast: context]].
  d restarts
].

d@(Debugger traits) describeRestarts
"Describes the restarts available in the context, if any."
[| out |
  out: d printer.
  out ; 'The following condition was signaled:\n'.
  d condition describeOn: out.
  out ; '\n'.
  out ; (d restarts isEmpty
    ifTrue: ['No restarts are available.\n']
    ifFalse: ['The following restarts are available:\n']).
  d restarts
    doWithIndex:
      [| :restart :index |
        out ; index printString ; ')\t'.
        restart describeOn: out].
  out ; '\nEnter \'help.\' for instructions.\n'
].

d@(Debugger traits) stackItem: x
[
  d interpreter stack at: x
].

d@(Debugger traits) stackItem: x put: val
[
  d interpreter stack at: x put: val
].


d@(Debugger traits) buildFrames
"build a list of frames return true if you have them all"
[ |fp ip method lc resultLoc frameList frame|
 "  {#resultStackLocation -> Nil.
           #instructionPointer -> Nil.
           #method -> Nil.
           #lexicalContext -> Nil.
           }.

"
  "set up the first frame to browse"
  d baseFramePointer ifNil: [d printer ; 'Base frame pointer is nil. Cannot build stack frames...\n'].
  fp: (d stackItem: d baseFramePointer - 1).
  ip: (d stackItem: d baseFramePointer - 4).
  resultLoc: (d stackItem: fp - 5).
  lc: (d stackItem: fp - 2).
  method: (d stackItem: fp - 3).
  frameList: ExtensibleArray new.

  "loop through all the frames and add them to the list"
  [frameList addLast: (DebuggingFrame new `>> [method: method.
                                               instructionPointer: ip.
                                               lexicalContext: lc.
                                               framePointer: fp.
                                               resultStackLocation: resultLoc.]).
   ip: (d stackItem: fp - 4).
   fp: (d stackItem: fp - 1).
   fp < d slateFrameSize ifTrue: [d frameList: frameList. ^ True].
   resultLoc: (d stackItem: fp - 5).
   lc: (d stackItem: fp - 2).
   method: (d stackItem: fp - 3).
   "frameList size > d maxBacktraceSize ifTrue: [d frameList: frameList. ^ False]."
  ] loop.
    
].

d@(Debugger traits) prompt
"Prints out the restarting options with a prompt and numeric labels, and reads
in the selected option number, returning it if valid."
[| out |
  out: d printer.
  out ; 'Debug'.
  d restarts isEmpty
    ifFalse: [out ; ' [0'.
	      d restarts size > 1 ifTrue:
		[out ; '..' ; d restarts indexLast printString].
	      out ; ']'].
  out ; d basePrompt.
  out flush.
  [| expr result |
   expr: d parser next.
   result: (expr evaluateIn: d namespace).
   "Exclude selections of restarts and other commands from printing."
   ((expr is: Syntax Literal) /\ [result is: Integer]) \/
     [(expr is: Syntax Message) /\ [#(: restart: frame frame: restarts help bt backtrace) includes: expr selector]]
      ifFalse:
        [result printOn: out.
          out newLine.
          out flush]
  ] on: SeriousCondition
    do: [| :c |
      out ; '\nThe following condition was signaled from within the debugger:\n'.
      c describeOn: d printer.
      c exit]
].

d@(Debugger traits) signalRestartAt: index
"Takes the restart option number from the queryRestart and invokes it."
[
  (d restarts acceptsKey: index)
    ifTrue: [((d restarts at: index) newCondition: d condition)
	       `>> [queryFrom: d. signal]]
    ifFalse: [d resource ; index printString ; ' is not a valid restart.\n']
].

d@(Debugger traits) printBacktrace &limit: limit &stream: out
[ 
  limit `defaultsTo: d maxBacktraceSize.
  out `defaultsTo: d printer.
  d frameList doWithIndex:
    [|:frame :index|
       "out ; '<' ; index printString ; '> ' ; (frame method method sourceTreeOf: (0 max: frame instructionPointer - 1)) printString ; '\n'."
       "out ; '<' ; index printString ; '> ' ; frame method printString ; '\n'."
       index > limit ifTrue: [^ Nil].
       out ; '<' ; index printString ; '> ' ; frame method printString ; '\n'
       ].
].


d@(Debugger traits) frame: n
[
  d currentFrame: (d frameList at: n ifAbsent: [Nil]).
  d printFrame
].

d@(Debugger traits) currentFrameValueAt: n
[ |out frame method|
  out: d printer.
  frame: d currentFrame.
  frame ifNil: [^ (out ; 'No frame currently selected. Use "frame: N"')].
  method: frame method method.
  d currentFrame ifNil: [inform: 'Current frame is nil'. ^ Nil].
  out ; 'register[' 
    ; n printString 
    ; ']@'
    ; (d stackItem: frame framePointer + n) printName
    ;' = '
    ; (d stackItem: frame framePointer + n) printString ; '\n'.
  (d stackItem: frame framePointer + n)
].

d@(Debugger traits) currentFrameValueAt: n put: val
[
  d stackItem: frame framePointer + n put: val
].


d@(Debugger traits) printFrame
[ |out frame method|
  out: d printer.
  frame: d currentFrame.
  frame ifNil: [^ (out ; 'No frame currently selected. Use "frame: N"')].
  method: frame method method.
  out ; 'fp:' ; frame framePointer printString  ; '\n'
    ; 'ip: ' ; frame instructionPointer printString ; '/' ; method code size printString ; '\n'
    ; 'method: ' ; method printString ; '\n'
    ; 'call count: ' ; method callCount printString ; '\n'
    ; 'register count: ' ; method registerCount printString ; '\n'
    ; 'source: ' ; method sourceTree printString ; '\n'.
  0 to: method inputVariables - 1
    do: [|:i| out ; 'arg[' ; i printString ; '] = ' ; (d stackItem: frame framePointer + i) printString ; '\n'].
  method inputVariables to: method inputVariables + method localVariables - 1
    do: [|:i| out ; 'local[' ; i printString ; '] = ' ; (d stackItem: frame framePointer + i) printString ; '\n'].
  method inputVariables + method localVariables to: method registerCount - 1
    do: [|:i| out ; 'register[' ; i printString ; '] = ' ; (d stackItem: frame framePointer + i) printString ; '\n'].
  out ; 'Decompiled: ' ; '\n'.
  VM SSACompiler decompile: method code.
].


d@(Debugger traits) printHelp
[
  d printer
   ; 'The debugger is a specialized evaluator that evaluates expressions within the method currently being debugged. Certain messages are provided for changing the state of the debugger, as follows:\n'
   ; ': index. (or restart: index.) - signal the restart at the given index\n'
   ; 'backtrace (or "bt") - print the backtrace\n'
   ; 'frame - print the current frame\n'
   ; 'frame: N - set the current frame\n'
   ; 'arg: N - evaluates the frame\'s register at index N\n'
   ; 'arg: N put: - sets the frame\'s register at index N\n'
   ; 'restarts - print the currently available restarts\n'
   ; 'help - print this help listing\n'.
].

d@(Debugger traits) installMethods
[
  _@(d namespace) frame
  [d printFrame].
  _@(d namespace) frame: n
  [d frame: n].
  _@(d namespace) arg: n
  [d currentFrameValueAt: n].
  _@(d namespace) arg: n put: newVal
  [d currentFrameValueAt: n put: newVal].
  _@(d namespace) backtrace &limit: n
  [d printBacktrace &limit: n].
  _@(d namespace) bt &limit: n
  [d printBacktrace &limit: n].
  _@(d namespace) restarts
  [d describeRestarts].
  _@(d namespace) restart: index
  [d signalRestartAt: index].
  _@(d namespace) : index
  [d signalRestartAt: index].
  _@(d namespace) help
  [d printHelp].
].

d@(Debugger traits) enter
"The main interactive debugger loop."
[
  d printer ; 'We are entering the debugger...\n'.
  d refreshWorkspace.
  d findRestarts.
  d printBacktrace.
  d describeRestarts.

  [d prompt] loop
].

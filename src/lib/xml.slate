"This is a port of the Smalltalk YAXO XML parser. It was originally written
by Michael Reuger."

prototypes ensureNamespace: #XML.

XML define: #Node &parents: {Cloneable}.

n@(XML Node traits) contentsDo: block
[n].

n@(XML Node traits) elementsDo: block
[n].

n@(XML Node traits) firstTagNamed: name
"Return the first encountered node with the specified tag.
Pass the message on."
[| answer |
  n elementsDo: [| :each | (answer: (each firstTagNamed: name))
    ifNotNil: [^ answer]].
  Nil
].

n@(XML Node traits) firstTagNamed: name with: testBlock
"Return the first encountered node with the specified tag for which the block
returns True. Pass the message on."
[| answer |
  n elementsDo: [| :each | (answer: (each firstTagNamed: name with: testBlock))
    ifNotNil: [^ answer]].
  Nil
].

n@(XML Node traits) tagsNamed: name childrenDo: block
"Evaluate the block on all children that match."
[
  n elementsDo: [| :each | each tagsNamed: name ifReceiverDo: block]
].

n@(XML Node traits) tagsNamed: name childrenDoAndRecurse: block
"Evaluate the block on all children that match and recurse."
[
  n elementsDo: [| :each | each tagsNamed: name ifReceiverDoAndRecurse: block]
].

n@(XML Node traits) tagsNamed: name contentsDo: block
"Evaluate the block on all contents that match."
[
  n elementsDo: [| :each | each tagsNamed: name contentsDo: block]
].

n@(XML Node traits) tagsNamed: name do: block
"Evaluate the block on all tags that match."
[
  n elementsDo: [| :each | each tagsNamed: name do: block]
].

n@(XML Node traits) tagsNamed: name ifReceiverDo: block
"Default handler; only XML TagNode should handle this."
[n].

n@(XML Node traits) tagsNamed: name ifReceiverDoAndRecurse: block
"Recurse all children."
[
  n elementsDo: [| :each | each tagsNamed: name ifReceiverDoAndRecurse: block]
].

n@(XML Node traits) tagsNamed: name ifReceiverOrChildDo: block
"Recurse all children."
[
  n elementsDo: [| :each | each tagsNamed: name ifReceiverDo: block]
].

n@(XML Node traits) printOn: stream
"This is for normal printing compatibility."
[
  n printXMLOn: (XML Writer newOn: stream)
].

n@(XML Node traits) printXMLOn: _
"Override this."
[n].

XML define: #NodeWithElements &parents: {XML Node}
 &slots: {#elements -> ExtensibleArray new}.

n@(XML NodeWithElements traits) copy
[n clone `setting: #(elements) to: {n elements copy}].

n@(XML NodeWithElements traits) printXMLOn: writer
[
  n elements do: [| :each | each printXMLOn: writer]
].

XML define: #Document &parents: {XML NodeWithElements} &slots:
 {#dtd -> ''.
  #version -> ''.
  #encoding -> ''.
  #requiredMarkup -> ''}.

d@(XML Document traits) printXMLOn: writer
[
  n version ifNotNil: [writer XMLdeclaration: n version].
  resend
].

d@(XML Document traits) printCanonicalOn: stream
[| writer |
  writer: (XML Writer on: stream).
  writer canonical: True.
  d printXMLOn: writer
].

XML define: #Element &parents: {XML NodeWithElements} &slots:
  {#name -> #''.
   #contents -> ExtensibleArray new.
   #attributes -> ExtensibleArray new}.

e@(XML Element traits) firstTagNamed: name
"Return the first node with the tag, or pass it on."
[
  e name == name
    ifTrue: [n]
    ifFalse: [resend]
].

e@(XML Element traits) firstTagNamed: name with: testBlock
"Return the first node with the tag and that passes the test, or pass it on."
[
  e name == name /\ [testBlock applyWith: e]
    ifTrue: [n]
    ifFalse: [resend]
].

e@(XML Element traits) tagsNamed: name contentsDo: block
"Call the block on all contents if the element's tag matches the given name,
then pass it on."
[
  e name == name ifTrue: [e contentsDo: block].
  resend
].

e@(XML Element traits) tagsNamed: name do: block
"Call the block on the element if its tag matches the given name,
then pass it on."
[
  e name == name ifTrue: [block applyWith: e].
  resend
].

e@(XML Element traits) tagsNamed: name ifReceiverDo: block
"Call the block on the element if the name matches."
[
  e name == name ifTrue: [block applyWith: e]
].

e@(XML Element traits) tagsNamed: name ifReceiverDoAndRecurse: block
"Call the block on the element if the name matches. Then recurse through the
children."
[
  e name == name ifTrue: [block applyWith: e].
  resend
].

e@(XML Element traits) tagsNamed: name ifReceiverOrChildDo: block
"Call the block on the element if the name matches, and do the same for the
direct children only."
[
  e name == name ifTrue: [block applyWith: e].
  resend
].

e@(XML Element traits) contentsDo: block
[
  e contents do: block
].

e@(XML Element traits) contentsString
[
  e contents size == 1 /\ [e contents first is: XML StringNode]
    ifTrue: [e contents first string]
    ifFalse: ['']
].

e@(XML Element traits) contentsStringAt: name
[
  (e elements at: name ifAbsent: [^ '']) string
].

e@(XML Element traits) printXMLOn: writer
[
  writer startElement: e name attributeList: e attributes.
  writer canonical not /\ [e isEmpty] /\ [e attributes isEmpty not]
    ifTrue: [writer endEmptyTag: e name]
    ifFalse: [
      writer endTag.
      e contentsDo: [| :content | content printXMLOn: writer].
      resend.
      writer endTag: e name]
].

e@(XML Element traits) isEmpty
"Treat the element as the joining of its elements and contents."
[
  e elements isEmpty /\ [e contents isEmpty]
].

XML define: #ProcessingInstruction &parents: {XML Node} &slots:
 {#target -> ''. #data -> ''}.

pi@(XML ProcessingInstruction traits) newForTarget: name data: string
[pi clone `setting: #(target data) to: {name. string}].

"printXMLOn: defined after XML Writer is defined."

XML define: #StringNode &parents: {XML Node} &slots: {#string -> ''}.

sn@(XML StringNode traits) copy
[sn clone `setting: #(string) to: {sn string copy}].

sn@(XML StringNode traits) newFor: string
[sn clone `setting: #(string) to: {string}].

sn@(XML StringNode traits) printXMLOn: writer
[
  writer pcData: sn string
].

(XML define: #Translation &builder: [Dictionary new &capacity: 30])
 addAll:
 {$\r -> '&#13;'.
  $\n -> '&#10;'.
  $\t -> '&#9;'.
  $& -> '&amp;'.
  $< -> '&lt;'.
  $> -> '&gt;'.
  $\' -> '&apos;'.
  $\" -> '&quot;'}.

XML define: #Writer &parents: {Cloneable}
  &slots: {#stack -> Stack new. #stream. #scanner. #canonical -> False}.

w@(XML Writer traits) newOn: stream
[w clone `setting: #(stack stream) to: {w stack new. stream}].

w@(XML Writer traits) attribute: name value: value
[
  w stream ; ' ' ; name printString ; '="'.
  w pcData: value.
  w stream nextPut: $\".
  w
].

w@(XML Writer traits) cdata: string
[
  w stream ; '<![CDATA[' ; string ; ']]>'
].

w@(XML Writer traits) pcData: c
[
  w stream ; (XML Translation at: c ifAbsent: [c as: String])
].

w@(XML Writer traits) comment: string
[
  w stream ; '<!-- ' ; string ; ' -->'
].

pi@(XML ProcessingInstruction traits) printXMLOn: w@(XML Writer traits)
[
  w stream ; '<?' ; pi target ; ' ' ; pi data ; '?>'
].

w@(XML Writer traits) pushTag: name
[
  w stack push: name
].

w@(XML Writer traits) popTag: name
[| top |
  top: (w stack isEmpty
    ifTrue: ['<empty>']
    ifFalse: [w stack last]).
  top = name
    ifTrue: [w stack pop]
    ifFalse: [w error: 'Closing tag ' ; name ; ' doesn\'t match ' ; top]
].

w@(XML Writer traits) startTag: name
[
  w stream ; '<' ; name.
  "w canonical ifTrue: [w stream ; ' ']."
  w pushTag: name
].

w@(XML Writer traits) endTag
[
  w stream nextPut: $>.
  w
].

w@(XML Writer traits) endTag: name
[
  w popTag: name.
  w stream ; '</' ; name.
  w stream nextPut: $>.
  w
].

w@(XML Writer traits) endEmptyTag: name
[
  w popTag: name.
  w stream ; '/>'.
  w canonical ifFalse: [w stream nextPut: $\s].
  w
].

w@(XML Writer traits) startElement: name attributes: attribs
[
  w canonical ifFalse: [w stream nextPut: $\r].
  w startTag: name.
  (attribs keySet as: SortedArray) do: [| :key |
    w attribute: key value: (attribs at: key)].
  w
].

w@(XML Writer traits) xmlDeclaration: versionString
[
  w canonical ifFalse: [
    w stream ; '<?XML '.
    w attribute: 'version' value: versionString.
    w stream ; '?>'].
  w
].


prototypes ensureNamespace: #relations &delegate: True.
relations define: #Relation &parents: {Cloneable}.

"Relations are objects that map objects to an arbitrary number of other
objects, and include a protocol of relational algebra."

relations define: #Top &builder: [Relation clone].

relations define: #Bottom &builder: [Relation clone].

relations define: #IdentityRelation &parents: {Relation}.

ir@(IdentityRelation traits) applyTo: x
"Identities return the element input."
[
  x
].

ir@(IdentityRelation traits) inverseApplyTo: x
"Identities return the element input."
[
  x
].

ir@(IdentityRelation traits) invert
"The inverse of an identity is that identity."
[
  ir
].

ir@(IdentityRelation traits) transitiveClosure
"The transitive closure of an identity is that identity."
[
  ir
].

ir@(IdentityRelation traits) reflexiveClosure
"The reflexive closure of an identity is that identity."
[
  ir
].

relations define: #UnaryArgumentRelation &parents: {Relation}
  &slots: {#relation}.

uar@(UnaryArgumentRelation traits) newFor: rel
[uar cloneSettingSlots: #(relation) to: {rel}].

relations define: #InvertedRelation &parents: {UnaryArgumentRelation}.
"This represents the result of an inversion of a relation."

ir@(InvertedRelation traits) applyTo: obj
[
  ir relation inverseApplyTo: obj
].

ir@(InvertedRelation traits) inverseApplyTo: obj
[
  ir relation applyTo: obj
].

ir@(InvertedRelation traits) invert
"The inverse of an inverse is the original relation."
[
  ir relation
].

relations define: #TransitiveClosureRelation &parents: {UnaryArgumentRelation}.
"This represents the transitive closure (applying * times to oneself) of a
relation."

tc@(TransitiveClosureRelation traits) applyTo: obj
[| nextStep |
  nextStep: (tc relation applyTo: obj).
  temp union: (tc applyToAll: nextStep)
].

tc@(TransitiveClosureRelation traits) transitiveClosure
[
  tc
].

relations define: #MappingRelation &parents: {Relation}
  &slots: {#mapping -> EmptyMapping}.

mr@(MappingRelation traits) applyTo: obj
[
  (mr mapping at: obj) as: SingleSet
].

mr@(MappingRelation traits) inverseApplyTo: obj
[| result |
  result: Set new.
  mr mapping doWithIndex: [| :each :index |
    each = obj ifTrue: [result add: index]].
  result
].

relations define: #AssociationTable &parents: {Relation}
  &slots: {#associations -> Set new}.
"A Set of Associations with no organizational restrictions."

at@(AssociationTable traits) applyTo: obj
[| result |
  result: Set new.
  at associations
     do: [| :each | each key = obj
		ifTrue: [result add: each value]].
  result
].

at@(AssociationTable traits) inverseApplyTo: obj
[| result |
  result: Set new.
  at associations
     do: [| :each | each value = obj
		ifTrue: [result add: each key]].
  result
].

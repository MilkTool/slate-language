prototypes define: #REPL &parents: {Cloneable} &slots: {
  #parser -> (Parser newOn: '').
  #printer -> String writer.
  #resource -> DebugConsole.
  #originalNamespace -> lobby.
  #namespace -> lobby newSubSpace.
  #lineCount -> 0.
  #basePrompt -> '> '.
  #noviceMode -> False.
  #inputs -> (RingBuffer new &capacity: 10).
  #results -> (RingBuffer new &capacity: 10).
}.

ns@(Namespace traits) inform: message &target: target
[| *rest |
  target `defaultsTo: REPL resource.
  target writer ; (rest isEmpty ifTrue: [message] ifFalse: [#sprintf* sendTo: {message} ; rest]) ; '\n'.
  target writer flush.
].

ns@(Namespace traits) print: obj &target: target
[
  target `defaultsTo: REPL resource.
  obj printOn: target writer.
  target writer ; '\n'.
  target writer flush.
].

ns@(Namespace traits) query: message &target: target
"A simple way to ask input of the user on an ExternalResource (by default
the Console) and return a Slate String response."
[| response |
  target `defaultsTo: REPL resource.
  target writer ; message.
  target writer flush.
  "Grabs the next line when it's available."
  [(response := target interactor upTo: $\n) isEmpty] whileTrue.
  target writer flush.
  response
].

ns@(Namespace traits) confirm: message &target: target
"A simple way to ask a Boolean question of the user on an ExternalResource
(by default the Console) and return a Slate Boolean answer."
[| response |
  response := (ns query: message ; ' (y/n) ') toLowercase.
  {'y'. 'yes'} anySatisfy: [| :option | option = response]
].

ns@(Namespace traits) doubleConfirm: message &target: target
[| response |
  (response := ns confirm: message &target: target)
    /\ [ns confirm: 'Are you sure?' &target: target]
].

REPL traits define: #NamespaceMethods &builder: [Dictionary new].
[| :assoc | REPL NamespaceMethods at: assoc key put: assoc value] for: {
  #pasteMode       -> [| :ns | ns repl parser parseInteractively := False].
  #interactiveMode -> [| :ns | ns repl parser parseInteractively := True].
  #it              -> [| :ns | ns it1].
  #it1             -> [| :ns | ns repl results first].
  #it2             -> [| :ns | ns repl results second].
  #it3             -> [| :ns | ns repl results third].
  #it4             -> [| :ns | ns repl results fourth].
  #it5             -> [| :ns | ns repl results fifth].

  #in:             -> [| :nsold :ns | ns atSlotNamed: #parentNamespace := ns].

  #?               -> [| :ns :obj | ns helpFor: obj].

  #help            ->
  [| :ns &target |
    target `defaultsTo: ns repl resource.
    target writer ; 'The REPL is an interactive evaluator that parses expressions and prints their results back. It also keeps a return-value history and interaction messages:\n'
      ; 'it\n\tAnswers the last result.\n'
      ; 'itN\n\tAnswers the result from N (1..5) expressions ago in the history.\n'
      ; 'repl\n\tAnswers the current REPL and its properties.\n'
      ; 'pasteMode\n\t(Default) Evaluate only when a finished expression is followed by a period and newline.\n'
      ; 'interactiveMode\n\tEvaluate when newline is entered and the expression is complete.\n'
      ; 'inspect: obj\n\tStarts the interactive travelling inspector.\n'
      ; 'inform: \'message\'\n\tPrints a message on a single line.\n'
      ; 'query: \'message\'\n\tPrints a message, waiting on and answering a user response.\n'
      ; 'confirm: \'message\'\n\tPrints a question on a single line and answering a user boolean response.\n'
      ; 'resetOnStartup\n\tClears the history and line number on fresh runs of the VM.\n'
      ; 'help\n\tPrints this helpful message.\n'.
  ].
}.

REPL traits define: #Workspace &parents: {Namespace}.
"A separate Namespace type for REPL usage."

repl@(REPL traits) installMethods
"This defines a number of namespace methods for convenient REPL access
and control."
[
  _@(repl namespace) repl "Answer the currently used REPL." [repl].
  ns@(repl namespace) ? [ns help].
  repl NamespaceMethods keysAndValuesDo:
    [| :selector :method | method asMethod: selector on: {repl namespace}].
].

repl@(REPL traits) removeMethods
"This removes methods defined in installMethods."
[
  [| :sel |
   (sel findOn: {repl namespace}) ifNotNilDo:
     [| :m | m removeFrom: {repl namespace}]] for: repl NamespaceMethods keySet
].

repl@(REPL traits) refreshWorkspace
[
  repl namespace := repl Workspace newDelegatingTo: repl originalNamespace.
  repl installMethods.
  repl parser currentScope := repl parser currentScope for: repl namespace.
].

repl@(REPL traits) prompt
[
  'slate[%@]%s' sprintf*, repl lineCount, repl basePrompt
].

repl@(REPL traits) newBasedOn: resource@(ExternalResource traits)
"Answer a new REPL targetting the specified resource and reset it."
[repl clone `>> [on: resource. reset. ]].

repl@(REPL traits) on: resource
"Re-target the REPL to the specified resource."
[
  repl resource := resource.
  repl refreshIO.
].

repl@(REPL traits) refreshIO
[
  repl parser := repl parser newOn: repl resource reader.
  repl printer := repl resource writer.
].

repl@(REPL traits) reset
"Clear out the line number and the evaluation result Collection."
[
  repl lineCount := 0.
  repl inputs clear.
  repl results clear.
  repl refreshIO.
].

_@here interpretHook: block
"The default set of restarts for any errors in a block of code."
[
  block
    handlingCases:
      {
        Abort -> [| :_ | ^ Nil].
        Quit -> [| :_ |]
      }
].

repl@(REPL traits) enter
"Sets up the convenient namespace methods and runs the interactive loop.
This does not normally exit unless there is a serious error."
[
  [repl refreshWorkspace.
   repl parser parseInteractively := True.
   [repl on: repl resource.
    repl lineCount := repl lineCount + 1.
    repl printer ; repl prompt.
    repl printer flush.
    repl namespace interpretHook:
      [| expr result |
       [expr := repl parser next] on: Stream Exhaustion
         do: [| :c | c stream == repl resource reader ifTrue: [^ Nil]].
       repl inputs addFirst: expr.
       result := [expr evaluateIn: repl namespace] on: SeriousCondition do:
         [| :c |
          repl noviceMode ifTrue:
            [c describeOn: repl printer.
             c exit: Nil]].
       repl results addFirst: result.
       [result printOn: repl printer] on: SeriousCondition do:
         [| :c |
          repl printer newLine.
          warn: result printName ; ' (Printing failed)'.
          c exit: Nil]].
    repl printer newLine.
    repl printer flush.
    "repl namespace interpretHook: [currentProcess run &limit: 1000]"]
     loop] ensure: [repl removeMethods. Image startupActions removeKey: repl].
  repl
].

repl@(REPL traits) completionsFor: word
"Answers an Array of all the possible complete Symbols defined in the system
which the given word is a valid prefix of.
TODO: Consult the recent literal frames for names.
TODO: sort the results by some suitable precedence."
[
  [| :result |
  globals Symbols keysDo:
    [| :key | (word isPrefixOf: key) ifTrue: [result nextPut: key]]]
   writingAs: #{}
].

repl@(REPL traits) start &namespace: ns &resource: r
"Enter a new REPL instance on the resource."
[
  (repl newBasedOn: (r `defaultsTo: repl resource)) `>> [namespace := ns. enter]
].

repl@(REPL traits) resetOnStartup
"Adds a handler for Image startup to reset the REPL."
[Image startupActions at: repl := [repl reset]].

ns@(Namespace traits) newREPL
[
  REPL start &namespace: ns
].

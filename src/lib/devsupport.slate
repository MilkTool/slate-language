
"Support functions to help with development"

"#as: implementations do: [|:each| inform: each definitionLocation ]."

"(#parseExpression findOn: {Syntax Parser}) definitionLocation"

"'' allRoles."


x@(Root traits) allRoles
[ |array writer |
  array: ExtensibleArray new.
  writer: array writer.
  x allDelegates do: [|:delegate| delegate roleReader >> [|:r| r selector -> r rolePositions] >> writer].
  array
].

d@(Debugger traits) printCurrentStack &limit: limit &stream: out &showLocation: showLocation
[
  d clone `>> [baseFramePointer: (d interpreter framePointerOf: #printCurrentStack).
               buildFrames. 
               printBacktrace &limit: limit &stream: out &showLocation: showLocation ]
].

x@(Root traits) methodsUsingMe
[
  [| :result |
   x allDelegates do:
     [| :deleg |
      deleg roleReader do:
        [| :role findOnArray positions |
         findOnArray: (Array newSize: (role selector arity `cacheAs: #arity)).
         positions: role rolePositions.
         0 below: arity do:
           [| :position |
            findOnArray at: position put:
              ((positions bitAnd: 1 << position) ~= 0
                 ifTrue: [x] ifFalse: [NoRole]).
            (role selector findOn: findOnArray) ifNotNilDo:
              [| :method |
               (method isSameAs: PrimitiveMethod) ifFalse:
                 [result nextPut: method method]]]]]] writingAs: Set
].

x@(Root traits) mostCommonlyCalledMethods
[
  x methodsUsingMe sortBy: [| :x :y | x callCount >= y callCount]
].

x@(Root traits) printMostCommonlyCalledMethods
[
  x mostCommonlyCalledMethods do:
    [| :m | inform: m printString
              ; ' count: ' ; m callCount printString
              ; ' at: ' ; m definitionLocation].
].

m@(CompiledMethod traits) breakOnEntry
[ | regCount |
  regCount: m registerCount.
  m registerCount: regCount + 2.
  m method code: {VM SSACode loadEnvironment. regCount. 
                  VM SSACode directSendMessage. regCount + 1. #break. 1. regCount} ; m method code.
].

m@(CompiledMethod traits) clearBreaks
[m recompile].

obj@(Root traits) completeSelectorFrom: s@(String traits)
[ 
  obj allRoles select: [|:item| (item value bitAnd: 1) = 1 /\ [item key beginsWith: s]] collect: [|:item| item key]
].

m@(Method traits) reload
[
  m sourceTree ifNotNilDo:
    [| :src |
     (src source resource as: Module) load]
].

m@(Method traits) editExternally &editor: editor &reload: reload
[
  editor `defaultsTo: (Environment at: 'EDITOR').
  reload `defaultsTo: False.
  m sourceTree
    ifNil:
      [warn: 'No source information available.'. False]
    ifNotNilDo:
      [| :src |
       src source resource locator
         ifNil:
           [warn: 'File-based source information unavailable.'. False]
         ifNotNilDo:
           [| :fileName result |
            result: (Platform run: editor
              ; (src lineNumber ifNil: [''] ifNotNilDo: [| :n | ' +' ; n printString])
              ; ' ' ; (fileName as: String)).
            result /\ reload ifTrue: [m reload].
            result]]
].


"provides similar functionality to python's struct.pack"

lobby define: #StructMixin &parents: {Cloneable} &slots: {#binaryDescription -> ExtensibleArray new}.

"binaryDescription is a list of (slotName type), e.g. (width Int32)"

struct@(StructMixin traits) littleEndian
[
  OverrideThis
].

struct@(StructMixin traits) packed &littleEndian: le
[
  le `defaultsTo: struct littleEndian.
  [| :out |
   struct binaryDescription do:
     [| :slotDescription type slot |
      slot := slotDescription first.
      type := slotDescription second.
      ({#Int8 ->  [| :x | out next: 1 putInteger: x &littleEndian: le].
        #Int16 -> [| :x | out next: 2 putInteger: x &littleEndian: le].
        #Int32 -> [| :x | out next: 4 putInteger: x &littleEndian: le].
        #Int64 -> [| :x | out next: 8 putInteger: x &littleEndian: le].
        #CString -> [| :x | out ; (x as: out collectionType). out nextPut: 0].
        #ByteArray -> [| :x | out ; x].
        #Fixed -> [| :x | out ; (x as: out collectionType)].
        #Struct -> [| :x | out ; (x packed &littleEndian: le)].
       } firstSatisfying: [| :each | each key = type])
        ifNil: [error: 'Could find method to serialize ' ; slotDescription printString]
        ifNotNilDo: [| :found | found value applyWith:
                                  (found key = #Fixed ifTrue: [slot] ifFalse: [struct atSlotNamed: slot])]]
  ] writingAs: ByteArray
].

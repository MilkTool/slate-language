
"provides similar functionality to python's struct.pack"


lobby define: #StructMixin &parents: {Cloneable} &slots: {#binaryDescription -> ExtensibleArray new}.

"binaryDescription is a list of (slotName type), e.g. (width Int32)"

struct@(StructMixin traits) littleEndian
[
  OverrideThis
].

struct@(StructMixin traits) packed &littleEndian: le
[ 
  le `defaultsTo: struct littleEndian.
  [ |:return|
    struct binaryDescription do:
      [ | :slotDescription type slot|
         slot: slotDescription first.
         type: slotDescription second.
         ({#Int8 ->  [ |:x| return next: 1 putInteger: x &littleEndian: le].
           #Int16 -> [ |:x| return next: 2 putInteger: x &littleEndian: le].
           #Int32 -> [ |:x| return next: 4 putInteger: x &littleEndian: le].
           #Int64 -> [ |:x| return next: 8 putInteger: x &littleEndian: le].
           #CString -> [ |:x| return ; (x as: ByteArray). return nextPut: 0].
           #ByteArray -> [ |:x| return ; x].
           #Fixed -> [ |:x| return ; (x as: ByteArray)].
           #Struct -> [ |:x | return ; (x packed &littleEndian: le)].
           } firstSatisfying: [|:each| each key = type])
             ifNil: [error: 'Could find method to serialize ' ; slotDescription printString]
             ifNotNilDo: [ |:found| found value applyWith: 
               (found key = #Fixed ifTrue: [slot] ifFalse: [struct atSlotNamed: slot])]]

  ] writingAs: ByteArray

].


array@(Sequence traits) as: int@(Integer traits) &bigEndian: bigEndian &radix: radix
[ | result position |
  bigEndian `defaultsTo: lobby isLittleEndian not.
  radix `defaultsTo: 256.
  result: 0.
  position: 1.

  bigEndian
    ifTrue: [array size - 1 downTo: 0 do: [ |:i| result: (array at: i) * position + result. position: position * radix]]
    ifFalse: [0 below: array size do: [ |:i| result: (array at: i) * position + result. position: position * radix]].

  result


].

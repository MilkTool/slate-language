
globals define: #modules &builder: [ExtensibleArray new].

_@lobby currentModule [Module current].
_@lobby currentModule: m [Module current: m].
"TODO: form and implement a generic (non-global) idea of the current module."

ns@(Namespace traits) enterModule: name
[
  modules include: name.
  currentModule: name
].

ns@(Namespace traits) provides: objects
[
  currentModule exports addAll: objects.
  features addAll: objects
].

ns@(Namespace traits) requires: objects
[
  currentModule imports addAll: objects.
  objects do:
    [| :requirement |
     (lobby features includes: requirement)
       ifFalse: [warn: 'Missing feature required for loading this: ' ; requirement printString]].
].

prototypes define: #Module
"Modules are a collection of objects and methods, which together provide
certain features, and require other modules' features to function."
  &slots: {
#requirements -> Set new.
"The set of modules that this requires before it can be loaded."
#imports -> Set new.
"Imports are objects and features referenced by the module's code."
#exports -> Set new.
"Exports are objects and features provided by the module's code."
#objects -> Set new.
"These are the non-method objects that the module defines and installs."
#methods -> Set new.
"These are the closures that the module defines and installs, whether named or
dispatched or anonymous."
#name -> ''}.

m@(Module traits) initialize
"Reset all of the module's attributes."
[
  m requirements: m requirements new.
  m imports: m imports new.
  m exports: m exports new.
  m objects: m objects new.
  m methods: m methods new.
  m
].

m@(Module traits) new &name: name
[
  m clone initialize `>> [name: (name ifNil: ['']). ]
].

(Module traits hasSlotNamed: #current)
  ifFalse: [Module traits addSlot: #current valued: Module new].

m@(Module traits) newForFileNamed: filename
[
  FileModule newLocated: filename
].

m@(Module traits) copy
[m cloneSettingSlots: #(requirements imports exports objects methods)
   to: {m requirements copy.
	m imports copy.
	m exports copy.
	m objects copy.
	m methods copy}
].

m@(Module traits) newBasedOn: moduleSet
[m clone initialize `>>
   [requirements: (moduleSet select: [| :each | each is: Module]). ]].

m@(Module traits) provide: obj
[
  "TODO: include some check here to avoid arbitrary provision."
  m exports include: obj
].

m@(Module traits) provides: obj
[
  m exports includes: obj
].

m@(Module traits) import: obj from: prereq
[
  (prereq provides: obj)
    ifTrue: [m requirements include: prereq. m imports include: obj].
  m
].

m@(Module traits) allSelectorsSent
[
  [| :result | m methods do: [| :each | result ; each allSelectorsSent]]
    writingAs: IdentitySet
].

m@(Module traits) allSelectorsSentNotDefined
[
  [| :result | m methods do:
    [| :each | result ; (each allSelectorsSent reject: [| :sel | m methods anySatisfy: [| :method | method selector = sel]])]]
    writingAs: IdentitySet
].

m@(Module traits) importAll: c from: prereq
[
  c do: [| :each | (prereq provides: each)
    ifFalse: [^ (prereq error:
		   prereq name ; ' does not provide ' ; (each as: String))]].
  m requirements include: prereq.
  c do: [| :each | m imports include: each].
  m
].

m@(Module traits) defines: obj
[
  (RootedPath to: obj)
    ifNil: [m defines: (RootedPath to: obj traits)]
    ifNotNilDo: [| :path | m defines: path]
].

m@(Module traits) defines: path@(Path traits)
[overrideThis].

m@(Module traits) load
"Loads the Module's contents, if external."
[overrideThis].

m@(Module traits) build
"Compiles the Module's contents, if external."
[overrideThis].

m@(Module traits) locator
[overrideThis].

prototypes define: #FileModule &parents: {Module} &slots: {#file -> File}.
"FileModules are Modules which are drastically simplified for the purposes of
bootstrapping. Requirements and provisions are symbols, and other features are
ignored."

m@(FileModule traits) newLocated: filename
[m new `>> [file: (m file newNamed: filename &mode: File Read). ]].

f@(File traits) as: m@(Module traits)
[FileModule new `>> [file: f. ]].

m@(FileModule traits) locator
[m file locator].

m@(FileModule traits) load &in: namespace
[
  lobby load: (m locator as: String) &in: namespace
].

m@(FileModule traits) build
[
  compileFileNamed: (m locator as: String).
].

m@(FileModule traits) readDefinitions
"Reads in a file, building the module's collections while evaluating the
contents."
"TODO: implement it!"
[
  m file
    sessionDo: [| :in | ].
  m
].

Module traits define: #DefinitionSelectors
	      &builder: [#(addPrototype: addPrototype:derivedFrom:
		         define: define:using: ensureNamespace:)]
"Selectors for the standard accessor-producing definitions.".

m@(FileModule traits) parseSessionDo: block
[
  m file sessionDo:
    [| :input | block applyWith: (Syntax Parser newOn: input reader)]
].

m@(FileModule traits) definedPaths &in: namespace
"Answers a Set of Path objects that would be defined if the source were
evaluated."
[
  namespace `defaultsTo: here.
  [| :result |
   m parseSessionDo:
     [| :p |
      p do: [| :tree | tree walk:
	[| :node accessor partPath |
	 "Handle the slot-based definitions which produce an accessor."
	 (node is: Syntax Message)
	   /\ [m DefinitionSelectors includes: node selector]
	   /\ [node arguments second is: Syntax Literal]
	   ifTrue:
	     [accessor: node arguments second value.
	      partPath: node arguments first]
	   "Handle unary top-level method definitions."
	   ifFalse:
	     [(node is: Syntax MethodDefinition)
		/\ [node selector isUnarySelector]
		/\ [node parentScope isNil]
		ifTrue:
		  [accessor: node selector.
		   partPath: node roles first]].
	 "Given an accessor, check the path for validity, then add it."
	 accessor ifNotNil:
	   [(partPath as: RootedPath &root: namespace) ifNotNilDo:
	     [| :path | result nextPut: (path childNamed: accessor)]]
	 ]]]] writingAs: Set
].

m@(FileModule traits) defines: path@(Path traits)
[m definedPaths includes: path].

globals ensureNamespace: #AutoLoader
"Manages 'autoloading' stubs - these are mock accessors for unloaded features
which load those features transparently and return them once done."
  &slots: {#defs -> Dictionary new.
	   #storage -> (File newNamed: 'AutoLoad').
	   #standardFiles -> (
  "Extra generic libraries."
  ({'extlib'. 'time'. 'dimensioned'. 'predicate'. 'group'. 'heap'. 'skiplist'.
    'tree'. 'tokenizer'. 'sortedSet'. 'relation'.
    'singleSet'. 'matrix'. 'wordarray'.
    'terminal'. 'version'. 'test'. 'random'. 'xml'.
    'suspension'. 'process'. 'promise'.
    'graph'. 'digraph'}
    collect: [| :name | 'src/lib/' ; name ; '.slate']) ;
  "C-generation code."
  ({'types'. 'syntax'. 'cr'. 'writer'. 'rules'. 'generator'}
    collect: [| :name | 'src/mobius/c/' ; name ; '.slate']) ;
  "Networking libraries, platform libraries."
  {'src/lib/net/socket.slate'. 'src/lib/net/http.slate'.
   'src/plugins/socket/unix/socket.slate'.
   'src/plugins/platform/platform.slate'} ;
  "Bootstrapper libraries."
  ({'bootstrap'. 'build'}
    collect: [| :name | 'src/mobius/vm/' ; name ; '.slate']) ;
  "UI libraries."
  ({'color'. 'event'. 'region'. 'transform'. 'graphics'. 'layout'.
    'colormap'. 'command'. 'curve'. 'ellipse'. 'form'. 'lines'. 'medium'.
    'morph'. 'path'. 'pen'. 'port'. 'presentation'. 'text'}
    collect: [| :name | 'src/ui/' ; name ; '.slate']) as: Set)}.

l@AutoLoader readFromSourceIn: file
"Parses the source in the specified file and creates entries for each path
directly defined."
[| mod paths |
  mod: (FileModule newLocated: file).
  (paths: mod definedPaths) do:
    [| :path |
     path isOneSlotFromDefinition /\ [(paths includes: path parent) not]
       ifTrue: [l defs at: path put: mod]].
].

l@AutoLoader performScan &files: fileList
"Scans the source in the given collection of filenames or the default, adding
to the in-memory database."
[
  fileList `defaultsTo: l standardFiles.
  fileList do: [| :file | l readFromSourceIn: file]
].

l@AutoLoader install: m@(Module traits) when: selector isCalledOn: namespace
"The basic unit of creating an auto-loading method. This checks for a pre-
existing method on the exact same object to avoid duplicate work, and informs
the user of the creation. The method itself tells the module to load itself,
which will presumably clobber that method called, so that the final action
of re-calling it will return the intended object."
[
  (selector isFoundOn: {namespace}) ifTrue: [^ Nil].
  inform: 'Installing auto-loader for: ' ; selector printString
   ; ' in: ' ; ((RootedPath from: here to: namespace) as: Syntax Node) printString.
  [| :ns |
   selector removeMethodFrom: {namespace}. "Remove this method before replacement."
   m load. "Have the module object load itself, presumably replacing this."
   l installReadyItems. "Have AutoLoader rescan for further hooks."
   "Re-call the method, presuming that the module installed a replacement."
   [selector sendTo: {ns}] on: MethodNotFound do:
     [| :c | error: 'The module failed to define this accessor.']]
    asMethod: selector on: {namespace}
].

l@AutoLoader installReadyItems
"Iterate through the in-memory definitions, installing methods for those
that are one slot definition away from completion."
[
  l defs keysAndValuesDo:
    [| :path :mod |
     path isOneSlotFromDefinition
       ifTrue:
	 [l install: mod when: path names last isCalledOn: path parent target]]
].

l@AutoLoader readStorage &from: file &in: namespace
"Reads a quirky file format we've defined from path-spec -> locator-spec per
line in the text file or default storage."
[
  file `defaultsTo: l storage.
  namespace `defaultsTo: here.
  file exists
    ifFalse: [warn: 'The database file for auto-loaders is not present.'.
	      ^ Nil].
  file sessionDo:
    [| :f r |
     r: f reader lines.
     [r isAtEnd] whileFalse:
       [r next ifNotNilDo:
	 [| :line |
	  (line indexOfSubSeq: ' ->') ifNotNilDo:
	    [| :splitIndex path filename |
	     path: ((line first: splitIndex + 1) split
		as: RootedPath &root: namespace).
	     filename: (String readFrom: (line copyFrom: splitIndex + 4)).
	     AutoLoader defs at: path put: (FileModule newLocated: filename)]]]].
  l installReadyItems
].

l@AutoLoader writeToStorage
"Writes definitions to the default storage."
[
  l storage sessionDo:
    [| :f out |
     out: f writer.
     l defs keysAndValuesDo:
       [| :path :mod |
	out ; ((path as: Syntax Node) printString
	  ; ' -> ' ; (mod locator as: String) printString as: ByteArray) ; '\n']]
    &mode: l storage CreateWrite.
].

lobby ensureNamespace: #systems.

prototypes define: #System &slots: {#modules -> Set new}.

s@(System traits) newForAll: modules
"Creates a new System object for the given Module objects."
[(s cloneSettingSlots: #(modules) to: {modules as: s modules}) `>>
   [| :newS | modules do: [| :each | newS fillRequirementsFor: each]. ]
].

s@(System traits) fillRequirementsFor: module
"Fills the requirements slot of the module, based on the knowledge that the
System has by holding several other Modules, and return the requirements."
[| features covered |
  features: module imports.
  covered: (Set newSizeOf: features).
  s modules
    do: [| :each coverage |
	 coverage: (each exports intersection: features).
	 coverage isEmpty
	   ifFalse: [module requirements include: each.
		     covered includeAll: coverage]].
  module requirements
].

s@(System traits) add: module
[
  s modules include: module.
  s fillRequirementsFor: module.
  module
].

s@(System traits) build
"Compile the System's modules."
[
  s modules do: #build`er.
].

s@(System traits) load
"Load the System's modules in a consistent order."
[| remaining |
  remaining: s modules copy.
  [remaining isEmpty]
    whileFalse:
      [remaining do:
	[| :each |
	 (features includesAllOf: each requirements)
		 ifTrue: [each load. remaining remove: each]]].
].

s@(System traits) load: module
"Loads the given module and recursively re-loads modules that depend upon it."
[
  module load.
  s modules
    do: [| :each | (each dependsOn: module) ifTrue: [s load: each]].
].

systems define: #Core &builder: [System newForAll: globals modules].
"This relies on being loaded just after all the standard libraries, and more
importantly before other systems."

define: #Parsec.

"Based heavily on Daan Leijen's excellent Haskell library of the same name."


Parsec traits define: #Result.


Parsec Result traits define: #Ok &parents: {Parsec Result} 
                                 &slots: #(consumed value state).

ok@(Parsec Result Ok traits) newConsumed: consumed 
			     withValue: value 
			     andState: state
[ok cloneSettingSlots: #(consumed value state) to: {consumed. value. state}].


Parsec Result traits define: #Error &parents: {Parsec Result}
                                    &slots: #(consumed).

error@(Parsec Result Error traits) newConsumed: consumed
[error cloneSettingSlots: #(consumed) to: {consumed}].


_@(Parsec Result Ok traits) ifOk: ok ifError: err
[ok do].

_@(Parsec Result Error traits) ifOk: ok ifError: err
[err do].


Parsec traits define: #State &slots: #(input).

st@(Parsec State traits) newWithInput: input
[st cloneSettingSlots: #(input) to: {input}].

Parsec traits define: #Parser &slots: #(block).


"Run a parser"
p@(Parsec Parser traits) runOn: obj
[p runOn: (obj as: LazyList)].

p@(Parsec Parser traits) runOn: l@(LazyList traits)
[| result | 
   result: (p block applyWith:
              (Parsec State newWithInput: l)).
   result ifOk: [result value]
	  ifError: ["TODO: return something other than Nil"]
].


p@(Parsec Parser traits) _newWithBlock: b@(Method traits)
[p cloneSettingSlots: #(block) to: {b}].

"just uses the first arg for disambiguation"
p@(Parsec Parser traits) return: val
[
  p _newWithBlock: 
    [| :state |
       Parsec Result Ok newConsumed: False withValue: val andState: state
    ]
].

p@(Parsec Parser traits) >>= f@(Method traits)
[p _newWithBlock: 
  [| :state reply1 reply2 |
     reply1: (p block applyWith: state).
     reply1 
       ifOk: [ reply2: ((f applyWith: reply1 value) block
                           applyWith: reply1 state).
	       reply2 cloneSettingSlots: #(consumed) 
		      to: {reply1 consumed \/ reply2 consumed } ]
       ifError: [ reply1 ]
  ]
].

p@(Parsec Parser traits) >> q@(Parsec Parser traits)
[p >>= [|:x| q]].

p@(Parsec Parser traits) fail: message
[p _newWithBlock: 
  [| :state | Parsec Result Error cloneSettingSlots: #(consumed) to: {False} ]
].

"MonadPlus"

p@(Parsec Parser traits) <or> q@(Parsec Parser traits)
[p _newWithBlock: 
  [| :state r| 
     r: (p block applyWith: state).
     r consumed 
       ifTrue: [r]
       ifFalse: [r ifOk: [r]
                   ifError: [q block applyWith: state]]
  ]
].
       

"character parsers"

p@(Parsec Parser traits) char: c
[p satisfy: (#=`er <- c)].

p@(Parsec Parser traits) satisfy: pred
[p tokenStopgapWithBlock: 
  [|:c| (pred applyWith: c) ifTrue: [c] ifFalse: [Nil]]
].
			  
p@(Parsec Parser traits) tokenStopgapWithBlock: test
[p _newWithBlock: 
  [| :state | 
     state input
       ifCons: [| :c :cs x |
		  x: (test applyWith: c).
		  x ifNil: [Parsec Result Error newConsumed: False]
		    ifNotNil: [Parsec Result Ok
				newConsumed: True
				withValue: x
				andState: (Parsec State newWithInput: cs)
			      ]
	       ]
       ifNil: [Parsec Result Error newConsumed: False]
     ]
].


"Combinators unfolded for space (in Haskell, not sure if Slate has tailcalls)"

"Commented out for now due to making my head spin
p@(Parsec Parser traits) many
[]

p@(Parsec Parser traits) manyAccum: accum@(Method traits)
[p _newWithBlock: 
  [| :state walk r2 |
     walk: [| :xs :state :r | 
	      r consumed 
	        ifTrue: [r
                         ifOk: [|ys| 
				ys: (accum applyWith: r value with: xs).
				walk applyWith: ys
				     with: r state 
				     with: (p block applyWith: r state)
				]
			 ifError: [r]]
	        ifFalse: [r
			  ifOk: [error: 'combinator \'many\' is applied to a parser that accepts an empty string.']
                          ifError: [Parsec Result Ok
				    cloneSettingSlots: #(consumed value state)
				    to: {False. xs. state}]]
	   ]
     r2: (p block applyWith: state).
     r2 consumed 
       ifTrue: [walk applyWith: LazyList Nil with: state with: r2]
       ifFalse: [
"


"Combinators"

p@(Parsec Parser traits) many1
[p >>= [|:x| p many >>= [|:xs| p return: ({x} ;; xs) ]]].

p@(Parsec Parser traits) many
[p many1 <or> (p return: {})].


ensureNamespace: #JSON.

"TODO: finish escape hex character reading. see readEscapedHexCharacter"
"TODO: float precision, see writeFloat"
"TODO: string encoding"

JSON define: #ReadStream &parents: {ReadStream WrapperStream}.

JSON ReadStream traits define: #HexDigits &builder: [Dictionary newWithAll: {$A -> 10. $B -> 11. $C -> 12. $D -> 13. $E -> 14. $F -> 15}].

json@(JSON traits) read: src
[
  (json ReadStream newOn: src) contents
].

json@JSON write: obj &escapedForwardSlash: boolean
[
  [| :result w | w := json WriteStream newOn: result.
   w write: obj &escapedForwardSlash: boolean] writingAs: String
].

json@JSON reader
[
  json ReadStream
].

json@JSON writer
[
  json WriteStream
].

JSON define: #WriteError &parents: {DescriptiveError}.
JSON define: #ReadError &parents: {DescriptiveError}.

r@(JSON ReadStream traits) error: description
[
  JSON ReadError signalSaying: description
].

r@(JSON ReadStream traits) eatWhitespace
[| peek |
  peek := r peek.
  [(peek isNotNil /\ [peek isWhitespace]) \/ [peek = $/]]
    whileTrue: [
      peek = $/ ifTrue: [r readComment]
                ifFalse: [r next].
      peek := r peek].
].

r@(JSON ReadStream traits) nextHexDigitToInt
[| char |
  ((char := r next) isDigit: 16)
    ifTrue: [char toDigit: 16]
    ifFalse:
      [r error: 'Not a valid hex character.']
].

r@(JSON ReadStream traits) hexDigit
[
  (4096 * r nextHexDigitToInt) + (256 * r nextHexDigitToInt) + (16 * r nextHexDigitToInt) + r nextHexDigitToInt
].

r@(JSON ReadStream traits) readComment
[| second |
  r next. "Eats one forward slash."
  (second := r next) = $/
    ifTrue: [r readDoubleSolidusComment]
    ifFalse:
      [second = $*
         ifTrue: [r readCStyleComment]
         ifFalse: [r error: 'Not a valid JSON comment.']].
].

r@(JSON ReadStream traits) readDoubleSolidusComment
[| ch |
  ch := r next.
  [ch = $\n \/ [ch = $\r]] whileFalse: [ch := r next].
].

r@(JSON ReadStream traits) readCStyleComment
[| ch |
  ch := r next.
  [[ch = $* /\ (r peek = $/)]
    whileFalse: [
      (ch = $/ /\ [r peek = $*])
              ifTrue: [r error: 'Not a valid JSON comment: "/*" cannot be embedded in the comment.']
        ifFalse: [ch := r next]].
    r next] on: Error do: [| :c |
      r error: 'Not a valid JSON comment. CStyle comment unfinished']
].

s@(String traits) readFrom: r@(JSON ReadStream traits)
[
  [| :result |
   r next. "Skip the opening quote."
   [r peek = $\"] "Terminate on a matching quote."
     whileFalse:
       [| ch |
        ch := r next.
        ch = $\\
           ifTrue:
             [ch := r next.
              ('bfnrt\\' includes: ch)
                ifTrue: [result nextPut: $\\. result nextPut: ch]
                ifFalse:
                  [ch = $u
                     ifTrue: [| n |
                              (n := r hexDigit) < 128
                                ifTrue: [result nextPut: (n as: s Character)]
                                ifFalse: [result nextPutAll: ((n as: s) as: Array)]]
                     ifFalse: [('"/' includes: ch)
                                 ifFalse: [r error: 'Not a valid escaped character']].
              result nextPut: ch]]
           ifFalse: [result nextPut: ch]].
   r next] writingAs: s
].

a@(Array traits) readFrom: r@(JSON ReadStream traits)
[| result done |
  r next. "Skip the opening bracket."
  [| :result |
   done := r peek = $\]. "Terminate on a matching close-bracket."
   [done] whileFalse:
     [result nextPut: r readItem.
      r eatWhitespace.
      (done := r peek = $\]) ifFalse:
        [| ch |
         (ch := r next) = $, ifFalse:
           [r error: 'Not a valid JSON array.']]].
   r next]
].

tc@(UnitTests JSON traits) writeEscapedCarriageReturn
[
  tc assert: '"\r"' = (JSON write: '\r') whitespaceRemoved
    description: 'Writing escaped carriage return failed.'.
].

tc@(UnitTests JSON traits) writeEscapedHorizontalTab
[
  tc assert: '"\t"' = (JSON write: '\t') whitespaceRemoved
    description: 'Writing escaped horizontal tab failed.'.
].

tc@(UnitTests JSON traits) writeEscapedHexCharacter
[
  tc assert: (JSON write: '\\u1001') whitespaceRemoved = '"\\u1001"'
    description: 'Writing escaped hex character failed.'.
].

tc@(UnitTests JSON traits) whitespaceRemoval
[
  tc assert: ' d ' whitespaceRemoved = 'd' description: 'Whitespace not removed 1.'.
].

tc@(UnitTests JSON traits) suite
[
  tc suiteForSelectors:
    {
      #peek.
      #next.
      #whitespaceRemoval.
      #readEmptyObject.
      #readEmptyArray.
      #readSmallArray.
      #readEscapedNewline.
      #readEscapedHorizontalTab.
      #readEscapedCarriageReturn.
      #readEscapedFormfeed.
      #readEscapedBackspace.
      #readStringValue.
      #readBooleanValues.
      #readNull.
      #readArrayOfSymbols.
      #readIntegerValue.
      #readNegativeIntegerValue.
      #readFloatValue.
      #readNegativeFloatValue.
      #readSmallObject.
      #readLongArray.
      #readComplexObject.
      #readComplexArray.
      #readCStyleComment.
      #readDoubleSolidusComment.
      #writeEmptyObject.
      #writeEmptyArray.
      #writeBooleanValues.
      #writeNull.
      #writeArrayOfSymbols.
      #writeStringValue.
      #writeSmallObject.
      #writeSmallArray.
      #writeComplexArray.
      #readBadNumber.
      #readBadObjectSyntax.
      #readBadDoubleSolidusComment.
      #readCStyleCommentWithoutEnd.
      #readCStyleCommentWithSlashStar.
      #readEscapedSolidus.
      #readEscapedReverseSolidus.
      #readBadObjectKey.
      #readBadArray.
      #readIncompleteArray.
      #readEmptyObjectAtEndOfArray.
      #readEmptyObjectMidArray.
      #readClosingObjectBracket.
      #readAnotherDoubleSlashComment.
      #readAnotherSlashStarComment.
      #readEmptyObjectInList.
      #readObjectInListWithSlashStarComment.
      #readObjectWithEmptyList.
      #readObjectWithNonEmptyList.
      #readCommentInObjectWithListValue.
      #writeLong.
      #readEscapedQuotationMark.
      #writeEscapedQuotationMark.
      #readWriteCopies.
      #writeEscapedSolidus.
      #writeNonEscapedSolidus.
      #writeEscapedReverseSolidus.
      #writeEscapedBackspace.
      #writeEscapedFormfeed.
      #writeEscapedNewline.
      #writeEscapedCarriageReturn.
      #writeEscapedHorizontalTab.
      #writeEscapedHexCharacter.
      #readBadEscapedHexCharacter.
      #readEscapedHexCharacter
"      #writeFloat"
    }
].

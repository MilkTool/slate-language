
Graphics define: #DebuggerMorph &parents: {WindowMorph} &slots: {#condition -> Nil. #debugger -> Nil. #window -> Nil}.



m@(DebuggerMorph traits) newOn: cond parent: parent window: window &x: x &y: y &width: width &height: height 
[ | im backtraceListbox d restartButtons inspectButton|
  im: m new.
  im condition: cond.
  im window: window.
  d: (Debugger newFor: cond).
  im debugger: d.
  d findRestarts.
  x `defaultsTo: 0.
  y `defaultsTo: 0.
  width `defaultsTo: 320.
  height `defaultsTo: 240.
  im percentages: {90 - (d restarts size * 10). 10} ; (d restarts collect: [|:x| 10]). "fixme"
  im title: 'Debugging: ' ; cond printName.
  backtraceListbox: ListboxMorph new `>> [printFunction: [|:item| item method printString]. ].
  backtraceListbox items: d frameList.
  inspectButton: LabelMorph new `>> [text: 'Inspect selected frame'. ].
  b@(inspectButton) handleMyself: e@(MouseButtonClickEvent traits)
  [backtraceListbox selectedItems do: [|:so| InspectorMorph newOn: so parent: parent]].
  restartButtons: (d restarts collect: [|:restart button|
                                          button: LabelMorph new `>> [text: 'Restart: ' ; restart printString. ].
                                          b@(button) handleMyself: e@(MouseButtonClickEvent traits)
                                          [im unlink. (restart newCondition: cond) `>> [queryFrom: d. signal]].
                                          button
                                          ]).
  im setChildren: {backtraceListbox. inspectButton} ; restartButtons.
  im region: (Rectangle origin: x , y extent: width , height).
  parent addChild: im.
  im pack.
  im
].

m@(DebuggerMorph traits) enter
[
  m window eventLoop
].

m@(DebuggerMorph traits) enableDebuggerWithParent: parent window: window
[
  c@(Condition traits) invokeDebugger
"  c@(Warning traits) invokeDebugger"
  [(m newOn: c parent: parent window: window) enter].
].

Graphics define: #DebuggerMorph &parents: {WindowMorph} &slots: {
  #condition -> Nil.
  #debugger -> Nil.
  #window -> Nil.
}.

m@(DebuggerMorph traits) newOn: cond parent: parent window: window &bounds: rect
[| im backtraceListbox restartButtons inspectButton |
  im := m new `>>
    [condition := cond.
     window := window.
     debugger := Debugger newFor: cond. ].
  im debugger findRestarts.
  im percentages := {90 - (im debugger restarts size * 10). 10} ; (im debugger restarts collect: [| :x | 10]). "fixme"
  im title := 'Debugging: %s', cond printName.
  backtraceListbox := ListboxMorph new `>>
    [printFunction := [| :item | item method printString].
     items := im debugger frameList. ].
  inspectButton := LabelMorph new `>>
    [text := 'Inspect selected frame'. ].
  b@(inspectButton) handleMyself: e@(MouseButtonClickEvent traits)
  [
    backtraceListbox selectedItems do:
      [| :so | InspectorMorph newOn: so parent: parent]
  ].
  restartButtons :=
    (im debugger restarts collect:
       [| :restart button |
        button := LabelMorph new `>> [text := 'Restart: ' ; restart printString. ].
        b@(button) handleMyself: e@(MouseButtonClickEvent traits)
        [
           im unlink.
           (restart newCondition: cond) `>> [queryFrom: im debugger. signal]
        ].
        button]).
  im children := {backtraceListbox. inspectButton} ; restartButtons.
  im region := bounds `defaultsTo: Rectangle origin: 0 <> 0 extent: 320 <> 240.
  parent addChild: im.
  im pack.
  im
].

m@(DebuggerMorph traits) enter
[
  m window eventLoop
].

m@(DebuggerMorph traits) enableDebuggerWithParent: parent window: window
[
  c@(Condition traits) invokeDebugger
"  c@(Warning traits) invokeDebugger"
  [(m newOn: c parent: parent window: window) enter].
].


"from key presses to function calls on the textbox"
Graphics define: #InputTranslator &parents: {Cloneable}.
Graphics define: #HashTableInputTranslator &parents: {InputTranslator} &slots: {#table -> Dictionary new}.
Graphics define: #TextboxInputTranslator &parents: {InputTranslator}.
Graphics define: #LineEditorInputTranslator &parents: {InputTranslator}.

Graphics define: #TextboxMorph &parents: {Morph} &slots: {
  #text -> '' new. 
  #position -> 0. 
  #fontSize -> 12. 
  #inputTranslator -> TextboxInputTranslator new.
}.

Graphics define: #LineEditorMorph &parents: {Morph} &slots: {
  #editor -> LineEditor new.
  #fontSize -> 12. 
  #inputTranslator -> LineEditorInputTranslator new.
}.

m@(LineEditorMorph traits) new
[
  resend `>> [editor := m editor new. ]
].

"let the input translator class handle all keyboard input on me"
m@(TextboxMorph traits) handleMyself: e@(KeyboardEvent traits)
[
  m inputTranslator handle: e on: m
].

m@(LineEditorMorph traits) handleMyself: e@(KeyboardEvent traits)
[
  m inputTranslator handle: e on: m
].

it@(InputTranslator traits) handle: e@(InputEvent traits) on: m@(Morph traits)
[
  inform: 'Default handler %s does not handle event %s', it, e.
  Nil
].

it@(HashTableInputTranslator traits) handle: e@(KeyboardEvent traits) on: m@(Morph traits)
[
  it table at: e key ifPresent: [| :func | func applyTo: {m. e}]
].

it@(TextboxInputTranslator traits) handle: e@(KeyboardPressEvent traits) on: m@(TextboxMorph traits) [].
it@(LineEditorInputTranslator traits) handle: e@(KeyboardPressEvent traits) on: m@(LineEditorMorph traits) [].

"someone pressed enter"
m@(TextboxMorph traits) activate [].

it@(TextboxInputTranslator traits) handle: e@(KeyboardReleaseEvent traits) on: m@(TextboxMorph traits)
[
  `conditions: (
    [e key = 276]
      -> [m repaint. m position := m position - 1 max: 0].
    [e key = 275]
      -> [m repaint. m position := m position + 1 min: m printText size].
    [e key = 13]
      -> [m activate].
    "backspace"
    [e key = 8]
      -> [m repaint.
          m text := (m text first: m position - 1) ; (m text allButFirst: m position).
          m position := m position - 1 max: 0].
    "delete"
    [e key = 127]
      -> [m repaint.
          m text := (m text first: m position) ; (m text allButFirst: m position + 1)].
    [e key > 250]
      -> [].
    [e character isPrintable]
      -> [m repaint. 
          m text := (m text first: m position) ; (e character as: String) ; (m text allButFirst: m position).
          m position := m position + 1]
  )
].

it@(LineEditorInputTranslator traits) handle: e@(KeyboardReleaseEvent traits) on: m@(LineEditorMorph traits)
[
  `conditions: (
     [e key = 275]
       -> [m repaint. m editor cursor setTo: (m editor cursor forwardOn: m editor)].
     [e key = 102 /\ [e isControlOnly]]
       -> [m repaint. m editor cursor setTo: (m editor cursor forwardOn: m editor).
           m ensureVisibleCursor: m editor].
     [e key = 276]
       -> [m repaint. m editor cursor setTo: (m editor cursor backwardOn: m editor)].
     [e key = 98 /\ [e isControlOnly]]
       -> [m repaint. m editor cursor setTo: (m editor cursor backwardOn: m editor).
           m ensureVisibleCursor: m editor].
     [e key = 273]
       -> [m repaint. m editor cursor setTo: (m editor cursor previousLineOn: m editor)].
     [e key = 112 /\ [e isControlOnly]]
       -> [m repaint. m editor cursor setTo: (m editor cursor previousLineOn: m editor).
           m ensureVisibleCursor: m editor].
     [e key = 274]
       -> [m repaint. m editor cursor setTo: (m editor cursor nextLineOn: m editor)].
     [e key = 110 /\ [e isControlOnly]]
       -> [m repaint. m editor cursor setTo: (m editor cursor nextLineOn: m editor).
           m ensureVisibleCursor: m editor].
     "alt-d do it"
     [e key = 100 /\ [e isAltOnly]]
       -> [('' concatenateAll: (m editor lines collect: #contents `er) &separator: m editor lineDelimeter)
             evaluate].
     "backspace"
     [e key = 8]
       -> [m repaint. m editor deleteBackwardAt: m editor cursor].
     "delete"
     [e key = 127]
       -> [m repaint. m editor deleteAt: m editor cursor].
     "set mark C-space"
     [e key = 32 /\ [e isControlOnly]]
       -> [m repaint. m editor setMark].
     "del mark C-g "
     [e key = 103 /\ [e isControlOnly]]
       -> [m repaint. m editor deleteMark].
     "undo C-/ "
     [e key = 47 /\ [e isControlOnly]]
       -> [m repaint. m editor undo].
     "redo C-\ "
     [e key = 92 /\ [e isControlOnly]]
       -> [m repaint. m editor redo].
     "wipe C-w "
     [e key = 119 /\ [e isControlOnly]]
       -> [m repaint. m editor cutTo: e window].
     "copy M-w "
     [e key = 119 /\ [e isAltOnly]]
       -> [m repaint. m editor copyTo: e window].
     "yank C-y "
     [e key = 121 /\ [e isControlOnly]]
       -> [m repaint. m editor pasteFrom: e window].
     [e key > 250]
       -> [].
     [e character `cache isPrintable \/ [e key = 13]]
       -> [m repaint. m editor insert: e character at: m editor cursor]
   )
].

m@(TextboxMorph traits) printText
["this is the text as a string in case i change the underlying representation"
  m text
].

m@(TextboxMorph traits) handleMyself: input@(LeftMouseButtonReleaseEvent traits)
[ "don't drop focus like usual"
  m
].

m@(TextboxMorph traits) paintMyselfOn: surface@(Surface traits)
[| text |
  surface sourceRGB: m theme textboxColor alpha: m theme textboxAlpha.
  surface rectangleObject: m.
  surface fill.
  surface sourceRGB: m theme foregroundColor alpha: m theme foregroundAlpha.
  surface rectangleObject: m.
  surface stroke.
  surface fontSize: m fontSize.
"fixme, we should use cairo's text_extents function to see how large the text is and draw
the appropriate cursor. "
  text := m printText.

  "print cursor... text is invisible here because we chose the foreground color"
  surface moveTo: 10 <> ((m height // 2) + 2).
  surface sourceRGB: m theme textboxColor alpha: m theme textboxAlpha.
  surface showText: (text first: m position).
  surface sourceRGB: m theme cursorColor alpha: m theme cursorAlpha.
  surface showText: '_'.

  "print text"
  surface moveTo: 10 <> (m height // 2).
  surface sourceRGB: m theme textColor alpha: m theme textAlpha.
  surface showText: text.
].

m@(LineEditorMorph traits) handleMyself: input@(LeftMouseButtonReleaseEvent traits)
[ "don't drop focus like usual"
  m
].

m@(LineEditorMorph traits) ensureVisibleCursor: le@(LineEditor traits)
[
  (m visibleRange includes: le cursor line)
    ifFalse: [m editor firstVisibleLine: (le cursor line - (m editor visibleLines // 2) max: 0)].
].

m@(LineEditorMorph traits) visibleRange
[
  (m editor firstVisibleLine to: (m editor firstVisibleLine + m editor visibleLines min: m editor lineCount - 1))
].

m@(LineEditorMorph traits) paintMyselfOn: surface@(Surface traits)
[| text|
  surface sourceRGB: m theme textboxColor alpha: m theme textboxAlpha.
  surface rectangleObject: m. surface fill.
  surface sourceRGB: m theme foregroundColor alpha: m theme foregroundAlpha.
  surface rectangleObject: m. surface stroke.
  surface fontSize: m fontSize.
"fixme, we should use cairo's text_extents function to see how large the text is and draw
the appropriate cursor. "

  "fixme scrollbar position?"
  m visibleRange
    do: [| :lineNumber line offset |
         line: ((m editor lineAt: lineNumber) as: String).
         offset: lineNumber - m editor firstVisibleLine + 1.
         m editor cursors do:
           [| :cursor |
            (cursor line = lineNumber)
              ifTrue: ["print cursor... text is invisible here because we chose the foreground color"
                       surface moveTo: 5 <> (offset * m fontSize + 2).
                       surface sourceRGB: m theme textboxColor alpha: m theme textboxAlpha.
                       surface showText: (line first: cursor column).
                       "if it is the main cursor or not"
                       cursor == m editor cursor
                         ifTrue: [surface sourceRGB: m theme cursorColor alpha: m theme cursorAlpha]
                         ifFalse: [surface sourceRGB: m theme alternateCursorColor alpha: m theme alternateCursorAlpha].
                       surface showText: '_']].
         "print text"
         surface moveTo: 5 <> (offset * m fontSize).
         surface sourceRGB: m theme textColor alpha: m theme textAlpha.
         surface showText: line].
].

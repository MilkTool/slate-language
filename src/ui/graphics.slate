lobby ensureNamespace: #Graphics &delegate: True.


Graphics define: #Position &parents: {Cloneable} &slots: {}.
Graphics define: #Surface &parents: {Cloneable}.


"holds properties"
Graphics define: #Theme &parents: {Cloneable} &slots: {
  #backgroundColor -> Colors DarkSlateGray. #backgroundAlpha -> 1.0.
  #foregroundColor -> Colors PeachPuff. #foregroundAlpha -> 1.0.
  #textColor -> Colors SpringGreen. #textAlpha -> 1.0.
  #labelColor -> Colors Gray. #labelAlpha -> 1.0.
  #scrollbarBackgroundColor -> Colors DarkGray. #scrollbarBackgroundAlpha -> 1.0.
  #scrollbarForegroundColor -> Colors LightGray. #scrollbarForegroundAlpha -> 1.0.

}.

Graphics define: #Conductor &parents: {Cloneable} &slots: {
  #focus -> Nil.
  #mouseMovedAfterPress -> False.
}.

"This will be sort of an abstract base class. Useful for understanding
the minimum of functions that need to be defined for morphs."

Graphics define: #SceneElement &parents: {Cloneable} &slots: {

  #parent -> Nil.
  #region -> Nil.

  #dragging -> False.
  #dragOffset -> Nil.
  #canDrag -> False.
}.

"this is the top level 'world' morph in a scene"

Graphics define: #WindowSceneElement &parents: {SceneElement} &slots: {
#exitRequested -> False.
#surface -> Nil.
#form -> Nil.
#needRepaint -> True.
#child -> Nil.
#osWindow -> Nil.
#conductor -> Conductor new.
}.


"a default theme"
Graphics define: #BasicTheme &parents: {Theme}.


"a morph that can't do anything besides paint a solid color"
Graphics define: #SolidBackgroundMorph &parents: {SceneElement} &slots: {#color. #alpha -> 1}.

"this is the main morph class that can hold children and has a theme"
Graphics define: #Morph &parents: {SceneElement}
  &slots: {#theme -> BasicTheme new. #children -> ExtensibleArray new}.

Graphics define: #LabelMorph &parents: {Morph} &slots: {#text -> ''. #fontSize -> 14}.





" --- Methods --- "

m@(Morph traits) new
[
  m cloneSettingSlots: #(theme children) to: {m theme. ExtensibleArray new}
].


wse@(WindowSceneElement traits) width: width height: height
[ | res |
  res: wse.
  res form: (Form extent: width , height depth: 32). 
  res surface: (FormContext newForm: res form).
  res region: (Rectangle origin: 0, 0 extent: width , height).
  res
].

wse@(WindowSceneElement traits) createWindow
[
  wse conductor: wse conductor new.
  wse conductor focus: Nil. "set it to wse and we might have a loop"
  wse osWindow: (Windows Window newWidth: wse width height: wse height sceneElement: wse)
].

wse@(WindowSceneElement traits) handle: input@(Event traits)
[
  wse conductor handle: input for: wse
].


wse@(WindowSceneElement traits) defaultHandler [wse child].
se@(WindowSceneElement traits) activeConductor [se conductor].


"--- input handler: conductor---"

c@(Conductor traits) setFocus: item [c focus: item. c mouseMovedAfterPress: False].

c@(Conductor traits) handle: input@(Event traits) for: wse@(WindowSceneElement traits)
[
  wse defaultHandler == wse ifTrue: [^ Nil].
  wse defaultHandler handle: input
].

c@(Conductor traits) handle: input@(MouseButtonReleaseEvent traits) for: wse@(WindowSceneElement traits)
[ "cache because it will lose focus after it handles the event"
  c focus `cache ifNil: [resend] ifNotNil: [c mouseMovedAfterPress 
                                       ifTrue: [c focus handle: input] 
                                       ifFalse: [c focus handle: input. 
                                                 c focus handle: (MouseButtonClickEvent new `>> [source: input source. 
                                                                                             region: input region.
                                                                                             pointer: input pointer.
                                                                                             position: input position.
                                                                                             window: input window.])]]
].

c@(Conductor traits) handle: input@(MouseMotionEvent traits) for: wse@(WindowSceneElement traits)
[
  c focus ifNil: [resend] ifNotNil: [c mouseMovedAfterPress: True. c focus handle: input]
].

"--- Morph ---"

"***the #handle: function must return itself if it handled the event and nil if it didn't***"
se@(SceneElement traits) activeConductor [se parent activeConductor].
se@(SceneElement traits) handle: input@(PaintEvent traits) [se paintOn: input window. ^ se].
se@(SceneElement traits) handle: input@(Event traits) [^ se].
"se@(SceneElement traits) handle: input@(MouseEvent traits) [inform: 'unhandled mouse event'.]."
se@(SceneElement traits) requestFocus [se parent ifNotNilDo: [|:p| p handle: (RequestFocusEvent new `>> [source: se.])]].
se@(SceneElement traits) dropFocus [se parent ifNotNilDo: [|:p| p handle: (DropFocusEvent new `>> [source: se.])]].
se@(SceneElement traits) paintOn: surface@(Surface traits) [].
se@(SceneElement traits) repaint [se parent repaint].
se@(SceneElement traits) x [ se region left].
se@(SceneElement traits) y [ se region top].
se@(SceneElement traits) left [ se region left].
se@(SceneElement traits) top [ se region top].
se@(SceneElement traits) bottom [ se region bottom].
se@(SceneElement traits) right [ se region right].
se@(SceneElement traits) width [ se region width].
se@(SceneElement traits) height [ se region height].
se@(SceneElement traits) topLeft [ se region topLeft].
se@(SceneElement traits) topCenter [ se region topCenter].
se@(SceneElement traits) topRight [ se region topRight].
se@(SceneElement traits) bottomLeft [ se region bottomLeft].
se@(SceneElement traits) bottomCenter [ se region bottomCenter].
se@(SceneElement traits) bottomRight [ se region bottomRight].
se@(SceneElement traits) leftCenter [ se region leftCenter].
se@(SceneElement traits) rightCenter [ se region rightCenter].
se@(SceneElement traits) absolutePosition [se parent absolutePosition + se region origin].


se@(SceneElement traits) startDragging: position
[
  se dragging: True.
  se dragOffset: se absolutePosition - position.
].

se@(SceneElement traits) stopDragging: position
[
  se dragging: False.
  se dragOffset: Nil.
].


surface@(Surface traits) ensurePaint: block
[

  [surface save. block do. surface restore.]
    on: Error 
    do: [|:error| surface `>> [restore.
                      sourceRGB: Colors Red.
                      moveTo: 0 , 0. showText: error printString.
                      ]].
].

se@(WindowSceneElement traits) absolutePosition [ 0 , 0].
se@(WindowSceneElement traits) repaint
[
  se needRepaint: True.
].

se@(WindowSceneElement traits) paintOn: surface@(Surface traits)
[
  se needRepaint: False.
  surface ensurePaint: [surface rectangle: se child.
                        surface clip.
                        surface translate: se child region origin.
                        se child paintOn: surface].
  se osWindow blit: se form dest: se src: se.
].

se@(WindowSceneElement traits) eventLoop
"Temporary event loop"
[
    se exitRequested: False.
    se needRepaint: True.
    inform: '**** Press middle mouse button to exit loop ****'.
    [se exitRequested] whileFalse: 
        [
            se needRepaint ifTrue: [se paintOn: se surface].
            Windows waitForEvent dispatchEvent.
        ].
].



"solidbackgroundmorph doesn't have any children or methods"
se@(SolidBackgroundMorph traits) paintOn: surface@(Surface traits)
[
    surface `>> [
       save. 
       sourceRGB: se color alpha: se alpha.
       rectangle: se. 
       fill.
       restore].

].


"I'm defining this so other classes can just focus on changing this...
e.g. alignment panes would ensure the positions are right, etc."
m@(Morph traits) paintChildrenOn: surface@(Surface traits)
[
  m children do: [|:child| surface ensurePaint: [surface rectangle: child.
                                                 surface clip.
                                                 surface translate: child region origin.
                                                 child paintOn: surface]].
].

m@(Morph traits) paintMyselfOn: surface@(Surface traits)
[
  surface sourceRGB: m theme backgroundColor alpha: m theme backgroundAlpha.
  surface rectangle: m.
  surface fill.
].

"the key here is we assume we're already cliped and someone is saving and restoring
context around this call"
m@(Morph traits) paintOn: surface@(Surface traits)
[
  m paintMyselfOn: surface.
  m paintChildrenOn: surface.

].

"by default pass all the events down"
m@(Morph traits) handle: input@(Event traits)
[
  m children reverseDo: [|:child| (child handle: input) ifNotNilDo: [|:handler| ^ handler]].
  m handleMyself: input
].

"re-adjust mouse input to give local coordinates"
m@(Morph traits) handle: input@(MouseEvent traits)
[
  "(input is: MouseMotionEvent) ifTrue: [^ False]."
  m children reverseDo: [|:child| 
                         ((Rectangle origin: child absolutePosition extent: child region extent)
                             contains: input position) ifTrue: [^ (child handle: input)]].

  m handleMyself: input
].

m@(Morph traits) handleMyself: input@(Event traits)
[
  m
].

m@(Morph traits) handle: input@(RequestFocusEvent traits)
[
  m activeConductor ifNotNilDo: [|:hand| hand setFocus: input source].
  ^ m
].

m@(Morph traits) handle: input@(DropFocusEvent traits)
[
  m activeConductor ifNotNilDo: [|:hand| hand setFocus: Nil].
  ^ m
].


m@(Morph traits) handleMyself: input@(LeftMouseButtonPressEvent traits)
[
  m canDrag ifTrue: [m startDragging: input position].
  m requestFocus. "necessary to receive a click event"
  m
].

m@(Morph traits) handleMyself: input@(LeftMouseButtonReleaseEvent traits)
[
  m canDrag ifTrue: [m stopDragging: input position].
  m dropFocus.
  m
].

m@(Morph traits) handleMyself: input@(MouseMotionEvent traits)
[
  m dragging ifTrue: [m region: (Rectangle origin: input position + m dragOffset extent: m region extent). m repaint].
  m
].


m@(Morph traits) addChild: child@(SceneElement traits)
[
  m children addLast: child.
  child parent: m.
  child
].


m@(LabelMorph traits) paintMyselfOn: surface@(Surface traits)
[
  surface sourceRGB: m theme labelColor alpha: m theme labelAlpha.
  surface rectangle: (Rectangle origin: 0 , 0 extent: m width , m height). surface fill.
  surface sourceRGB: m theme foregroundColor alpha: m theme foregroundAlpha.
  surface rectangle: (Rectangle origin: 0 , 0 extent: m width , m height). surface stroke.
  surface fontSize: m fontSize.
  surface moveTo: 10 , (m height // 2).
  surface sourceRGB: m theme textColor alpha: m theme textAlpha.
  surface showText: m text.
].

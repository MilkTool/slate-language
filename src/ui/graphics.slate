lobby ensureNamespace: #Graphics &delegate: True.


Graphics define: #Position &parents: {Cloneable} &slots: {}.
Graphics define: #Surface &parents: {Cloneable}.


"holds properties"
Graphics define: #Theme &parents: {Cloneable} &slots: {
  #backgroundColor -> Colors DarkSlateGray. #backgroundAlpha -> 1.0.
  #foregroundColor -> Colors PeachPuff. #foregroundAlpha -> 1.0.
  #textColor -> Colors SpringGreen. #textAlpha -> 1.0.
  #labelColor -> Colors Gray. #labelAlpha -> 1.0.

}.


"This will be sort of an abstract base class. Useful for understanding
the minimum of functions that need to be defined for morphs."

Graphics define: #SceneElement &parents: {Cloneable} &slots: {

  #parent -> Nil.
  #position -> Nil.
}.

"this is the top level 'world' morph in a scene"

Graphics define: #WindowSceneElement &parents: {SceneElement} &slots: {
#exitRequested -> False.
#surface -> Nil.
#form -> Nil.
#needRepaint -> True.
#child -> Nil.
#osWindow -> Nil.
}.


"a default theme"
Graphics define: #BasicTheme &parents: {Theme}.


"a morph that can't do anything besides paint a solid color"
Graphics define: #SolidBackgroundMorph &parents: {SceneElement} &slots: {#color. #alpha -> 1}.

"this is the main morph class that can hold children and has a theme"
Graphics define: #Morph &parents: {SceneElement}
  &slots: {#theme -> BasicTheme new. #children -> ExtensibleArray new. #childWithFocus -> Nil}.

Graphics define: #LabelMorph &parents: {Morph} &slots: {#text -> ''. #fontSize -> 14}.





" --- Methods --- "

m@(Morph traits) new
[
  m cloneSettingSlots: #(theme children childWithFocus) to: {m theme. ExtensibleArray new. Nil}
].


wse@(WindowSceneElement traits) width: width height: height
[ | res |
  res: wse.
  res form: (Form extent: width , height depth: 32). 
  res surface: (FormContext newForm: res form).
  res position: (Rectangle origin: 0, 0 extent: width , height).
  res
].

wse@(WindowSceneElement traits) createWindow
[
  wse osWindow: (Windows Window newWidth: wse width height: wse height sceneElement: wse)
].

wse@(WindowSceneElement traits) handle: input@(InputEvent traits)
[
  "inform: 'child handle: ' ; input printString."
  wse child handle: input.
].


"--- Morph ---"


se@(SceneElement traits) handle: input@(PaintEvent traits) [se paintOn: input window].
se@(SceneElement traits) handle: input@(Event traits) [].
"se@(SceneElement traits) handle: input@(MouseEvent traits) [inform: 'unhandled mouse event'.]."
se@(SceneElement traits) requestFocus [se parent ifNotNilDo: [|:p| p handle: (FocusEvent new `>> [source: se.])]].
se@(SceneElement traits) paintOn: surface@(Surface traits) [].
se@(SceneElement traits) repaint [se parent repaint].
se@(SceneElement traits) x [ se position left].
se@(SceneElement traits) y [ se position top].
se@(SceneElement traits) left [ se position left].
se@(SceneElement traits) top [ se position top].
se@(SceneElement traits) bottom [ se position bottom].
se@(SceneElement traits) right [ se position right].
se@(SceneElement traits) width [ se position width].
se@(SceneElement traits) height [ se position height].
se@(SceneElement traits) topLeft [ se position topLeft].
se@(SceneElement traits) topCenter [ se position topCenter].
se@(SceneElement traits) topRight [ se position topRight].
se@(SceneElement traits) bottomLeft [ se position bottomLeft].
se@(SceneElement traits) bottomCenter [ se position bottomCenter].
se@(SceneElement traits) bottomRight [ se position bottomRight].
se@(SceneElement traits) leftCenter [ se position leftCenter].
se@(SceneElement traits) rightCenter [ se position rightCenter].


surface@(Surface traits) ensurePaint: block
[

  [surface save. block do. surface restore.]
    on: Error 
    do: [|:error| surface `>> [restore.
                      sourceRGB: Colors Red.
                      moveTo: 0 , 0. showText: error printString.
                      ]].
].


se@(WindowSceneElement traits) repaint
[
  se needRepaint: True.
].

se@(WindowSceneElement traits) paintOn: surface@(Surface traits)
[
  se needRepaint: False.
  surface ensurePaint: [surface rectangle: se child.
                        surface clip.
                        surface translate: se child position origin.
                        se child paintOn: surface].
  inform: 'painting...'.
  se osWindow blit: se form dest: se src: se.
].

se@(WindowSceneElement traits) eventLoop
"Temporary event loop"
[
    se exitRequested: False.
    se needRepaint: True.
    inform: '**** Press middle mouse button to exit loop ****'.
    [se exitRequested] whileFalse: 
        [
            se needRepaint ifTrue: [se paintOn: se surface].
            Windows waitForEvent dispatchEvent.
        ].
].



"solidbackgroundmorph doesn't have any children or methods"
se@(SolidBackgroundMorph traits) paintOn: surface@(Surface traits)
[
    surface `>> [
       save. 
       sourceRGB: se color alpha: se alpha.
       rectangle: se. 
       fill.
       restore].

].

"I'm defining this so other classes can just focus on changing this...
e.g. alignment panes would ensure the positions are right, etc."
m@(Morph traits) paintChildrenOn: surface@(Surface traits)
[
  m children do: [|:child| surface ensurePaint: [surface rectangle: child.
                                                 surface clip.
                                                 surface translate: child position origin.
                                                 child paintOn: surface]].
].

m@(Morph traits) paintMyselfOn: surface@(Surface traits)
[
].

"the key here is we assume we're already cliped and someone is saving and restoring
context around this call"
m@(Morph traits) paintOn: surface@(Surface traits)
[
  surface sourceRGB: m theme backgroundColor alpha: m theme backgroundAlpha.
  surface rectangle: m.
  surface fill.
  m paintMyselfOn: surface.
  m paintChildrenOn: surface.

].

"by default pass all the events down"
m@(Morph traits) handle: input@(Event traits)
[
  m children reverseDo: [|:child| child handle: input].
].

m@(Morph traits) handle: input@(FocusEvent traits)
[
  m childWithFocus: input source.
].

input@(MouseEvent traits) offset: m@(Morph traits)
[ |off|
  off: input copy.
  off position: off position - m position origin.
  off
].

m@(Morph traits) handle: input@(MouseEvent traits)
[
  (input is: MouseMotionEvent) ifTrue: [^ False].
  m children reverseDo: [|:child| 
                         (child position contains: input position) ifTrue: [^ (child handle: (input offset: child))]].
].

m@(Morph traits) handle: input@(KeyboardEvent traits)
[
  m childWithFocus ifNotNilDo: [ |:child| child handle: input].
].


m@(Morph traits) addChild: child@(SceneElement traits)
[
  m children addLast: child.
  child parent: m.
  child
].


m@(LabelMorph traits) paintMyselfOn: surface@(Surface traits)
[
  inform: 'painting ' ; m printString.
  surface sourceRGB: m theme labelColor alpha: m theme labelAlpha.
  surface rectangle: (Rectangle origin: 0 , 0 extent: m width , m height). surface fill.
  surface sourceRGB: m theme foregroundColor alpha: m theme foregroundAlpha.
  surface rectangle: (Rectangle origin: 0 , 0 extent: m width , m height). surface stroke.
  surface fontSize: m fontSize.
  surface moveTo: 10 , (m height // 2).
  surface sourceRGB: m theme textColor alpha: m theme textAlpha.
  surface showText: m text.
].

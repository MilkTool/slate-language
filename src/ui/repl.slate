Graphics define: #ReplMorph &parents: {WindowMorph} &slots: {#promptMorph. #displayMorph}.

m@(ReplMorph traits) newWithParent: parent &x: x &y: y &width: width &height: height
[| repl |
  repl := m new.
  x `defaultsTo: 0.
  y `defaultsTo: 0.
  width `defaultsTo: 320.
  height `defaultsTo: 240.
  repl percentages := {80. 20}.
  repl title := 'Repl'.
  repl vertical := True.
  repl promptMorph := LineEditorMorph new.
  repl displayMorph := LineEditorMorph new.
  repl children := {repl displayMorph. repl promptMorph}.
  repl region := Rectangle origin: x <> y extent: width <> height.
  parent addChild: repl.
  repl pack.
  it@(LineEditorInputTranslator traits) handle: e@(KeyboardReleaseEvent traits) on: m@(repl promptMorph)
  [
    `conditions: (
      "alt-d doit"
      [e key = 100 /\ [e isAltOnly]]
        -> [| result parser expr string |
            string := '' concatenateAll: (m editor lines collect: #contents `er) &separator: m editor lineDelimeter.
            parser := Syntax Parser newOn: string.
            [[expr := parser next.
              result := expr evaluateIn: lobby.
              m parent displayMorph editor lines add: result printString.
              parser isAtEnd not] on: Stream Exhaustion do: [False]] whileTrue.
            m parent repaint.
            m editor reset].
      "m-/ complete"
      "e key = 47 /\ [e modifiers = 8]"
      "tab complete"
      [e key = 9]
        -> [| string index completion parser expr result |
            string := m editor textOnLineBefore:  m editor cursor.
            index := string lastIndexOf: {$\s} ifAbsent: [string size].
            string := string first: index.
            completion := string allButFirst: index.
            parser := Syntax Parser newOn: string.
            [expr := parser next.
             result := (expr evaluateIn: lobby) completeSelectorFrom: ''.
             m parent displayMorph editor lines add: result printString.
             m parent repaint] on: Error do: [| :e | ^ Nil]]
    ) otherwise: [resend]
  ].

  repl
].

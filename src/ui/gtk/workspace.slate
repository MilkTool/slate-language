Gtk define: #Workspace &parents: {Cloneable} &slots: { #fileName. #codeView. #codeBuffer. #view. #namespace. #originalText. #modifications }.
Gtk Workspace traits atSlotNamed: #printName put: 'Gtk Workspace'. 

"FIXME: modifications are held by saving the entire text into the modifications array instead of just the modified text"

w@(Gtk Workspace traits) new &fileName: fileName [
	| workspace |
		
	workspace: w clone.
	workspace fileName: fileName.
	workspace buildView.
	workspace namespace: lobby newSubSpace.
	workspace
].

w@(Gtk Workspace traits) buildMenuBar [
	| menuBar menu menuItem |
	menuBar: Gtk MenuBar new.
	menu: Gtk Menu new.
	
	menuItem: (Gtk MenuItem newWithMnemonic: '_New').
	menuItem when: #activate send: #newWorkspace: to: w.
	menu append: menuItem.
	
	menuItem: (Gtk MenuItem newWithMnemonic: '_Open...').
	menuItem when: #activate send: #openFile: to: w.
	menu append: menuItem.
	
	menuItem: (Gtk MenuItem newWithMnemonic: '_Save').
	menuItem when: #activate send: #saveFile: to: w.
	menu append: menuItem.
	
	menuItem: (Gtk MenuItem newWithMnemonic: 'S_ave and compile').
	menuItem when: #activate send: #saveFile: to: w.
	menu append: menuItem.
	
	menuItem: (Gtk MenuItem newWithMnemonic: 'Sa_ve as...').
	menuItem when: #activate send: #saveFileAs: to: w.
	menu append: menuItem.
	
	menuItem: (Gtk MenuItem newWithMnemonic: '_Reload').
	menuItem when: #activate send: #reloadFile: to: w.
	menu append: menuItem.
	
	menuItem: (Gtk MenuItem newWithMnemonic: '_Print').
	menuItem when: #activate send: #printFile: to: w.
	menu append: menuItem.
	
	menuItem: (Gtk MenuItem newWithMnemonic: '_Close').
	menuItem when: #activate send: #closeWorkspace: to: w.
	menu append: menuItem.
	
	menuBar append: (menu createMenuItem: '_File').
	menu: Gtk Menu new.
	
	menuItem: (Gtk MenuItem newWithMnemonic: '_Do it').
	menuItem when: #activate send: #evaluateSelected: to: w.
	menu append: menuItem.
	
	menuItem: (Gtk MenuItem newWithMnemonic: '_Print it').
	menuItem when: #activate send: #printSelected: to: w.
	menu append: menuItem.
	
	menuItem: (Gtk MenuItem newWithMnemonic: '_Inspect it').
	menuItem when: #activate send: #inspectSelected: to: w.
	menu append: menuItem.
	
	menuBar append: (menu createMenuItem: '_Code').
	menu: Gtk Menu new.
	menu append: (Gtk MenuItem newWithMnemonic: '_Cut').
	menu append: (Gtk MenuItem newWithMnemonic: 'C_opy').
	menu append: (Gtk MenuItem newWithMnemonic: '_Paste').
	menuBar append: (menu createMenuItem: '_Edit').
	menuBar
].

w@(Gtk Workspace traits) newWorkspace: _ [
	Gtk Workspace new show
].

w@(Gtk Workspace traits) buildToolBar [
	| toolBar toolButton |

	toolBar: Gtk Toolbar new.
	toolButton: (Gtk ToolButton newFromStockID: 'gtk-execute').
	toolButton when: #clicked send: #evaluateSelected: to: w.
	toolBar insert: toolButton.
	
	toolButton: (Gtk ToolButton newFromStockID: 'gtk-print').
	toolButton when: #clicked send: #printSelected: to: w.
	toolBar insert: toolButton.
	
	toolButton: (Gtk ToolButton newFromStockID: 'gtk-find').
	toolButton when: #clicked send: #inspectSelected: to: w.
	toolBar insert: toolButton.
	
	toolBar
].

w@(Gtk Workspace traits) buildCodeView [
	w codeBuffer: Gtk TextBuffer new.
	w codeView: (Gtk TextView newWithBuffer: w codeBuffer).
"	w codeView wrapMode: Gtk WrapMode WordChar."
	w codeBuffer when: #changed do: [ | :buffer |
		w modifications size <= 2 ifTrue: [ w changeTitle ].
		w modifications add: buffer text.
	].
	w resetModifications.
	Gtk ScrolledWindow newWithChild: w codeView
].

w@(Gtk Workspace traits) loadCodeView [
	| file text |
	w fileName ifNil: [ ^ Nil ].
	file: (File newNamed: w fileName).
	file exists ifFalse: [
		"FIXME: Message dialog"
		^ Nil.
	].
	text: (file sessionDo: [| :f | f reader next: file size ]).
	w codeBuffer text: text.
	w resetModifications.
].

w@(Gtk Workspace traits) resetModifications [
	w modifications: ExtensibleArray new.
	w modifications add: w codeBuffer text.
	w changeTitle.
].

w@(Gtk Workspace traits) saveFileAs: _ &ifOk: block [
	| dialog |
	dialog: (Gtk FileChooserDialog newSave &title: 'Save Workspace as: ').
	dialog addButton: #gtk-ok responseId: Gtk ResponseType Ok.
	dialog addButton: #gtk-cancel responseId: Gtk ResponseType Cancel.
	w fileName ifNotNil: [ dialog fileName: w fileName ].
	dialog when: #response do: [ | :dialog :answer |
		answer = Gtk ResponseType Ok ifTrue: [
			| file |
			w fileName: dialog fileName.
			file: (File newNamed: w fileName &mode: File CreateWrite).
			file sessionDo: [| :f | f writer nextPutAll: w codeBuffer text ].
			block ifNotNil: [ block do ].
			w resetModifications.
		].
		dialog destroy.
	].
	dialog show
].

w@(Gtk Workspace traits) saveFile: view &ifOk: block [
	| file text |
	w fileName 
		ifNil: [ w saveFileAs: view &ifOk: block. ^ Nil ]
		ifNotNil: [ 
			file: (File newNamed: w fileName).
			file sessionDo: [| :f | f writer nextPutAll: w codeBuffer text ].
		].
	w resetModifications.
].

w@(Gtk Workspace traits) openFile: _ [
	w ifOkToDiscardDo: [
		| dialog |
		dialog: (Gtk FileChooserDialog newOpen &title: 'Open Workspace: ').
		dialog addButton: #gtk-ok responseId: Gtk ResponseType Ok.
		dialog addButton: #gtk-cancel responseId: Gtk ResponseType Cancel.
		dialog when: #response do: [ | :dialog :answer |
			answer = Gtk ResponseType Ok ifTrue: [ 
				w fileName: dialog fileName.
				w loadCodeView
			].
			dialog destroy.
		].
		dialog show
	]
].

w@(Gtk Workspace traits) show [
	w view showAll.
	w
].

w@(Gtk Workspace traits) destroy: _ [
	w view destroy.
	w codeBuffer: Nil.
	w view: Nil.
	w namespace: Nil.
].

w@(Gtk Workspace traits) buildView [
	| vBox |
	
	w view: Gtk Window newTopLevel.
	w view when: #destroy send: #destroy: to: w.
	w view when: #delete-event send: #onWindow:event: to: w.
	w view defaultSizeWidth: 640 height: 480.
	vBox: Gtk VBox new.
	vBox packStart: (w buildMenuBar) &expand: False.
	vBox packStart: (w buildToolBar) &expand: False.
	vBox packStart: (w buildCodeView).
	vBox packStart: (Gtk Statusbar new) &expand: False.
	w view add: vBox.
	w
].

w@(Gtk Workspace traits) ifOkToDiscardDo: aBlock [
	w modifications size > 1 ifFalse: [
		| dialog vBox hBox |
		dialog: (Gtk Dialog
			newWithFlags: Gtk DialogFlags Modal
			&title: 'Workspace warning' ).
		vBox: Gtk VBox new.
		vBox packStart: (Gtk Label new &text: 'Workspace ' ; w composedFileName ; ' have been modified').
		vBox packStart: (Gtk Label new &text: 'Do you want to save or discard changes?').
		hBox: Gtk HBox new.
		hBox packStart: (Gtk Image newFromStockId: #gtk-dialog-warning size: Gtk IconSize Dialog).
		hBox packStart: vBox.
		dialog vBox packStart: hBox.
		dialog addButton: #gtk-save responseId: Gtk ResponseType Accept.
		dialog addButton: #gtk-discard responseId: Gtk ResponseType Reject.
		dialog addButton: #gtk-cancel responseId: Gtk ResponseType Cancel.
		dialog when: #response do: [ | :dialog :answer |
			dialog destroy.
			answer caseOf: {
				Gtk ResponseType Accept -> [ w saveFile: w view &ifOk: aBlock ].
				Gtk ResponseType Reject -> aBlock.
			}
		].
		dialog showAll.
		^ Nil.
	].
	aBlock do.
].

w@(Gtk Workspace traits) onWindow: view event: deleteEvent [
	w ifOkToDiscardDo: [ view destroy ].
].

w@(Gtk Workspace traits) composedFileName [
	w fileName ifNil: [ 'unnamed.slate' ] ifNotNil: [ w fileName ]
].

w@(Gtk Workspace traits) changeTitle [
	| title |
	title: w composedFileName.
	w modifications size > 1 ifTrue: [ title: title ; ' [modified]' ].
	title: title ; ' - Workspace'.
	w view title: title.
].

w@(Gtk Workspace traits) selectedTextOrCurrentLine [
	| selection |

	selection: w codeBuffer selection.
	selection ifNil: [
		| iter |
		iter: (w codeBuffer iterAtMark: w codeBuffer insertMark).
		iter line: iter line.
		w codeBuffer moveMarkNamed: 'insert' to: iter.
		iter forwardToLineEnd.
		w codeBuffer moveMarkNamed: 'selection_bound' to: iter.
		selection: w codeBuffer selection.
	].
	selection
		ifNil: [ '' ]
		ifNotNil: [ w codeBuffer textFrom: selection first to: selection last ]
].

w@(Gtk Workspace traits) evaluateSelected [
	| selection parser result |

	selection: w selectedTextOrCurrentLine.
	parser: (Syntax Parser newOn: selection reader).
 	[ parser isAtEnd ] whileFalse: [	
    	  result: (parser next evaluateIn: w namespace)
	].
	result
].

w@(Gtk Workspace traits) evaluateSelected: _ [
	w evaluateSelected.
].

w@(Gtk Workspace traits) printSelected: _ [
	w display: w evaluateSelected printString.
].

w@(Gtk Workspace traits) inspectSelected: _ [
	(Gtk Inspector newFor: w evaluateSelected) show.
].

w@(Gtk Workspace traits) display: aString [
	| iter offset |

	iter: (w codeBuffer iterAtMark: w codeBuffer selectionBound).
	w codeBuffer moveMarkNamed: 'insert' to: iter.
	offset: iter offset.
	w codeBuffer insertAtCursor: ( ' '; aString ).
	iter: (w codeBuffer iterAtOffset: offset).
	w codeBuffer moveMarkNamed: 'selection_bound' to: iter.
].

w@(Gtk Workspace traits) goToLineNumber: lineNumber [
	| iter offset |

	iter: (w codeBuffer iterAtLine: lineNumber).
	w codeView scrollTo: iter &useAlign: True.
].


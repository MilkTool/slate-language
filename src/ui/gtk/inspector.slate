Gtk define: #Inspector &parents: {Cloneable} &slots: { #inspectedVar. #view. #traitsView. #selectedTrait. #traitMethodView". #delegatesView". #methodsView }.
Gtk Inspector traits atSlotNamed: #printName put: 'Gtk Inspector'. 

i@(Gtk Inspector traits) newFor: var [
        | inspector |
                        
        inspector: i new.
        inspector inspectedVar: var.
        inspector buildView.
        inspector
].

i@(Gtk Inspector traits) show [
        i view showAll.
        i
].

i@(Gtk Inspector traits) destroy: _ [
        i inspectedVar: Nil.
        i view: Nil.
        i traitsView: Nil.
        i traitMethodView: Nil.
"       i delegatesView: Nil."
].

i@(Gtk Inspector traits) buildView [
        | notebook |
        
        i view: Gtk Window newTopLevel.
        i view when: #destroy send: #destroy: to: i.
        i view title: 'Inspecting '; i inspectedVar printName asAn.
        i view defaultSizeWidth: 300 height: 300.
        notebook: Gtk Notebook new.
        notebook appendPage: i buildDataView label: 'Data'.
        (i inspectedVar is: Dictionary) 
                ifTrue: [ notebook appendPage: i buildDictionaryDataView label: 'Mappings' ]
                ifFalse: [
                        (i inspectedVar is: Sequence) ifTrue: [ notebook appendPage: i buildSequencedDataView label: 'Sequence' ]
                ].
        i inspectedVar slotNames isEmpty ifFalse: [
                notebook appendPage: i buildSlotsView label: 'Slots'.
        ].
"       notebook appendPage: i buildDelegatesView label: 'Delegates'."
        notebook appendPage: i buildMethodsView label: 'Methods'.
        notebook appendPage: i buildTraitsView label: 'Traits'.
        i view add: notebook.
        i
].

i@(Gtk Inspector traits) buildDataView [
        | dataView |
        dataView: (Gtk TextView new).
        dataView wrapMode: Gtk WrapMode WordChar.
        i loadDataIn: dataView buffer.
        Gtk ScrolledWindow newWithChild: dataView
].

i@(Gtk Inspector traits) loadDataIn: buffer [
        buffer clear.
        i inspectedVar ifNotNil: [
                | text |
                text: ([ i inspectedVar printString ] on: SeriousCondition do: [ | :c | c exit: '' ]).
                buffer text: text.
        ].
].

i@(Gtk Inspector traits) buildSlotsView [
        | cell col slotsView |
        
        slotsView: (Gtk TreeView newWithModel: (Gtk TreeStore newWithTypes: {
                GLib FundamentalType String. 
                GLib FundamentalType String. 
                GLib FundamentalType String. 
        })).
        
        col: Gtk TreeViewColumn new.
        col title: 'Slots'.
        cell: Gtk CellRendererPixbuf new.
        col packStart: cell &expand: False.
        col addAttribute: #stock-id column: 0 on: cell.
        cell: Gtk CellRendererText new.
        col     packStart: cell.
        col addAttributes: { #text -> 1 } on: cell.     
        slotsView appendColumn: col.
        
        col: Gtk TreeViewColumn new.
        col title: 'Values'.
        cell: Gtk CellRendererText new.
        col     packStart: cell.
        col addAttributes: { #text -> 2 } on: cell.     
        slotsView appendColumn: col.
        
        slotsView gridLines: Gtk TreeViewGridLines Both.
        i loadSlotsIn: slotsView model.
        slotsView when: #row-activated send: #onSlotsView:rowActivated:column: to: i.
        Gtk ScrolledWindow newWithChild: slotsView      
].

i@(Gtk Inspector traits) onSlotsView: treeView rowActivated: path column: column [
        | iter index |
        iter: treeView selection selected.
        index: ((treeView model stringFromIter: iter) as: Integer).
        i inspectedVar ifNotNil: [
                | slotName |
                slotName: (i inspectedVar slotNames "sort" at: index).
                (Gtk Inspector newFor: (i inspectedVar atSlotNamed: slotName) ) show.
        ].      
].

i@(Gtk Inspector traits) loadSlotsIn: model [
        model clear.
        i inspectedVar ifNotNil: [
                i inspectedVar slotNames "sort" do: [
                        | :each text |
                        text: ([ (i inspectedVar atSlotNamed: each) printString ] on: SeriousCondition do: [ | :c | c exit: '' ]).
                        model append: (Nil -> { 'gtk-execute'. each printString. text })
                ].
        ].
].

i@(Gtk Inspector traits) buildSequencedDataView [
        | cell col dataView |
        
        dataView: (Gtk TreeView newWithModel: (Gtk TreeStore newWithTypes: {
                GLib FundamentalType String. 
                GLib FundamentalType String. 
                GLib FundamentalType String. 
        })).
        
        col: Gtk TreeViewColumn new.
        col title: 'Indexes'.
        cell: Gtk CellRendererPixbuf new.
        col packStart: cell &expand: False.
        col addAttribute: #stock-id column: 0 on: cell.
        cell: Gtk CellRendererText new.
        col     packStart: cell.
        col addAttributes: { #text -> 1 } on: cell.     
        dataView appendColumn: col.
        
        col: Gtk TreeViewColumn new.
        col title: 'Values'.
        cell: Gtk CellRendererText new.
        col     packStart: cell.
        col addAttributes: { #text -> 2 } on: cell.     
        dataView appendColumn: col.
        
        dataView gridLines: Gtk TreeViewGridLines Both.
        i loadSequencedDataIn: dataView model.
        dataView when: #row-activated send: #onSequencedDataView:rowActivated:column: to: i.
        Gtk ScrolledWindow newWithChild: dataView       
].

i@(Gtk Inspector traits) onSequencedDataView: dataView rowActivated: path column: column [
        | iter index data |
        iter: dataView selection selected.
        index: ((dataView model stringFromIter: iter) as: Integer).
        i inspectedVar ifNotNil: [
                (Gtk Inspector newFor: (i inspectedVar at: index) ) show.
        ].      
].

i@(Gtk Inspector traits) loadSequencedDataIn: model [
        model clear.
        i inspectedVar ifNotNil: [
                | size |
                size: i inspectedVar size.
                size > 100 ifTrue: [ size: 100 ].
                0 below: size do: [ | :index | model append: (Nil -> { 'gtk-execute'. index printString. (i inspectedVar at: index) printString }) ].
        ].
].

i@(Gtk Inspector traits) buildDictionaryDataView [
        | cell col dataView |
        
        dataView: (Gtk TreeView newWithModel: (Gtk TreeStore newWithTypes: {
                GLib FundamentalType String. 
                GLib FundamentalType String. 
                GLib FundamentalType String. 
        })).
        
        col: Gtk TreeViewColumn new.
        col title: 'Keys'.
        cell: Gtk CellRendererPixbuf new.
        col packStart: cell &expand: False.
        col addAttribute: #stock-id column: 0 on: cell.
        cell: Gtk CellRendererText new.
        col     packStart: cell.
        col addAttributes: { #text -> 1 } on: cell.     
        dataView appendColumn: col.
        
        col: Gtk TreeViewColumn new.
        col title: 'Values'.
        cell: Gtk CellRendererText new.
        col     packStart: cell.
        col addAttributes: { #text -> 2 } on: cell.     
        dataView appendColumn: col.
        
        dataView gridLines: Gtk TreeViewGridLines Both.
        i loadDictionaryDataIn: dataView model.
        dataView when: #row-activated send: #onDictionaryDataView:rowActivated:column: to: i.
        Gtk ScrolledWindow newWithChild: dataView       
].

i@(Gtk Inspector traits) loadDictionaryDataIn: model [
        model clear.
        i inspectedVar ifNotNil: [
                i inspectedVar keysAndValuesDo: [ 
                        | :key :value |
                        model append: (Nil -> { 'gtk-execute'. key printString. value printString }).
                ].
        ].
].

i@(Gtk Inspector traits) onDictionaryDataView: dataView rowActivated: path column: column [
        | iter index key |
        iter: dataView selection selected.
        key: (dataView model at: iter column: 1).
        key first = $# ifTrue: [ key: key allButFirst ].
        i inspectedVar ifNotNil: [
                (Gtk Inspector newFor: (i inspectedVar at: key intern ifAbsent: [ Nil ]) ) show.
        ].
].

i@(Gtk Inspector traits) buildTraitsView [
        Gtk HPaned new
                first: (i buildTraitsListView sizeRequest: 150 <> -1 )
                second: (i buildTraitsMethodsView sizeRequest: 150 <> -1 )
].

i@(Gtk Inspector traits) buildTraitsListView [
        | cell col |
        
        i traitsView: (Gtk TreeView newWithModel: (Gtk TreeStore newWithTypes: {
                GLib FundamentalType String. 
                GLib FundamentalType String. 
                GLib FundamentalType String. 
        })).
        
        col: Gtk TreeViewColumn new.
        col title: 'Traits'.
        cell: Gtk CellRendererPixbuf new.
        col packStart: cell &expand: False.
        col addAttribute: #stock-id column: 0 on: cell.
        cell: Gtk CellRendererText new.
        col     packStart: cell.
        col addAttributes: { #text -> 1 } on: cell.     
        i traitsView appendColumn: col.
        
        i traitsView gridLines: Gtk TreeViewGridLines Both.
        i traitsView selection when: #changed send: #onTraitsListViewChanged: to: i.
        i loadTraits.
        Gtk ScrolledWindow newWithChild: i traitsView   
].

i@(Gtk Inspector traits) loadTraits [
        | model |
        model: i traitsView model.
        model clear.
        i inspectedVar ifNotNil: [
                i inspectedVar orderTraits do: [ 
                        | :each |
                        model append: (Nil -> { 'gtk-execute'. each printName })
                ].
        ].
].

i@(Gtk Inspector traits) onTraitsListViewChanged: _ [
        | iter |
        i traitsView ifNotNil: [
                iter: i traitsView selection selected.
                iter ifNil: [
                        i selectedTrait: Nil.
                        i loadTraitsMethods.
                ]
                ifNotNil: [
                        | index newSelectedTrait |
                        index: ((i traitsView model stringFromIter: iter) as: Integer).
                        newSelectedTrait: (i inspectedVar orderTraits at: index).
                        (newSelectedTrait = i selectedTrait)
                                ifFalse: [ 
                                        i selectedTrait: newSelectedTrait.
                                        i loadTraitsMethods.
                                ]
                ]
        ]
].

i@(Gtk Inspector traits) buildTraitsMethodsView [
        | cell col |
        
        i traitMethodView: (Gtk TreeView newWithModel: (Gtk TreeStore newWithTypes: {
                GLib FundamentalType String. 
                GLib FundamentalType String. 
                GLib FundamentalType String. 
        })).
        
        col: Gtk TreeViewColumn new.
        col title: 'Methods'.
        cell: Gtk CellRendererPixbuf new.
        col packStart: cell &expand: False.
        col addAttribute: #stock-id column: 0 on: cell.
        cell: Gtk CellRendererText new.
        col     packStart: cell.
        col addAttributes: { #text -> 1 } on: cell.     
        i traitMethodView appendColumn: col.
        
        i traitMethodView gridLines: Gtk TreeViewGridLines Both.
        i traitMethodView when: #row-activated send: #onTraitsMethodsView:rowActivated:column: to: i.
        Gtk ScrolledWindow newWithChild: i traitMethodView
].

i@(Gtk Inspector traits) onTraitsMethodsView: traitMethodView rowActivated: path column: column [
        | iter index selectedMethod |
        i selectedTrait ifNil: [ ^ Nil ].
        iter: traitMethodView selection selected.
        iter ifNil: [ ^ Nil ].
        index: ((traitMethodView model stringFromIter: iter) as: Integer).
        selectedMethod: (i selectedTrait methods at: index).
        (selectedMethod is: CompiledMethod) ifFalse: [ ^ Nil ].
        selectedMethod sourceTree ifNil: [ ^ Nil ].
        (selectedMethod sourceTree hasSlotNamed: #source) ifFalse: [^ Nil].
        (selectedMethod sourceTree source hasSlotNamed: #resource) ifTrue: [
                | workspace |
                workspace: (Gtk Workspace new &fileName: (selectedMethod sourceTree source resource locator as: String)).
                workspace goToLineNumber: selectedMethod sourceTree lineNumber.
                workspace show.
        ]
].

i@(Gtk Inspector traits) loadTraitsMethods [
        | model |
        model: i traitMethodView model.
        model clear.
        i selectedTrait ifNotNil: [
                i selectedTrait methods do: [ 
                        | :each |
                        model append: (Nil -> { 'gtk-execute'. each selector })
                ].
        ].
].
"
i@(Gtk Inspector traits) buildDelegatesView [
        | cell col |
        
        i delegatesView: (Gtk TreeView newWithModel: (Gtk TreeStore newWithTypes: {
                GLib FundamentalType String. 
                GLib FundamentalType String. 
                GLib FundamentalType String. 
        })).
        
        col: Gtk TreeViewColumn new.
        col title: 'Delegates'.
        cell: Gtk CellRendererPixbuf new.
        col packStart: cell &expand: False.
        col addAttribute: #stock-id column: 0 on: cell.
        cell: Gtk CellRendererText new.
        col     packStart: cell.
        col addAttributes: { #text -> 1 } on: cell.     
        i delegatesView appendColumn: col.
        
        col: Gtk TreeViewColumn new.
        col title: 'Values'.
        cell: Gtk CellRendererText new.
        col     packStart: cell.
        col addAttributes: { #text -> 2 } on: cell.     
        i delegatesView appendColumn: col.
        
        i delegatesView gridLines: Gtk TreeViewGridLines Both.
        i loadDelegatesIn: i delegatesView model.
        i delegatesView when: #row-activated send: #onDelegatesView:rowActivated:column: to: i.
        Gtk ScrolledWindow newWithChild: i delegatesView
].

i@(Gtk Inspector traits) loadDelegatesIn: model [
        model clear.
        i inspectedVar ifNotNil: [
                i inspectedVar _delegates do: [ 
                        | :each |
                        model append: (Nil -> { 'gtk-execute'. each printName. each printString })
                ].
        ].
].

i@(Gtk Inspector traits) onDelegatesView: treeView rowActivated: path column: column [
        | iter index |
        iter: treeView selection selected.
        index: ((treeView model stringFromIter: iter) as: Integer).
        i inspectedVar ifNotNil: [
                (Gtk Inspector newFor: (i inspectedVar _delegates at: index) ) show.
        ].      
].

"
i@(Gtk Inspector traits) buildMethodsView [
        | cell col |
        
        i methodsView: (Gtk TreeView newWithModel: (Gtk TreeStore newWithTypes: {
                GLib FundamentalType String. 
                GLib FundamentalType String. 
                GLib FundamentalType String. 
        })).
        
        col: Gtk TreeViewColumn new.
        col title: 'Methods'.
        cell: Gtk CellRendererPixbuf new.
        col packStart: cell &expand: False.
        col addAttribute: #stock-id column: 0 on: cell.
        cell: Gtk CellRendererText new.
        col     packStart: cell.
        col addAttributes: { #text -> 1 } on: cell.     
        i methodsView appendColumn: col.
        
        i methodsView gridLines: Gtk TreeViewGridLines Both.
        i loadMethodsIn: i methodsView model.
        i methodsView when: #row-activated send: #onMethodsView:rowActivated:column: to: i.
        Gtk ScrolledWindow newWithChild: i methodsView
].

i@(Gtk Inspector traits) loadMethodsIn: model [
        model clear.
        i inspectedVar ifNotNil: [
                i inspectedVar methods do: [
                        | :each |
                        model append: (Nil -> { 'gtk-execute'. each selector. })
                ].
        ].
].

i@(Gtk Inspector traits) onMethodsView: methodsView rowActivated: path column: column [
        | iter index selectedMethod |
        iter: methodsView selection selected.
        iter ifNil: [ ^ Nil ].
        index: ((methodsView model stringFromIter: iter) as: Integer).
        selectedMethod: (i inspectedVar methods at: index).
        (selectedMethod is: CompiledMethod) ifFalse: [ ^ Nil ].
        selectedMethod sourceTree ifNil: [ ^ Nil ].
        (selectedMethod sourceTree hasSlotNamed: #source) ifFalse: [^ Nil].
        (selectedMethod sourceTree source hasSlotNamed: #resource) ifTrue: [
                | workspace |
                workspace: (Gtk Workspace new &fileName: (selectedMethod sourceTree source resource locator as: String)).
                workspace goToLineNumber: selectedMethod sourceTree lineNumber.
                workspace show.
        ]
].



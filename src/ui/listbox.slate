
"load after graphics.slate"

Graphics define: #ScrollbarMorph &parents: {Morph} &slots: {
  #vertical -> True.
  #minPos -> 0.
  #maxPos -> 100.
  #position -> 0.
  #visibleRange -> 10.
  #minimumBar -> 10.
  #barPosition -> (Rectangle origin: 0 <> 0 corner: 0 <> 0).
}.

m@(ScrollbarMorph traits) new
[
  resend `>> [updateBar. ]
].

m@(ScrollbarMorph traits) percent
[
  m maxPos = m minPos
    ifTrue: [0]
    ifFalse: [m position - m minPos / (m maxPos - m minPos)]
].

m@(ScrollbarMorph traits) rangePercent
[
  m maxPos = m minPos
    ifTrue: [0]
    ifFalse: [m position + m visibleRange - m minPos / (m maxPos - m minPos)]
].

m@(ScrollbarMorph traits) barLength
[m vertical ifTrue: [m height] ifFalse: [m width]].

m@(ScrollbarMorph traits) barWidth
[m vertical ifTrue: [m width] ifFalse: [m height]].

m@(ScrollbarMorph traits) inset [2].

m@(ScrollbarMorph traits) updateBar
[
  m barPosition := Rectangle
    origin: m inset <> ((m percent * m barLength) rounded
                          min: m barLength - m minimumBar)
    corner: m barWidth - m inset <> ((m rangePercent * m barLength) rounded
                                       max: (m percent * m barLength) rounded + m minimumBar).
].

m@(ScrollbarMorph traits) paintMyselfOn: surface@(Surface traits)
[
  surface sourceRGB: m theme scrollbarBackgroundColor alpha: m theme scrollbarBackgroundAlpha.
  surface rectangleObject := m.
  surface fill.
  surface sourceRGB: m theme scrollbarForegroundColor alpha: m theme scrollbarForegroundAlpha.
  surface rectangle := m barPosition.
  surface fill.
].

m@(ScrollbarMorph traits) handleMyself: input@(LeftMouseButtonPressEvent traits)
[
  m requestFocus.
  m dragOffset: "m absolutePosition - input position" m position. "save the value for later for undo? dunno"
  m
].

m@(ScrollbarMorph traits) handleMyself: input@(LeftMouseButtonReleaseEvent traits)
[
  m dropFocus.
  m dragOffset: Nil.
  m
].

m@(ScrollbarMorph traits) slideIncrease
[
  m position := m position + m visibleRange min: m maxPos.
  m updateBar.
  m repaint.
  m
].

m@(ScrollbarMorph traits) slideDecrease
[
  m position := m position - m visibleRange max: m minPos.
  m updateBar.
  m repaint.
  m
].

m@(ScrollbarMorph traits) handleMyself: input@(MouseButtonClickEvent traits)
[| absPos |
 "increment the position"
  absPos := m absolutePosition.
  m vertical ifTrue: [input position y > (absPos y + (m percent * m height) rounded)
                        ifTrue: [m slideIncrease]
                        ifFalse: [m slideDecrease]]
           ifFalse: [input position x > (absPos x + (m percent * m width) rounded)
                       ifTrue: [m slideIncrease]
                       ifFalse: [m slideDecrease]]
].

m@(ScrollbarMorph traits) handleMyself: input@(MouseMotionEvent traits)
[| absPos |
  m dragOffset ifNil: [^ Nil].
  absPos := m absolutePosition.
  m vertical
    ifTrue:
      [input position y > (absPos y + m height) ifTrue:
         [m position := m max. m repaint. ^ m].
       input position y < absPos y ifTrue:
         [m position := m minPos. m repaint. ^ m].
       m position := (input position y - absPos y / m height * (m maxPos - m minPos) + m minPos) rounded.
       m repaint.
       m]
    ifFalse:
      [input position x > (absPos x + m width) ifTrue:
         [m position := m maxPos. m repaint. ^ m].
       input position x < absPos x ifTrue:
         [m position := m minPos. m repaint. ^ m].
       m position := (input position x - absPos x / m width * (m maxPos - m minPos) + m minPos) rounded.
       m repaint.
       m].
  m
].

Graphics define: #ListboxMorph &parents: {Morph}
  &slots: {#items -> ExtensibleArray new.
           #verticalScrollbar -> ScrollbarMorph new.
           #horizontalScrollbar -> (ScrollbarMorph new `>> [vertical := False. ]).
           #selectedItems -> Set new.
           #scrollbarWidth -> 10.
           #printFunction -> Nil.
           #singleSelect -> True.
           #selectionBoxes -> {}.
           }.

m@(ListboxMorph traits) new
[| me |
  me := resend `>> [items := ExtensibleArray new.
                  verticalScrollbar := ScrollbarMorph new.
                  horizontalScrollbar := (ScrollbarMorph new `>> [vertical := False. ]).
                  selectedItems := Set new. ].
  me addChild: me verticalScrollbar.
  me addChild: me horizontalScrollbar.
  me sizeChanged.
  me contentsChanged.
  me
].

"fixme make this called automatically"
m@(ListboxMorph traits) updateScrollbars
[
  m verticalScrollbar region: (Rectangle origin: (m width - m scrollbarWidth) <> 0
                                         extent: m scrollbarWidth <> (m height - m scrollbarWidth)).
  m horizontalScrollbar region: (Rectangle origin: 0 <> (m height - m scrollbarWidth)
                                           extent: m width - (m scrollbarWidth <> m scrollbarWidth)).
  m verticalScrollbar visibleRange: m width // m theme listboxFontSize.
].

m@(ListboxMorph traits) items: list
[
  m atSlotNamed: #items := list.
  m contentsChanged.
  m sizeChanged.
  m
].

m@(ListboxMorph traits) contentsChanged
[| vsb |
  "calculate the visible portion and stuff"
  vsb := m verticalScrollbar.
  vsb maxPos := m items indexLast.
  vsb minPos := 0.
  vsb position := vsb position min: vsb maxPos max: vsb minPos.
  vsb visibleRange := m visibleItems.
].

m@(ListboxMorph traits) sizeChanged
[
  m updateScrollbars
].

m@(ListboxMorph traits) itemSize: item
[
  12
  "fixme: ^ item asMorph height"
].

m@(ListboxMorph traits) visibleRange
[
  m verticalScrollbar `cache position
     below: (m verticalScrollbar position + m verticalScrollbar visibleRange min: m verticalScrollbar maxPos)
     by: 1
].

m@(ListboxMorph traits) paintMyselfOn: surface@(Surface traits)
[| vsb heightOffset |
  surface sourceRGB: m theme listboxColor alpha: m theme listboxAlpha.
  surface rectangleObject := m.
  surface fill.
  surface sourceRGB: m theme foregroundColor alpha: m theme foregroundAlpha.
  surface rectangleObject := m.
  surface stroke.

  surface fontSize := m theme listboxFontSize.

  "fixme only paint items in visible range"
  m selectionBoxes do: [ |:box| surface rectangle := box.
                                surface sourceRGB: m theme selectedColor alpha: m theme selectedAlpha.
                                surface fill].

  heightOffset := 0.
  m visibleRange do:
    [| :itemPos item itemHeight |
       item := m items at: itemPos.
       itemHeight := m itemSize := item.
       surface ensurePaint: [surface moveTo: 5 <> (itemHeight + heightOffset - 2). "text paints from bottom left"
                             surface sourceRGB: m theme textColor alpha: m theme textAlpha.
                             m printFunction
                               ifNil: [surface showText: item printString]
                               ifNotNil: [surface showText: (m printFunction applyWith: item)]].

       heightOffset += itemHeight.
   ].

].

m@(ListboxMorph traits) visibleItems
[| itemCount heightOffset |
  itemCount := 0.
  heightOffset := 0.
  m visibleRange do:
    [| :itemPos item itemHeight |
     item := m items at: itemPos.
     itemHeight := m itemSize := item.
     itemCount += 1.
     (heightOffset += itemHeight) > m height ifTrue: [^ itemCount]].
  itemCount " = range size"
].

m@(ListboxMorph traits) selectionChanged
[ | heightOffset item itemHeight |
  heightOffset := 0.
  m selectionBoxes := ExtensibleArray new &capacity: 10.
  m visibleRange do:
    [| :itemPos |
       item := m items at: itemPos.
       itemHeight := m itemSize := item.
       (m selectedItems identityIncludes: item)
         ifTrue: [m selectionBoxes addLast: (Rectangle origin: 0 <> heightOffset
                                               corner: m width <> (heightOffset + itemHeight))].
       heightOffset += itemHeight.

   ].

].

m@(ListboxMorph traits) selectItem: item
[
  m repaint.
  m singleSelect ifTrue: [m selectedItems clear. m selectedItems add: item]
                 ifFalse: [(m selectedItems includes: item) ifTrue: [m selectedItems remove: item]
                                                            ifFalse: [m selectedItems add: item]].
  m selectionChanged
].

m@(ListboxMorph traits) handleMyself: e@(MouseButtonClickEvent traits)
[| heightOffset item clickPosition relPos|
  relPos := e position - m absolutePosition.
  (m verticalScrollbar region contains: relPos) ifTrue:
    [^ (m verticalScrollbar handle: e)].
  (m horizontalScrollbar region contains: relPos) ifTrue:
    [^ (m horizontalScrollbar handle: e)].
  heightOffset := 0.
  clickPosition := relPos y.
  m visibleRange do:
    [| :itemPos itemHeight |
     item := m items at: itemPos.
     itemHeight := m itemSize := item.
     heightOffset += itemHeight.
     clickPosition < heightOffset ifTrue: [m selectItem: item. ^ m].
     heightOffset > m height ifTrue: [^ Nil]].
  m selectItem: item.
  m
].

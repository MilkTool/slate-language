GLib define: #Object &parents: {GLib Pointer}. 
GLib Object traits atSlotNamed: #printName put: 'GLib Object'. 

_@(GLib Object traits) gType [
	GLib FundamentalType Object
].

o@(GLib Object traits) when: aSignalName do: aBlock [
	| blockID |
	blockID: (Gtk Main registerCallbackBlock: aBlock).
	GLib Lib primitives wrapper_g_object_connect_to_block_id applyTo: { o handle. aSignalName. blockID }.
	o
].

o@(GLib Object traits) when: aSignalName send: selector to: object [
	o when: aSignalName do: [ | :parameters array |
		array: ( {object} ; parameters ). 
		selector sendTo: array ]
].

o@(GLib Object traits) objectFromHandle: aHandle [
	| name nameSpace trait |
	aHandle ifNil: [ warning: 'Handle is null'. ^ Nil ].
	name: (o newWithHandle: aHandle) type name.
	(name beginsWith: 'Gtk')
		ifTrue: [ name: (name allButFirst: 3). nameSpace: Gtk ]
		ifFalse: [
			(name beginsWith: 'G')
				ifTrue: [ name: (name allButFirst: 1). nameSpace: GLib ]
				ifFalse: [ warning: 'Unknown type'. ^ Nil ]
		].
	name: name intern.
	(nameSpace hasSlotNamed: name)
		ifTrue: [ trait: (nameSpace atSlotNamed: name) ]
		ifFalse: [ warning: 'Unknown Trait'. ^ Nil ].
	trait newWithHandle: aHandle
].

o@(GLib Object traits) type [
	GLib Type newWithType: (
		GLib Lib primitives wrapper_g_type_from_instance applyTo: { o handle }
	)
].

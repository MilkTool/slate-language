"FIXME: this is overwritten everytime you make a new generator"
define: #BytesPerWord -> 4.
"The size of a word in bytes on the target platform."
"TODO: Make this an attribute of an accessible target description."

define: #Chunk &slots: {
  #oop
}.

_@(Chunk traits) wordSize [overrideThis].

define: #SlotEntry &slots: {#name. #offset}.

se@(SlotEntry traits) newNamed: name offset: offset
[se clone `>> [name := name. offset := offset. ]].

define: #RoleEntry &slots: {
  #name.
  #rolePositions -> 0.
  #methodDefinition
}.

re@(RoleEntry traits) newNamed: name rolePositions: positions methodDefinition: method
[re clone `>>
   [name := name. rolePositions := positions. methodDefinition := method. ]].

define: #MethodDefinition &slots: {
  #dispatchPositions -> 0.
  #method.
  #slotAccessor
}.

define: #Map &slots: {
  #flags -> 0.
  #representative -> Nil.
  #delegates -> {}.
  #slotCount -> 0.
  #slotTable -> {}.
  #roleTable -> {}
}.

map@(Map traits) addSlotNamed: name at: offset
[
  map slotTable :=
    (map slotTable collect: #clone `er)
    ; {map surroundings SlotEntry newNamed: name offset: offset}.
].

map@(Map traits) addRoleNamed: name at: position dispatching: def
[
  map roleTable doWithIndex:
    [| :role :index |
     role methodDefinition == def
       ifTrue:
         [(map roleTable := map roleTable copy) at: index :=
            (map surroundings RoleEntry
               newNamed: name
               rolePositions: (role rolePositions bitOr: (1 bitShift: position))
               methodDefinition: def).
          ^ False]].
  map roleTable :=
    map roleTable copyWith:
      (map surroundings RoleEntry
         newNamed: name
         rolePositions: (1 bitShift: position)
         methodDefinition: def).
  True
].

define: #Object &parents: {Chunk} &slots: {
  #idHash.
  #bmap -> Map.
  #slotValues -> {}
}.

_@(Object traits) headerWords
[4].

obj@(Object traits) wordSizeSansPayload
[obj headerWords + obj slotValues size].

obj@(Object traits) wordSize
[obj wordSizeSansPayload].

obj@(Object traits) makeSlotNamed: name valued: value
[| index |
  index := obj bmap slotCount.
  obj bmap := obj bmap clone `>>
    [slotCount := index + 1.
     addSlotNamed: name at: obj headerWords + index * obj surroundings BytesPerWord. ].
  obj slotValues := obj slotValues copyWith: value.
  obj
].

obj@(Object traits) slotNamed: name
[
  obj bmap slotTable
    detect: [| :slot | slot name = name]
    ifNone: [obj error: 'Slot missing: ' ; name]
].

obj@(Object traits) setSlot: name to: val
[
  (obj slotNamed: name) ifNotNilDo:
    [| :slot | obj slotValues at: slot offset / obj surroundings BytesPerWord - obj headerWords put: val]
].

obj@(Object traits) getSlot: name
[
  (obj slotNamed: name) ifNotNilDo:
    [| :slot | obj slotValues at: slot offset / obj surroundings BytesPerWord - obj headerWords]
].

obj@(Object traits) addDelegateValued: value
[
  obj bmap := obj bmap clone `>>
    [delegates := obj bmap delegates copyWith: value. ].
  obj
].

obj@(Object traits) addRoleNamed: name at: position dispatching: def
[
  obj bmap addRoleNamed: name at: position dispatching: def
].

method@(Object traits) addMethodNamed: name on: roles
[| def |
  def := method surroundings MethodDefinition new
   `>> [dispatchPositions := 0. method := method. ].
  roles doWithIndex:
    [| :role :index |
     role ifNotNil:
       [def dispatchPositions := def dispatchPositions bitOr: (1 bitShift: index).
        role addRoleNamed: name at: index dispatching: def]].
  "inform: 'Adding method %r roles: %r pos: %r', name, roles, def dispatchPositions."
  def
].

define: #Array &parents: {Object}.

define: #OopArray &parents: {Array} &slots: {
  #elements -> {}
}.

arr@(OopArray traits) wordSize
[arr wordSizeSansPayload + arr elements size].

define: #ByteArray &parents: {Array} &slots: {
  #elements -> imports ByteArray new
}.

arr@(ByteArray traits) byteSize
[
  arr wordSizeSansPayload * arr surroundings BytesPerWord + arr elements size
].

arr@(ByteArray traits) wordSize
[
  arr wordSizeSansPayload + (arr elements size + arr surroundings BytesPerWord - 1 // arr surroundings BytesPerWord)
].

define: #CompiledMethod &parents: {Object}.

define: #Generator &slots: {
  #translations -> IdentityDictionary new.
  #chunks -> ExtensibleArray new.
  #characters -> ({} newSizeOf: imports ASCIIString Character CharacterSet).
  #symbols -> Dictionary new.
  #littleEndian -> True.
  #bytesPerWord -> BytesPerWord.
  #nextHash -> 0.
  #imageSize -> 0.
  #objects -> Dictionary new.
}.

gen@(Generator traits) new &littleEndian &wordSize
[
  littleEndian `defaultsTo: gen littleEndian.
  wordSize `defaultsTo: Platform Current bytesPerWord * 8.
  define: #BytesPerWord -> (wordSize // 8).
  gen clone `>>
    [objects := gen objects new.
     translations := gen translations new.
     chunks := gen chunks new.
     characters := gen characters copy.
     symbols := gen symbols new.
     bytesPerWord := wordSize // 8.
     littleEndian := littleEndian. ]
].

gen@(Generator traits) generateImageBooting: method withPrims: prims
"Generates the primary image objects such that the supplied CompiledMethod
will be interpreted immediately upon loading the image."
[
  inform: 'Generating kernel'.
  gen generateKernel.
  inform: 'Generating utilities'.
  gen generateUtilities.
  inform: 'Generating kernel accessors'.
  gen generateKernelAccessors.
  inform: 'Generating interpreter'.
  gen generateInterpreterBooting: method.
  inform: 'Generating bootstrap namespace'.
  gen generateBootstrapNamespace.
  inform: 'Generating prims'.
  prims do: [| :assoc | gen generatePrimitive: assoc value at: assoc key].
  inform: 'Generating maps'.
  gen generateMaps.
  inform: 'Generating linkage'.
  gen generateLinkage
].

gen@(Generator traits) objectsAt: name
[gen objects at: name].

gen@(Generator traits) objectsAt: name put: obj
[
  inform: ' Adding object %s', name.
  gen objects at: name put: obj
].

gen@(Generator traits) bytesAt: i in: arr put: val numBytes: bytes
[
  0 below: bytes do:
    [| :index |
     arr elements at: i + index put:
       (val byteShift: (gen littleEndian ifTrue: [0 - index]
                                         ifFalse: [0 - bytes + index])) intoByte]
].

gen@(Generator traits) shortAt: i in: arr put: val
[
  gen bytesAt: i in: arr put: val numBytes: 2
].

gen@(Generator traits) wordAt: i in: arr put: val
[
  gen bytesAt: i in: arr put: val numBytes: gen bytesPerWord
].

gen@(Generator traits) capacityForTable: table
[
  (table size * 5 // 4) leastGreaterPowerOfTwo
].

gen@(Generator traits) generateSlotTableFor: map
[| obj capacity selector hash |
  capacity := gen capacityForTable: map slotTable.
  obj := gen cloneOf: (gen objectsAt: #ArrayProto) sized: 2 * capacity.
  map slotTable do:
    [| :se |
     selector := gen generateLiteral: se name.
     hash := (selector idHash bitAnd: capacity - 1) * 2.
     [(obj elements at: hash) isNil]
       whileFalse:
         [hash := (hash + 2) \\ (capacity * 2)].
     obj elements at: hash put: selector.
     obj elements at: hash + 1 put: se offset].
  obj
].

gen@(Generator traits) generateRoleTableFor: map
[| obj capacity selector hash insert |
  capacity := gen capacityForTable: map roleTable.
  obj := gen cloneOf: (gen objectsAt: #ArrayProto) sized: 4 * capacity.
  map roleTable do:
    [| :re |
     selector := gen generateLiteral: re name.
     hash := (selector idHash bitAnd: capacity - 1) * 4.
     [(obj elements at: hash) isNil
        \/ [(obj elements at: hash) == selector]]
       whileFalse:
         [hash := (hash + 4) \\ (capacity * 4)].
     insert := hash.
     [(obj elements at: insert) isNil]
       whileFalse:
         [insert := (insert + 4) \\ (capacity * 4)].
     obj elements at: insert put: selector.
     obj elements at: insert + 1 put: re rolePositions.
     obj elements at: insert + 2 put: (gen generateMethodDef: re methodDefinition).
     insert == hash
       ifFalse:
         [[(obj elements at: hash + 3) isNil]
            whileFalse: [hash := (obj elements at: hash + 3) * 4].
          obj elements at: hash + 3 put: insert // 4]].
  obj
].

gen@(Generator traits) generateMethodDef: def
[
  gen translations at: def ifAbsentPut:
    [| obj sym |
     (sym := def method getSlot: #selector)
       setSlot: #cacheMask to: ((sym getSlot: #cacheMask) bitOr: def dispatchPositions).
     (obj := gen cloneOf: (gen objectsAt: #MethodDefinitionProto)) `>>
       [setSlot: #method to: def method.
        setSlot: #slotAccessor to: (gen generateLiteral: def slotAccessor). ].
     gen wordAt: 1 * gen bytesPerWord in: obj put: def dispatchPositions.
     obj]
].

gen@(Generator traits) generateMap: map
[
  gen translations at: map ifAbsentPut:
    [(gen cloneOf: (gen objectsAt: #MapProto)) `>>
       [setSlot: #flags to: map flags.
        setSlot: #representative to: (map representative ifNil: [gen objectsAt: #NilObject]).
        setSlot: #delegates to: (gen cloneOf: (gen objectsAt: #ArrayProto) elements: map delegates).
        setSlot: #slotCount to: map slotCount.
        setSlot: #slotTable to: (gen generateSlotTableFor: map).
        setSlot: #roleTable to: (gen generateRoleTableFor: map). ]]
].

gen@(Generator traits) generateMaps
[
  gen objects keysAndValuesDo:
    [| :name :obj |
     inform: ' Adding map for %s', name.
     gen generateMap: obj bmap]
].

obj@(Object traits) nextOop
"Answer the pointer to just beyond this object."
[obj oop + (obj wordSize * obj surroundings BytesPerWord)].

gen@(Generator traits) assignOops
"Assign oops to all of the chunks, accumulating the final oop which is used
to set the image size."
[
  gen imageSize := gen chunks inject: 0 into:
    [| :oop :chunk | chunk oop := oop. chunk nextOop]
].

gen@(Generator traits) emitInteger: val on: stream byteSize: byteSize
"Takes an integer and outputs the binary data value in the correct byte-order
onto the stream."
[
  stream next: byteSize putInteger: val &littleEndian: gen littleEndian
].

gen@(Generator traits) emitWord: val on: stream
"Takes an integer and outputs the binary data value in the correct byte-order
onto the stream."
[
  gen emitInteger: val on: stream byteSize: gen bytesPerWord
].

gen@(Generator traits) emitOopOf: chunk on: stream
[gen emitWord: chunk oop on: stream].

gen@(Generator traits) emitOopOf: _@Nil on: stream
[gen emitOopOf: (gen objectsAt: #NilObject) on: stream].

gen@(Generator traits) emitOopOf: i@(imports SmallInteger traits) on: stream
[gen emitWord: (i << 1 bitOr: 1) on: stream].

gen@(Generator traits) emitHeaderOf: obj sized: size payload: payload format: format on: stream
[
  hash ::= obj idHash.
  "header"
  gen littleEndian
    ifTrue:
      [stream nextPut: (2r00000001 bitOr: (hash bitAnd: 16r7F) << 1).
       stream nextPut: (hash >> 7) intoByte.
       stream nextPut: (hash >> 15) intoByte.
       stream nextPut: format << 6.
       gen emitInteger: 0 on: stream byteSize: gen bytesPerWord - 4]
    ifFalse:
      [gen emitInteger: 0 on: stream byteSize: gen bytesPerWord - 4.
       stream nextPut: (2r10000000 bitOr: (hash >> 16 bitAnd: 16r7F)).
       stream nextPut: (hash >> 8) intoByte.
       stream nextPut: hash intoByte.
       stream nextPut: format].

  "size in words of slot data"
  gen emitWord: size on: stream.
  "size in bytes of payload (oop array or byte array)"
  gen emitWord: payload on: stream.
].

gen@(Generator traits) emit: obj@(Object traits) on: stream
[
  gen emitHeaderOf: obj
    sized: obj wordSize
    payload: 0
    format: 2r00
    on: stream.
  gen emitWord: (gen translations at: obj bmap) oop on: stream.
  obj slotValues do:
    [| :slotVal | gen emitOopOf: slotVal on: stream].
  obj
].

gen@(Generator traits) emit: obj@(OopArray traits) on: stream
[
  gen emitHeaderOf: obj
    sized: obj wordSizeSansPayload
    payload: obj elements size * gen bytesPerWord
    format: 2r01
    on: stream.
  gen emitWord: (gen translations at: obj bmap) oop on: stream.
  obj slotValues ;; obj elements do:
    [| :slotVal | gen emitOopOf: slotVal on: stream].
  obj
].

gen@(Generator traits) emit: obj@(ByteArray traits) on: stream
[
  gen emitHeaderOf: obj
    sized: obj wordSizeSansPayload
    payload: obj elements size
    format: 2r10
    on: stream.
  gen emitWord: (gen translations at: obj bmap) oop on: stream.
  obj slotValues do:
    [| :slotVal | gen emitOopOf: slotVal on: stream].
  stream nextPutAll: obj elements.
  stream next: (gen bytesPerWord - obj elements size) \\ gen bytesPerWord put: 0.
  obj
].

gen@(Generator traits) emitHeaderOn: stream
[
  gen emitWord: 16rABCDEF43 on: stream.
  gen emitWord: gen imageSize on: stream.
  gen emitWord: gen nextHash on: stream.
  gen emitWord: ((gen objectsAt: #GlobalsObject) getSlot: #specialOops) oop on: stream.
"i shortened dispatch id to one word"
  gen emitWord: 0 on: stream.
].

gen@(Generator traits) emitOn: stream
"Emits a bootstrap image on the stream after it has been generated."
[
  inform: 'Assigning oops'.
  gen assignOops.
  inform: 'Emitting image: %s', stream resource locator.
  gen emitHeaderOn: stream.
  gen chunks do: [| :chunk | gen emit: chunk on: stream]
].

gen@(Generator traits) newIdentityHash
[| hash |
  hash := gen nextHash.
  gen nextHash += 1.
  hash
].

gen@(Generator traits) newMap
[
  gen surroundings Map clone
].

gen@(Generator traits) newObject &layout &map
[| obj |
  layout `defaultsTo: gen surroundings Object.
  map `defaultsTo: gen newMap.
  obj := layout clone `>> [idHash := gen newIdentityHash. bmap := map. ].
  obj slotValues := obj slotValues newSize: map slotCount.
  map representative := obj.
  gen chunks addLast: obj.
  obj
].

gen@(Generator traits) cloneOf: proto@(Object traits)
[
  gen chunks addLast: proto clone `>>
    [idHash := gen newIdentityHash. slotValues := proto slotValues copy. ]
].

gen@(Generator traits) cloneOf: arr@(Array traits)
[resend `>> [elements := arr elements copy. ]].

gen@(Generator traits) cloneOf: proto sized: size
[(gen cloneOf: proto) `>> [elements := proto elements newSize: size. ]].

gen@(Generator traits) cloneOf: proto elements: elements
[(gen cloneOf: proto) `>> [elements := elements as: proto elements. ]].

gen@(Generator traits) addAccessorFor: slotName on: obj
[| accessor selector |
  selector := obj accessorNameFor: slotName.
  (accessor := gen cloneOf: (gen objectsAt: #CompiledMethodProto)) `>>
    [setSlot: #method to: accessor.
     setSlot: #selector to: (gen generateLiteral: selector).
     setSlot: #inputVariables to: 1.
     setSlot: #localVariables to: 1.
     setSlot: #registerCount to: 3.
     setSlot: #literals to: (gen cloneOf: (gen objectsAt: #ArrayProto) elements: {gen generateLiteral: slotName}).
     setSlot: #selectors to: (gen cloneOf: (gen objectsAt: #ArrayProto) elements: {gen generateLiteral: #atSlotNamed:}).
     setSlot: #code to:
       (gen cloneOf: (gen objectsAt: #ArrayProto) elements: {
         VM SSACode loadVariable. 0.
         VM SSACode loadLiteral. 1. gen generateLiteral: slotName.
         VM SSACode directSendMessage. 0. gen generateLiteral: #atSlotNamed:. 2. 0. 1.
         VM SSACode returnRegister. 0
     }). ].
  (accessor addMethodNamed: selector on: {obj}) slotAccessor: slotName.
  accessor
].

gen@(Generator traits) addMutatorFor: slotName on: obj
[| mutator selector |
  selector := obj mutatorNameFor: slotName.
  (mutator := gen cloneOf: (gen objectsAt: #CompiledMethodProto)) `>>
    [setSlot: #method to: mutator.
     setSlot: #selector to: (gen generateLiteral: selector).
     setSlot: #inputVariables to: 2.
     setSlot: #localVariables to: 1.
     setSlot: #registerCount to: 4.
     setSlot: #literals to: (gen cloneOf: (gen objectsAt: #ArrayProto) elements: {gen generateLiteral: slotName}).
     setSlot: #selectors to: (gen cloneOf: (gen objectsAt: #ArrayProto) elements: {gen generateLiteral: #atSlotNamed:put:}).
     setSlot: #code to:
       (gen cloneOf: (gen objectsAt: #ArrayProto) elements: {
         VM SSACode loadVariable. 0.
         VM SSACode loadVariable. 1.
         VM SSACode loadLiteral. 2. gen generateLiteral: slotName.
         VM SSACode directSendMessage. 0. gen generateLiteral: #atSlotNamed:put:. 3. 0. 2. 1.
         VM SSACode returnRegister. 0
     }). ].
  (mutator addMethodNamed: selector on: {obj. Nil}) slotAccessor: slotName.
  mutator
].

gen@(Generator traits) addAccessorsFor: slotName on: obj
[
  gen addAccessorFor: slotName on: obj.
  gen addMutatorFor: slotName on: obj
].

gen@(Generator traits) generateKernelAccessors
[
  gen objects do:
    [| :obj |
     obj bmap slotTable do: [| :slot | gen addAccessorsFor: slot name on: obj]]
].

gen@(Generator traits) generatePrototype: name &suffix &layout &parents &slots: slotSpecs &elements
[| traits window result |
  suffix `defaultsTo: 'Proto'.
  traits := (gen objectsAt: (name ; 'Traits') intern := gen newObject)
    `>> [addDelegateValued: Nil. ].
  window := (gen objectsAt: (name ; 'Window') intern := gen newObject)
    `>> [bmap flags := 1. addDelegateValued: Nil. ].
  parents
    ifNotNil:
      [parents reverseDoWithIndex:
        [| :parent :index |
          window addDelegateValued: parent]].
  window addDelegateValued: traits.
  result := (gen objectsAt: (name ; suffix) intern := gen newObject &layout: layout)
    `>> [addDelegateValued: window. ].
  elements ifNotNil:
    [(result hasSlotNamed: #elements) ifTrue: [result elements := elements]].
  (slotSpecs `defaultsTo: {}) do:
    [| :spec | result makeSlotNamed: spec key valued: spec value].
  result
].

gen@(Generator traits) generateInstance: name of: window
[(gen objectsAt: name := gen newObject) `>>
  [addDelegateValued: window.]
].

gen@(Generator traits) generateKernel
[
  gen generatePrototype: 'Root'.
  gen generatePrototype: 'Oddball' &parents: {gen objectsAt: #RootTraits}.
  gen generatePrototype: 'Derivable' &parents: {gen objectsAt: #RootTraits}.
  gen generatePrototype: 'Cloneable' &parents: {gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}.

  gen generateInstance: #NilObject of: (gen objectsAt: #OddballWindow).
  gen generateInstance: #NoRoleObject of: (gen objectsAt: #OddballWindow).

  gen generatePrototype: 'Boolean' &parents: {gen objectsAt: #OddballTraits. gen objectsAt: #RootTraits}.
  gen generateInstance: #TrueObject of: (gen objectsAt: #BooleanWindow).
  gen generateInstance: #FalseObject of: (gen objectsAt: #BooleanWindow).

  gen generatePrototype: 'Array' &layout: gen surroundings OopArray
    &parents: {gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}
    &elements: Array new.
  gen generatePrototype: 'ByteArray' &layout: gen surroundings ByteArray
    &parents: {gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}
    &elements: ByteArray new.

  gen generatePrototype: 'SmallInteger' &parents: {gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #OddballTraits. gen objectsAt: #RootTraits}.
  (gen generatePrototype: 'Float' &layout: gen surroundings ByteArray
    &parents: {gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #ByteArrayTraits. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits})
    `>> [elements := ByteArray newSize: gen bytesPerWord].

  gen generatePrototype: 'ASCIIString' &layout: gen surroundings ByteArray
    &parents: {gen objectsAt: #NilObject. gen objectsAt: #ByteArrayTraits. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}.

  gen generatePrototype: 'Symbol' &layout: gen surroundings ByteArray
    &parents: {gen objectsAt: #ASCIIStringTraits. gen objectsAt: #NilObject. gen objectsAt: #ByteArrayTraits. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}
    &slots: {#cacheMask -> 0}.

  gen symbols at: #'' put: (gen objectsAt: #SymbolProto).

  gen generatePrototype: 'ASCIICharacter'
    &parents: {gen objectsAt: #NilObject. gen objectsAt: #OddballTraits. gen objectsAt: #RootTraits} &slots: {#code -> 0}.
  gen characters at: 0 put: (gen objectsAt: #ASCIICharacterProto).
  1 below: gen characters size do:
    [| :index c |
     c := gen cloneOf: (gen objectsAt: #ASCIICharacterProto).
     c setSlot: #code to: index.
     gen characters at: index put: c].
  (gen objectsAt: #ASCIIStringTraits) makeSlotNamed: #Character valued: (gen objectsAt: #ASCIICharacterProto).

  gen generatePrototype: 'Namespace'
    &parents: {gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}.
  gen generateInstance: #BootstrapObject of: (gen objectsAt: #NamespaceWindow).

  gen generatePrototype: 'Method' &parents: {gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}.

  gen generatePrototype: 'PrimitiveMethod'
    &parents: {gen objectsAt: #MethodTraits. gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}
    &slots: {#index -> 0. #selector -> (gen objectsAt: #NilObject). #inputVariables -> 0}.

  gen generatePrototype: 'CompiledMethod'
    &parents: {gen objectsAt: #MethodTraits. gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}
    &slots: {
      #method -> (gen objectsAt: #NilObject).
      #selector -> (gen objectsAt: #NilObject).
      #inputVariables -> 0. #localVariables -> 0.
      #restVariable -> (gen objectsAt: #FalseObject).
      #optionalKeywords -> (gen objectsAt: #ArrayProto).
      #heapAllocate -> (gen objectsAt: #FalseObject).
      #environment -> (gen objectsAt: #BootstrapObject).
      #literals -> (gen objectsAt: #ArrayProto).
      #selectors -> (gen objectsAt: #ArrayProto).
      #code -> (gen objectsAt: #ArrayProto).
      #sourceTree -> (gen objectsAt: #NilObject).
      #debugMap -> (gen objectsAt: #ArrayProto).
      #isInlined -> (gen objectsAt: #FalseObject).
      #oldCode -> (gen objectsAt: #NilObject).
      #callCount -> 0.
      #calleeCount -> (gen objectsAt: #NilObject).
      #registerCount -> 0.
      #cachedInCallers -> (gen objectsAt: #NilObject).
      #cachedInCallersCount -> 0.
      #nextInlineAtCallCount -> (gen objectsAt: #NilObject).
      #reserved5 -> (gen objectsAt: #NilObject).
      #reserved6 -> 0}.

  gen generatePrototype: 'Closure' &layout: gen surroundings OopArray
    &parents: {gen objectsAt: #MethodTraits. gen objectsAt: #ArrayTraits. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}
    &slots: {#method -> (gen objectsAt: #NilObject)}.

  gen generatePrototype: 'MethodDefinition' &layout: gen surroundings ByteArray
    &parents: {gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}
    &slots: {
      #method -> (gen objectsAt: #CompiledMethodProto).
      #slotAccessor -> (gen objectsAt: #NilObject)}
    &elements: (ByteArray newSize: 4 * gen bytesPerWord).

  gen generatePrototype: 'Map' &layout: gen surroundings ByteArray
    &parents: {gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}
    &slots: {
      #flags -> 0.
      #representative -> (gen objectsAt: #NilObject).
      #delegates -> (gen objectsAt: #ArrayProto).
      #slotCount -> 0.
      #slotTable -> (gen objectsAt: #ArrayProto).
      #roleTable -> (gen objectsAt: #ArrayProto)}
    &elements: (ByteArray newSize: 3 * gen bytesPerWord).

  gen generatePrototype: 'LexicalContext' &layout: gen surroundings OopArray
    &parents: {gen objectsAt: #ArrayTraits. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #NilObject. gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}
    &slots: {#framePointer -> 0}.

  gen generatePrototype: 'Interpreter' &layout: gen surroundings ByteArray
    &parents: {gen objectsAt: #CloneableTraits. gen objectsAt: #DerivableTraits. gen objectsAt: #RootTraits}
    &slots: {
      #stack -> (gen objectsAt: #ArrayProto).
      #method -> (gen objectsAt: #NilObject).
      #closure -> (gen objectsAt: #NilObject).
      #lexicalContext -> (gen objectsAt: #NilObject).
      #ensureHandlers -> 0}
    &elements: (ByteArray newSize: 5 * gen bytesPerWord).

  (gen objectsAt: #EnsureMarkerObject := gen cloneOf: (gen objectsAt: #CompiledMethodProto)) `>>
    [| :marker |
     setSlot: #method to: marker.
     setSlot: #code to:
       (gen cloneOf: (gen objectsAt: #ArrayProto)
          elements: {VM SSACode resume})].
].

Generator traits define: #Compiler &parents: {VM SSACompiler} &slots: {
  #generator.
}.

c@(Generator Compiler traits) newFor: gen
[
  result ::= c new.
  result generator := gen.
  result
].

c@(Generator Compiler traits) branchTableHash: key
[
  ((literal ::= c generator generateLiteral: key) isSameAs: SmallInteger)
    ifTrue: [literal]
    ifFalse: [literal idHash]
].

gen@(Generator traits) generateInterpreterBooting: method
[| stackSize |
  compiler ::= gen Compiler newFor: gen.
  inform: 'Compiling bootstrap source into VM instructions.'.

  methodCompiled ::= (compiler generate: method result: Nil &topLevel: True)
    `>> [heapAllocate := False. ].

  "compiler decompile: method code."

  methodLiteral ::= gen generateLiteral: methodCompiled.

  stackSize := 16. "if you change this, change vm.c which has it hard-coded in the beginning of interpret()"

  stackObj ::= (gen cloneOf: (gen objectsAt: #ArrayProto) sized: stackSize) `>>
    [elements at: 0 put: 0. "-6: prev sp"
     elements at: 1 put: -1. "-5: resultStackPointer"
     elements at: 2 put: 0. "-4: code pointer"
     elements at: 3 put: methodLiteral. "-3: closure"
     elements at: 4 put: 0. "-2: lexical context"
     elements at: 5 put: 0. "-1: prev fp"
     elements at: 6 put: 0. ].

  codeSize ::= methodCompiled code size.

  (interpreter ::= gen objectsAt: #InterpreterObject := gen cloneOf: (gen objectsAt: #InterpreterProto)) `>>
    [setSlot: #stack to: stackObj.
     setSlot: #method to: methodLiteral.
     setSlot: #closure to: methodLiteral. ].
  gen wordAt: 0 * gen bytesPerWord in: interpreter put: 6. " frame pointer (framesize=6)"
  "long at 1 is code pointer -- I guess this gets filled later or is zero"
  gen wordAt: 2 * gen bytesPerWord in: interpreter put: codeSize.
  gen wordAt: 3 * gen bytesPerWord in: interpreter put: 6. "stack pointer (framesize=6)"
  gen wordAt: 4 * gen bytesPerWord in: interpreter put: stackSize
].

gen@(Generator traits) generateUtilities
[
  gen generateInstance: #ConsoleObject of: (gen objectsAt: #OddballWindow).

  gen generatePrototype: 'File' &parents: {
    gen objectsAt: #NilObject.
    gen objectsAt: #CloneableTraits.
    gen objectsAt: #DerivableTraits.
    gen objectsAt: #RootTraits
  }.
  gen generatePrototype: 'Directory' &parents: {
    gen objectsAt: #NilObject.
    gen objectsAt: #CloneableTraits.
    gen objectsAt: #DerivableTraits.
    gen objectsAt: #RootTraits
  }.
  gen generatePrototype: 'ExternalLibrary' &parents: {
    gen objectsAt: #NilObject.
    gen objectsAt: #CloneableTraits.
    gen objectsAt: #DerivableTraits.
    gen objectsAt: #RootTraits
  }.
].

gen@(Generator traits) generateBootstrapNamespace
[
  gen objectsAt: #PrototypesObject := gen cloneOf: (gen objectsAt: #NamespaceProto).
  (gen objectsAt: #BootstrapObject) addDelegateValued: (gen objectsAt: #PrototypesObject).
  "timmy: no named delegate slots but name needed for accessor"
  (gen objectsAt: #BootstrapObject) makeSlotNamed: #prototypes valued: (gen objectsAt: #PrototypesObject).
  gen addAccessorFor: #prototypes on: (gen objectsAt: #BootstrapObject).
  "Install slots/accessors in the 'prototypes' namespace,
   set up traits traits, and set up printName. Make sure all bootstrapped protos
   are listed here, otherwise these important steps are left out for them."
  [| :slotName :objectName obj printNameLiteral window traits |
    obj := gen objectsAt: objectName.
    (gen objectsAt: #PrototypesObject) makeSlotNamed: slotName valued: obj.
    gen addAccessorFor: slotName on: (gen objectsAt: #PrototypesObject).
    window := obj bmap delegates first.
    window bmap delegates at: 0 put: (gen objectsAt: #CloneableWindow).
    traits := window bmap delegates last "(window getSlot: #traits)".
    traits bmap delegates at: 0 put: (gen objectsAt: #CloneableWindow).
    printNameLiteral := gen generateLiteral: slotName name.
    traits makeSlotNamed: #printNameTraits valued: printNameLiteral.
    gen addAccessorFor: #printNameTraits on: traits.
    window makeSlotNamed: #printNameWindow valued: printNameLiteral.
    gen addAccessorFor: #printNameWindow on: window
  ] applier for: #{
    {#Root.             #RootProto}.
    {#Oddball.          #OddballProto}.
    {#Cloneable.        #CloneableProto}.
    {#Derivable.        #DerivableProto}.
    {#Namespace.        #NamespaceProto}.
    {#Boolean.          #BooleanProto}.
    {#Array.            #ArrayProto}.
    {#ByteArray.        #ByteArrayProto}.
    {#ASCIIString.      #ASCIIStringProto}.
    {#ASCIICharacter.   #ASCIICharacterProto}.
    {#Symbol.           #SymbolProto}.
    {#SmallInteger.     #SmallIntegerProto}.
    {#SingleFloat.      #FloatProto}.
    {#Map.              #MapProto}.
    {#LexicalContext.   #LexicalContextProto}.
    {#MethodDefinition. #MethodDefinitionProto}.
    {#Method.           #MethodProto}.
    {#PrimitiveMethod.  #PrimitiveMethodProto}.
    {#CompiledMethod.   #CompiledMethodProto}.
    {#Closure.          #ClosureProto}.
    {#Interpreter.      #InterpreterProto}.
    {#File.             #FileProto}.
    {#Directory.        #DirectoryProto}.
    {#ExternalLibrary.  #ExternalLibraryProto}
  }.

  gen objectsAt: #GlobalsObject := gen cloneOf: (gen objectsAt: #NamespaceProto).
  (gen objectsAt: #BootstrapObject) addDelegateValued: (gen objectsAt: #GlobalsObject).
  (gen objectsAt: #BootstrapObject) makeSlotNamed: #globals valued: (gen objectsAt: #GlobalsObject).
  gen addAccessorFor: #globals on: (gen objectsAt: #BootstrapObject).
  [| :key :value |
   (gen objectsAt: #GlobalsObject) makeSlotNamed: key valued: value.
   gen addAccessorFor: key on: (gen objectsAt: #GlobalsObject)] applier for: {
     {#Console.              gen objectsAt: #ConsoleObject}.
     {#NoRole.               gen objectsAt: #NoRoleObject}.
     {#Nil.                  gen objectsAt: #NilObject}.
     {#True.                 gen objectsAt: #TrueObject}.
     {#False.                gen objectsAt: #FalseObject}.
     {#lobby.                gen objectsAt: #BootstrapObject}.
     {#bootstrapCharacters.  gen cloneOf: (gen objectsAt: #ArrayProto) elements: gen characters}.
     {#Symbols.              gen objectsAt: #ArrayProto}.
     {#bootstrapInterpreter. gen objectsAt: #InterpreterObject}.
     {#ensureMarker.         gen objectsAt: #EnsureMarkerObject}.
     {#specialOops.          gen objectsAt: #ArrayProto}.
     {#features.             gen objectsAt: #ArrayProto}.
  }.
  gen addMutatorFor: #features on: (gen objectsAt: #GlobalsObject)
].

gen@(Generator traits) generateLinkage
"TODO: The order in this method must be the same as in memory.slate, enforce it"
[
  (gen objectsAt: #GlobalsObject) setSlot: #specialOops to:
    (gen cloneOf: (gen objectsAt: #ArrayProto) elements:
       (#{#BootstrapObject.
          #NoRoleObject.
          #NilObject.
          #TrueObject.
          #FalseObject.
          #ArrayProto.
          #ByteArrayProto.
          #ASCIIStringProto.
          #MapProto.
          #MethodDefinitionProto.
          #SmallIntegerProto.
          #FloatProto.
          #ClosureWindow.
          #CompiledMethodWindow.
          #PrimitiveMethodWindow.
          #ClosureProto.
          #LexicalContextProto.
          #InterpreterObject.
          #EnsureMarkerObject.
      } collect: #(gen objectsAt: _) `er)
       ; ({#notFoundOn:.
           #notFoundOn:after:.
           #wrongInputsTo:.
           #mayNotReturnTo:.
           #slotNotFoundNamed:.
           #keyNotFoundOn:.
           #immutable.
           #bitShiftOverflow:.
           #addOverflow:.
           #subtractOverflow:.
           #multiplyOverflow:.
           #divideByZero.
           #notABoolean.
           #applyTo:.
           #&optionals:.
           #badTypeError} collect: #(gen generateLiteral: _) `er)).
  (gen objectsAt: #GlobalsObject) setSlot: #Symbols to:
    (gen cloneOf: (gen objectsAt: #ArrayProto) elements: gen symbols valueSet).
].

gen@(Generator traits) generatePrimitive: prim at: index
"Given a MethodDefinition representing a Pidgin primitive definition,
this defines a PrimitiveMethod stub that will invoke the given primitive
index. Must be called after generateImageBooting:."
[
  (gen cloneOf: (gen objectsAt: #PrimitiveMethodProto)) `>>
    [setSlot: #selector to: (gen generateLiteral: prim selector).
     setSlot: #inputVariables to: prim roles size.
     setSlot: #index to: index.
     addMethodNamed: prim selector on:
       (prim roles collect:
          [| :role |
           (role isSameAs: nodes UnaryMessage) ifTrue:
             [inform: ' Adding primitive %s to %s', index, role selector.
              gen objectsAt: role selector]]) ]
].

gen@(Generator traits) generateLiteral: literal
[
  literal == NoRole
    ifTrue: [gen objectsAt: #NoRoleObject]
    ifFalse: [error: 'Unsupported literal.']
].

gen@(Generator traits) generateLiteral: i@(imports SmallInteger traits)
[i].

gen@(Generator traits) generateLiteral: _@(imports BigInteger traits)
[
  error: 'The bootstrap generator does not support big integers.'
].

gen@(Generator traits) generateLiteral: _@True
[gen objectsAt: #TrueObject].

gen@(Generator traits) generateLiteral: _@False
[gen objectsAt: #FalseObject].

gen@(Generator traits) generateLiteral: _@Nil
[gen objectsAt: #NilObject].

gen@(Generator traits) generateLiteral: _@lobby
[gen objectsAt: #BootstrapObject].

gen@(Generator traits) generateLiteral: s@(imports ASCIIString traits)
[
  s isEmpty
    ifTrue: [gen objectsAt: #ASCIIStringProto]
    ifFalse: [gen cloneOf: (gen objectsAt: #ASCIIStringProto) elements:
                (s collect: #code`er into: (ByteArray newSizeOf: s))]
].

gen@(Generator traits) generateLiteral: s@(imports Symbol traits)
[
  gen symbols at: s ifAbsentPut:
    [gen cloneOf: (gen objectsAt: #SymbolProto) elements:
       (s name collect: #code`er into: (ByteArray newSizeOf: s name))]
].

gen@(Generator traits) generateLiteral: f@(imports SingleFloat traits)
[| obj |
  obj := gen cloneOf: (gen objectsAt: #FloatProto) elements: (ByteArray newWithAll: f).
  gen littleEndian = -1.0 isLittleEndian
    ifFalse: [obj elements := obj elements reversed].
  obj
].

gen@(Generator traits) generateLiteral: a@(imports ByteArray traits)
[
  a isEmpty
    ifTrue: [gen objectsAt: #ByteArrayProto]
    ifFalse: [gen cloneOf: (gen objectsAt: #ByteArrayProto) elements: a]
].

gen@(Generator traits) generateLiteral: a@(imports Array traits)
[
  a isEmpty
    ifTrue: [gen objectsAt: #ArrayProto]
    ifFalse: [gen cloneOf: (gen objectsAt: #ArrayProto) elements:
                (a collect: #(gen generateLiteral: _) `er)]
].

gen@(Generator traits) generateLiteral: c@(imports ASCIIString Character traits)
[
  gen characters at: c code
].

gen@(Generator traits) generateLiteral: block@(imports CompiledMethod traits)
[| obj |
  obj := (gen cloneOf: (gen objectsAt: #CompiledMethodProto)) `>>
   [| :obj |
    setSlot: #inputVariables to: block inputVariables.
    setSlot: #localVariables to: block localVariables.
    setSlot: #restVariable to: (gen generateLiteral: block restVariable).
    setSlot: #heapAllocate to: (gen generateLiteral: block heapAllocate).
    setSlot: #literals to: (gen generateLiteral: block literals).
    setSlot: #registerCount to: (gen generateLiteral: block registerCount).
    setSlot: #selectors to: (gen generateLiteral: block selectors).
    setSlot: #code to: (gen generateLiteral: block code).
    setSlot: #method to: obj. ].
  block optionalKeywords isEmpty ifFalse:
    [obj setSlot: #optionalKeywords to: (gen generateLiteral: block optionalKeywords)].
  obj
].

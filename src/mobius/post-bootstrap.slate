"What to do after all code bootstrapping library code is evaluated.
This code is compiled in to the bootstrapped seed image and then run when it
starts, so changes to this source require an image bootstrap to take full
effect."

ns@(Namespace traits) inform: message &target: r
"A simple way to print a message onto an ExternalResource (by default the
Console)."
[
  r `defaultsTo: Console.
  r writer ; message ; '\n'.
  r writer flush.
].

inform: 'Performing post-bootstrap actions...'.

_@lobby printOn: s "Convenient lobby printing." [s ; 'lobby'].

ns@(Namespace traits) load: fileName &in: namespace &verbose: verbose
"A command to open a file with the name, load, and compile/evaluate the
contents within the argument namespace or an optional override."
[| src |
  src: (File newNamed: fileName).
  src exists ifTrue: [ns load: src &in: namespace &verbose: verbose]
	     ifFalse: [warn: 'You tried to call load: on something that didn\'t describe a file. Hopefully the argument you passed what was you wanted. Here it is.'. fileName]
].

globals addSlot: #LoadLevel valued: 0.
"How many levels of recursion has load: been invoked on."

"Records the concrete directory where the sources are available and where
the bootstrap occurred."
globals define: #SlateDir &builder: [Directory current].

globals define: #defaultPaths &builder:
  [{SlateDir} as: ExtensibleArray].

ns@(Namespace traits) load: file@(File traits) &in: namespace &verbose: verbose
"A command to open the file, load, and compile/evaluate the
contents within the argument namespace or an optional override."
[| oldLoadLevel |
  verbose `defaultsTo: False.
  namespace `defaultsTo: ns.
  LoadLevel timesRepeat: [DebugConsole writer nextPut: $\s].
  inform: 'Loading ' ; file locator printString &target: DebugConsole.
  (file locator isSameAs: file RelativeLocator)
    ifTrue:
      [[file exists] whileFalse:
	[(globals defaultPaths before: file locator basePath)
	  ifNil: [error: 'Could not find the file relative to any of the default directories.'. ^ Nil]
	  ifNotNilDo: [| :newL | file locator basePath: newL]]].
  oldLoadLevel: LoadLevel.
  LoadLevel: LoadLevel + 1.
  [file reader sessionDo:
    [| :input aParser |
     "Ignore an initial she-bang line."
     (input peek: 2) = '#!' ifTrue: [input upTo: $\n].
     (aParser: (Syntax Parser newOn: input)) do:
       [| :each |
	verbose ifTrue:
	  [LoadLevel timesRepeat: [DebugConsole writer nextPut: $\s].
	   inform: 'Parsed to line ' ; aParser lexer lineNumber printString &target: DebugConsole].
	each evaluateIn: namespace]] &mode: file Read]
    ensure: [LoadLevel: oldLoadLevel].
].

"Load macro support libraries, which aren't needed in the bootstrap as macros
are expanded by the bootstrap generator."
load: 'src/mobius/quote.slate'.
load: 'src/mobius/cascade.slate'.
load: 'src/lib/macro.slate'.

"Load the prelude, customizable separately from the bootstrap image, which
loads non-optional but useful libraries."
load: 'src/mobius/prelude.slate'.

"Invoke the method defined by the prelude as the image startup."
lobby start

Syntax define: #Lexer &parents: {StreamProcessor}
  &slots: {#undoBuffer -> ExtensibleArray new.
	   #lineNumber -> 1 "The current line number."}.
"The lexer takes an input character Stream and divides it up into Tokens,
using a buffer as necessary to hold the tokenized contents.
Also, debugging information is stored for now in terms of the line number that
the current stream position has reached."
Syntax Lexer traits define: #specialChars -> '()[]{}@.|!#$`"\'%'.

l@(Syntax Lexer traits) on: stream
"Target the lexer to the particular stream and initialize it."
[
  resend reset.
  l
].

l@(Syntax Lexer traits) reset
[
  l undoBuffer: l undoBuffer new.
  l lineNumber: 1.
].

l@(Syntax Lexer traits) isAtEnd
"The lexer has reached its end when the stream is exhausted and the buffer is
empty."
[
  l undoBuffer isEmpty /\ [l source isAtEnd] \/
  [| c |
   [c: l nextCharacter.
    l undoBuffer isEmpty /\ [l source isAtEnd]
      \/ [c isWhitespace not] \/ [c = $\n]] whileFalse.
   c isWhitespace /\ [c ~= $\n] \/ [l undoCharacter: c. False]]
].

l@(Syntax Lexer traits) moreCharacters
[
  l undoBuffer isNotEmpty \/ [l source isAtEnd not]
].

l@(Syntax Lexer traits) peekCharacter
"Grab the next character, but leave it in the buffer, so the position is not
advanced."
[
  l undoBuffer isEmpty
    ifTrue: [l undoCharacter: l nextCharacter]
    ifFalse: [l undoBuffer last]
].

l@(Syntax Lexer traits) nextCharacter
"To get the next character, either pull one from the buffer or read from the
stream of characters. Raise an error if this is used at the end, and advance
the line number if a new-line is reached."
[| c |
  c: (l undoBuffer isEmpty
    ifTrue:
      [l source isAtEnd
         ifTrue: [l error: 'Unexpected end of stream'].
       l source next]
    ifFalse: [l undoBuffer removeLast]).
  c = $\n ifTrue: [l lineNumber: l lineNumber + 1].
  c
].

l@(Syntax Lexer traits) undoCharacter: c
"Put the character back into the buffer, and decrement the line number if it's
a new-line."
[
  c = $\n ifTrue: [l lineNumber: l lineNumber - 1].
  l undoBuffer addLast: c
].

Syntax Lexer traits define: #Error &parents: {DescriptiveError}
  &slots: {#lineNumber -> 0 "The line number on which the error was detected."}.
"An error that occurred in parsing, always requiring a description."

l@(Syntax Lexer traits) error: description
[
  (l Error newDescription:
    'Line ' ; l lineNumber printString ; ': ' ; description)
    `>> [lineNumber: l lineNumber. signal]
].

l@(Syntax Lexer traits) readInteger: radix
"The general method for building integers from the raw characters, with a
radix (number of digits) parameter. Grab all following digits for the radix,
multiplying the accumulator by the radix and adding the numeric equivalent
of the character."
[| number |
  number: 0.
  [l moreCharacters /\ [(l peekCharacter isDigit: radix) \/ [l peekCharacter = $_]]]
    whileTrue:
      [| c |
        c: l nextCharacter.
        (c isDigit: radix)
          ifTrue:
            [number: number * radix + (c toDigit: radix)]
      ].
  number
].

l@(Syntax Lexer traits) readMantissa: radix
"Build a floating-point number's fractional part."
[| number place |
  number: 0.
  place: 1.
  [l moreCharacters /\ [(l peekCharacter isDigit: radix) \/ [l peekCharacter = $_]]]
    whileTrue:
      [| c |
        c: l nextCharacter.
        (c isDigit: radix)
          ifTrue:
            [number: number * radix + (c toDigit: radix).
              place: place * radix]
      ].
  (number as: Float) / (place as: Float)
].

l@(Syntax Lexer traits) readExponent: radix
"Build a floating-point number's exponent as an integer."
[| sign c |
  sign: 1.
  c: l nextCharacter.
  c = $+ \/ [c = $-]
    ifTrue:
      [c = $- ifTrue: [sign: -1]]
    ifFalse:
      [l undoCharacter: c].
  sign * (l readInteger: radix)
].

l@(Syntax Lexer traits) newLiteralFor: obj
[Syntax Token Literal clone `setting: #(value) to: {obj}].

"l@(Syntax Lexer traits) newLiteralFor: a@(ByteArray traits)
[
  a isEmpty
    ifTrue: [TODO: 'intern empty array/bytearray/string']
    ifFalse: [resend]
]."

l@(Syntax Lexer traits) readNumber
"The overall routine for building numbers."
[| number sign radix c |
  "Assign the default sign, then override it based on the presence of an
  explicit sign character."
  sign: 1.
  radix: 10.
  c: l nextCharacter.
  c = $+ \/ [c = $-]
    ifTrue: [c = $- ifTrue: [sign: -1]]
    ifFalse: [l undoCharacter: c].
  "Now read in all the continuous string of digits possible as an integer."
  number: (l readInteger: radix).
  "Reaching the end of the lexing stream just finalizes the process."
  l moreCharacters
    ifFalse:
      [^ (l newLiteralFor: sign * number)].
  "Conditionalize on the next character: it may set up a radix or a decimal."
  c: l nextCharacter.
  c = $r \/ [c = $R]
    ifTrue:
      [radix: number.
        (radix between: 2 and: 36)
          ifFalse:
            [l error: 'Number radix must be between 2 and 36.'].
        number: (l readInteger: radix).
        l moreCharacters
          ifFalse:
            [^ (l newLiteralFor: sign * number)].
        c: l nextCharacter].
  (c = $. /\ [l moreCharacters] /\ [l peekCharacter isDigit: radix])
    ifTrue:
      [number: (number as: Float) + (l readMantissa: radix).
       l moreCharacters
         ifFalse:
           [^ (l newLiteralFor: sign * number)].
       c: l nextCharacter].
  c = $e \/ [c = $E]
    ifTrue:
      [number: (number as: Float) * ((radix as: Float) raisedTo: (l readExponent: 10))]
    ifFalse:
      [l undoCharacter: c].
  l newLiteralFor: sign * number
].

l@(Syntax Lexer traits) readEscapedCharacter
"Language support for character escapes. This should be called at the point
after the initial escape is seen, whether as a character or part of a string."
[| c |
  c: l nextCharacter.
  c caseOf:
      {
        $n -> [$\n].
        $t -> [$\t].
        $r -> [$\r].
        $b -> [$\b].
        $s -> [$\s].
        $a -> [$\a].
        $v -> [$\v].
        $f -> [$\f].
        $e -> [$\e].
        $0 -> [$\0].
        $x ->
          [| code |
            code: (l nextCharacter toDigit: 16).
            code: code * 16 + (l nextCharacter toDigit: 16).
            code as: ASCIIString Character
          ]
      }
    otherwise: [c]
].

l@(Syntax Lexer traits) readString
"Build a string until the next single-quote character is encountered.
Escaping is accounted for."
[| writeStream c | 
  writeStream: '' writer.
  [c: l nextCharacter. c = $\']
    whileFalse:
      [writeStream 
        nextPut: 
          (c = $\\ 
            ifTrue: [l readEscapedCharacter] 
            ifFalse: [c])].
  l newLiteralFor: writeStream contents
].

l@(Syntax Lexer traits) readComment
"Build a comment string until the next double-quote character is encountered.
Escaping is accounted for."
[| writeStream c |
  writeStream: '' writer.
  [c: l nextCharacter. c = $\"]
    whileFalse:
      [writeStream 
        nextPut:
          (c = $\\
            ifTrue: [l readEscapedCharacter]
            ifFalse: [c])].
  Syntax Token Comment clone `>> [comment: writeStream contents.]
].

l@(Syntax Lexer traits) readSelector: type &emptyToken: emptyToken
"Read a selector symbol into a token."
[| writeStream c |
  writeStream: '' writer.
  l moreCharacters /\ [l peekCharacter isDigit]
    ifFalse:
      [[l moreCharacters not
          \/ [c: l peekCharacter. c isWhitespace]
          \/ [l specialChars includes: c]]
         whileFalse:
           [writeStream nextPut: l nextCharacter]].
  writeStream contents isEmpty
    ifTrue: 
      [emptyToken ifNil: [error: 'Message selector must not be empty.']]
    ifFalse:
      [type clone `>> [selector: writeStream contents intern.]]
].

l@(Syntax Lexer traits) readLiteral
"This handles the literal brace array syntaxes."
[| writeStream c |
  writeStream: '' writer.
  l moreCharacters
    ifTrue:
      [
        c: l nextCharacter.
        c caseOf:
            {
              $( -> [^ Syntax Token BeginLiteralParenthesis].
              ${ -> [^ Syntax Token BeginLiteralArray].
              $[ -> [^ Syntax Token BeginLiteralBlock].
              $' -> [[c: l nextCharacter. c = $']
                        whileFalse:
                          [writeStream nextPut:
                            (c = $\\
                              ifTrue: [l readEscapedCharacter]
                              ifFalse: [c])].
                      ^ (l newLiteralFor: writeStream contents intern)].
            }.
        l undoCharacter: c 
      ].
  [l moreCharacters not
     \/ [c: l peekCharacter. c isWhitespace]
     \/ [l specialChars includes: c]]
    whileFalse:
      [writeStream nextPut: l nextCharacter].
  l newLiteralFor: writeStream contents intern
].

l@(Syntax Lexer traits) readCharacter
"Read in a single character into a token or an escaped one."
[| c |
  c: l nextCharacter.
  c = $\\ ifTrue: [c: l readEscapedCharacter].
  l newLiteralFor: c
].

l@(Syntax Lexer traits) readToken
"The overall handler for tokenization, this conditionalizes on the various
initializing characters to build the various token objects."
"TODO: place these dispatch tables in persistent places, much like a Lisp
read-table."
[| c |
  l isAtEnd ifTrue: [^ Syntax Token EndStream].
  c: l nextCharacter.
  c caseOf:
      {
        $\' -> [l readString].
        $\" -> [l readComment].
        $$ -> [l readCharacter].
        $# -> [l readLiteral].
        $( -> [Syntax Token BeginParenthesis].
        $) -> [Syntax Token EndParenthesis].
        ${ -> [Syntax Token BeginArray].
        $} -> [Syntax Token EndArray].
        $[ -> [Syntax Token BeginBlock].
        $] -> [Syntax Token EndBlock].
        $@ -> [Syntax Token At].
        $. -> [Syntax Token EndStatement].
        $| -> [Syntax Token BeginVariables].
        $! -> [Syntax Token Type].
        $` -> [l readSelector: Syntax Token MacroSelector &emptyToken: Syntax Token Quote].
        $% -> [l readSelector: Syntax Token DeferredSelector &emptyToken: Syntax Token Eventually].
        $\n -> [Syntax Token EndLine].
      }
    otherwise:
      [c = $+ \/ [c = $-] /\ [l peekCharacter isDigit]
         ifTrue: [l undoCharacter: c. l readNumber]
         ifFalse:
            [l undoCharacter: c.
             c isDigit
               ifTrue: [l readNumber]
               ifFalse: [l readSelector: Syntax Token Selector]]]
].

l@(Syntax Lexer traits) next
[
  l readToken
].

t@(Syntax Token Token traits) readFrom: s
[| next |
  next: (Syntax Lexer newOn: s reader) next.
  (next is: t)
    ifFalse: [error: 'The source did not parse into ' ; t printName asAn ; '.'].
  next
].



Image define: #Definition &parents: {Cloneable} &slots:
  {#bootstrapFilenames ->
"The names of the sources used to build the kernel REPL image, in necessary
load-order."
    ({'mobius/vm/pre-bootstrap'.
     'lib/root'.
     'lib/nil'.
     'lib/boolean'.
     'lib/namespace'.
     'lib/derivable'.
     'lib/numeric'.
     'lib/method'.
     'lib/method-query'.
     'lib/collection'.
     'lib/association'.
     'lib/extensible'.
     'lib/set'.
     'lib/mapping'.
     'lib/sequence'.
     'lib/arrayed'.
     'lib/integer'.
     'lib/dictionary'.
     'lib/string'.
     'lib/symbol'.
     'lib/range'.
     'lib/extensibleSeq'.
     'lib/sorted'.
     'lib/mixin'.
     'lib/stack'. "Used by the conditionStack."
     'lib/condition'. "Essential error-handling logic."
     'lib/condition-epilogue'. "Error types for previous libraries."
     'lib/stream'. "Basic Streams, only depends on condition.slate."
     'lib/iterator'. "Streams over previous collection libraries."
     'lib/stream-epilogue'. "Stream operation types."
     'lib/external'. "Abstract type for external resources and streams."
     'lib/console'. "Console I/O."
     'lib/file'. "File I/O."
     'lib/print'. "Print methods, pretty-printing (of objects, not source)."
     'lib/types'. "The object-based type system."
     'mobius/syntax/syntax'.
     'mobius/syntax/token'.
     'mobius/syntax/lexer'.
     'mobius/syntax/parser'.
     'lib/debugger'. "The Debugger, which targets a Console object."
     'mobius/syntax/macro'.
     'mobius/syntax/inference'.
     'mobius/syntax/mode'.
     'mobius/vm/interp/bytecode'.
     'mobius/vm/interp/compiler'.
     'mobius/vm/interp/ssa'.
     'mobius/vm/interp/debug'.
     'mobius/vm/post-bootstrap'
    } collect: [| :name | 'src/' ; name ; '.slate']).
    #filename -> Nil. "The filename for the image."
    #bitSize -> 64. "The bitsize of the image"
    #primitives -> ExtensibleArray new.
    #littleEndian -> True "Whether to have a little-endian byte-word format."
  }.

Image define: #BareDefinition -> (Image Definition cloneSettingSlots: #(bootstrapFilenames) to: {{'path/to/file'}}).
"An Image Definition consisting of the bare minimum to run some primitive call,
like adding 3 + 4, say."
"TODO: refactor Image Definition so that we can just supply a block here."

def@(Image Definition traits) newNamed: filename littleEndian: littleEndian bitSize: bitSize
[
  (def cloneSettingSlots: #(littleEndian bitSize) to: {littleEndian. bitSize})
    `>> [generateFilename &base: filename. ]
].

def@(Image Definition traits) generateFilename &base: base
[
  base `defaultsTo: 'kernel'.
  def filename: base ; '.' ; (def littleEndian ifTrue: ['little'] ifFalse: ['big'])
   ; '.' ; def bitSize printString ; '.image'].

c@(Image Definition traits) generate
[| builder bootBlock statements |
  builder: (Image Bootstrap Generator new &littleEndian: c littleEndian &bitSize: c bitSize).
  c filename ifNil: [c generateFilename].
  (File newNamed: c filename &mode: File CreateWrite) sessionDo:
    [| :imageFile image |
     image: imageFile writer.
     bootBlock: Syntax Block new.
     statements: bootBlock statements writer.
     c bootstrapFilenames do:
       [| :each |
        inform: 'Parsing ' ; each printString.
        (File newNamed: each &mode: File Read) sessionDo:
           [| :file | (Syntax Parser newOn: file reader) >> statements]].
     bootBlock statements: statements contents.
     inform: 'Building image.'.
     builder generateImageBooting: bootBlock withPrims: c primitives.
     builder emitOn: image].
  builder
].


i@Image littleEndian: littleEndian bitSize: bitSize
"Only to be called during or after fullCleanBootstrap to build new images
based on the new VM Definition."
[
  littleEndian
   ifTrue: [ i define: #newLittle ->
              (i Definition newNamed: 'kernel.new' littleEndian: True bitSize: bitSize).
            i newLittle generate ]
   ifFalse: [ i define: #newBig ->
               (i Definition newNamed: 'kernel.new' littleEndian: False bitSize: bitSize).
             i newBig generate ]

].


includeHeaderNamed: '"sdl.h"'.

s@SDLTraits initialize
[
	('sdlInit()' directly) >= 0
		ifTrue: [interpreter pushTrue]
		ifFalse: [interpreter pushFalse].
] `pidginPrimitive.

s@SDLTraits quit [ 'sdlQuit()' directly. ] `pidginPrimitive.

s@SDLTraits setVideoWidth: width@SmallIntegerTraits Height: height@SmallIntegerTraits BPP: bpp@SmallIntegerTraits
[
	(#sdlSetVideoMode applyTo: {width asSmallInt. height asSmallInt. bpp asSmallInt}) >= 0
		ifTrue: [interpreter pushTrue]
		ifFalse: [interpreter pushFalse].
] `pidginPrimitive.

s@SDLTraits updateScreen [ 'sdlUpdateScreen()' directly. ] `pidginPrimitive.

s@SDLTraits drawPixelOnX: x@SmallIntegerTraits y: y@SmallIntegerTraits red: r@SmallIntegerTraits green: g@SmallIntegerTraits blue: b@SmallIntegerTraits alpha: a@SmallIntegerTraits
[
	#sdlDrawPixel applyTo: {x asSmallInt. y asSmallInt. r asSmallInt. g asSmallInt. b asSmallInt. a asSmallInt.}.
] `pidginPrimitive.

s@SDLTraits drawLineFromX: x0@SmallIntegerTraits y: y0@SmallIntegerTraits toX: x1@SmallIntegerTraits y: y1@SmallIntegerTraits red: r@SmallIntegerTraits green: g@SmallIntegerTraits blue: b@SmallIntegerTraits alpha: a@SmallIntegerTraits antiAliased: aa@SmallIntegerTraits
[
	#sdlDrawLine applyTo: {x0 asSmallInt. y0 asSmallInt. x1 asSmallInt. y1 asSmallInt. r asSmallInt. g asSmallInt. b asSmallInt. a asSmallInt. aa asSmallInt.}.
] `pidginPrimitive.

s@SDLTraits drawRectangleFromX: x0@SmallIntegerTraits y: y0@SmallIntegerTraits toX: x1@SmallIntegerTraits y: y1@SmallIntegerTraits red: r@SmallIntegerTraits green: g@SmallIntegerTraits blue: b@SmallIntegerTraits alpha: a@SmallIntegerTraits
[
	#sdlDrawRectangle applyTo: {x0 asSmallInt. y0 asSmallInt. x1 asSmallInt. y1 asSmallInt. r asSmallInt. g asSmallInt. b asSmallInt. a asSmallInt.}.
] `pidginPrimitive.

s@SDLTraits drawFilledRectangleFromX: x0@SmallIntegerTraits y: y0@SmallIntegerTraits toX: x1@SmallIntegerTraits y: y1@SmallIntegerTraits red: r@SmallIntegerTraits green: g@SmallIntegerTraits blue: b@SmallIntegerTraits alpha: a@SmallIntegerTraits
[
	#sdlDrawFilledRectangle applyTo: {x0 asSmallInt. y0 asSmallInt. x1 asSmallInt. y1 asSmallInt. r asSmallInt. g asSmallInt. b asSmallInt. a asSmallInt.}.
] `pidginPrimitive.

s@SDLTraits drawCircleInX: x@SmallIntegerTraits y: y@SmallIntegerTraits withRadius: radius@SmallIntegerTraits red: r@SmallIntegerTraits green: g@SmallIntegerTraits blue: b@SmallIntegerTraits alpha: a@SmallIntegerTraits antiAliased: aa@SmallIntegerTraits
[
	#sdlDrawCircle applyTo: {x asSmallInt. y asSmallInt. radius asSmallInt. r asSmallInt. g asSmallInt. b asSmallInt. a asSmallInt. aa asSmallInt.}.
] `pidginPrimitive.

s@SDLTraits drawFilledCircleInX: x@SmallIntegerTraits y: y@SmallIntegerTraits withRadius: radius@SmallIntegerTraits red: r@SmallIntegerTraits green: g@SmallIntegerTraits blue: b@SmallIntegerTraits alpha: a@SmallIntegerTraits
[
	#sdlDrawFilledCircle applyTo: {x asSmallInt. y asSmallInt. radius asSmallInt. r asSmallInt. g asSmallInt. b asSmallInt. a asSmallInt.}.
] `pidginPrimitive.

s@SDLTraits drawEllipseInX: x@SmallIntegerTraits y: y@SmallIntegerTraits xRadius: rx@SmallIntegerTraits yRadius: ry@SmallIntegerTraits red: r@SmallIntegerTraits green: g@SmallIntegerTraits blue: b@SmallIntegerTraits alpha: a@SmallIntegerTraits antiAliased: aa@SmallIntegerTraits
[
	#sdlDrawEllipse applyTo: {x asSmallInt. y asSmallInt. rx asSmallInt. ry asSmallInt. r asSmallInt. g asSmallInt. b asSmallInt. a asSmallInt. aa asSmallInt.}.
] `pidginPrimitive.

s@SDLTraits drawFilledEllipseInX: x@SmallIntegerTraits y: y@SmallIntegerTraits xRadius: rx@SmallIntegerTraits yRadius: ry@SmallIntegerTraits red: r@SmallIntegerTraits green: g@SmallIntegerTraits blue: b@SmallIntegerTraits alpha: a@SmallIntegerTraits
[
	#sdlDrawFilledEllipse applyTo: {x asSmallInt. y asSmallInt. rx asSmallInt. ry asSmallInt. r asSmallInt. g asSmallInt. b asSmallInt. a asSmallInt.}.
] `pidginPrimitive.

s@SDLTraits drawPieInX: x@SmallIntegerTraits y: y@SmallIntegerTraits withRadius: radius@SmallIntegerTraits from: start@SmallIntegerTraits to: end@SmallIntegerTraits red: r@SmallIntegerTraits green: g@SmallIntegerTraits blue: b@SmallIntegerTraits alpha: a@SmallIntegerTraits
[
	#sdlDrawPie applyTo: {x asSmallInt. y asSmallInt. radius asSmallInt. start asSmallInt. end asSmallInt. r asSmallInt. g asSmallInt. b asSmallInt. a asSmallInt.}.
] `pidginPrimitive.

s@SDLTraits drawFilledPieInX: x@SmallIntegerTraits y: y@SmallIntegerTraits withRadius: radius@SmallIntegerTraits from: start@SmallIntegerTraits to: end@SmallIntegerTraits red: r@SmallIntegerTraits green: g@SmallIntegerTraits blue: b@SmallIntegerTraits alpha: a@SmallIntegerTraits
[
	#sdlDrawFilledPie applyTo: {x asSmallInt. y asSmallInt. radius asSmallInt. start asSmallInt. end asSmallInt. r asSmallInt. g asSmallInt. b asSmallInt. a asSmallInt.}.
] `pidginPrimitive.

"
s@SDLTraits drawTrigonFromX: x0@SmallIntegerTraits y: y1@SmallIntegerTraits throughX: x1@SmallIntegerTraits y: y0@SmallIntegerTraits toX: x2@SmallIntegerTraits y: y2@SmallIntegerTraits

withRadius: radius@SmallIntegerTraits from: start@SmallIntegerTraits to: end@SmallIntegerTraits red: r@SmallIntegerTraits green: g@SmallIntegerTraits blue: b@SmallIntegerTraits alpha: a@SmallIntegerTraits
[
	#sdlDrawFilledPie applyTo: {x asSmallInt. y asSmallInt. radius asSmallInt. start asSmallInt. end asSmallInt. r asSmallInt. g asSmallInt. b asSmallInt. a asSmallInt.}.
] `pidginPrimitive.
"

"What to do after all code bootstrapping library code is evaluated.
This code is compiled in to the bootstrapped seed image and then run when it
starts, so changes to this source require an image bootstrap to take full
effect."

ns@(Namespace traits) inform: message &target
"A simple way to print a message onto an ExternalResource (by default the
Console)."
[| *rest |
  target `defaultsTo: DebugConsole.
  target writer ; (rest isEmpty ifTrue: [message] ifFalse: [#formatting sendTo: {message} ; rest]) ; '\n'.
  target writer flush.
].

inform: 'Performing post-bootstrap actions...'.

"These exist just for bootstrapping purposes, to be replaced by Module code:"

Syntax import: #nodes from: lobby.
Syntax import: #tokens from: lobby.
Syntax import: #Lexer from: lobby.
Syntax import: #Parser from: lobby.

"TODO: Simplify these load: stubs to avoid maintenance costs."

ns@(Namespace traits) load: fileName &in: namespace &verbose &showLoadMessage &imports
"A command to open a file with the name, load, and compile/evaluate the
contents within the argument namespace or an optional override."
[| src retry |
  src: (File newNamed: fileName &mode: File Read).
  src exists ifTrue: [retry: Retry clone.
                      _@(retry) describeOn: console [ console ; 'Retry loading ' ; fileName printString ; '\n' ].
                      [ns load: src &in: namespace &verbose: verbose &showLoadMessage: showLoadMessage &imports: imports]
                        handlingCases: {retry -> [|:_| ^ (ns load: fileName &in: namespace &verbose: verbose)]}]
	     ifFalse: [warn: 'Called load: on something that didn\'t describe a file. Returning the input: ' ; fileName printString. fileName]
].

ns@(Namespace traits) load: file@(File traits) &in: namespace &verbose &showLoadMessage &imports
"A command to open the file, load, and compile/evaluate the
contents within the argument namespace or an optional override."
[| defaultPaths |
  verbose `defaultsTo: False.
  namespace `defaultsTo: ns.
  (imports `defaultsTo: #{})
    do: [| :import | namespace import: import value from: import key].
  (showLoadMessage `defaultsTo: True)
    ifTrue: [inform: 'Loading ' ; file locator printString].
  defaultPaths: {Directory current}.
  (file locator isSameAs: file RelativeLocator)
    ifTrue:
      [[file exists] whileFalse:
	[(globals defaultPaths before: file locator basePath)
	  ifNil: [error: 'Could not find the file relative to any of the default directories.'. ^ Nil]
	  ifNotNilDo: [| :newL | file locator basePath: newL]]].
  file ASCIIReader sessionDo:
    [| :input aParser |
     "Ignore an initial she-bang line."
     (input peek: 2) = '#!' ifTrue: [input upTo: $\n].
     (aParser: (Syntax Parser newOn: input)) do:
       [| :each |
	verbose ifTrue:
	  [inform: 'Parsed to line ' ; aParser lexer lineNumber printString].
	each evaluateIn: namespace]] &mode: file Read
].

ns@(Namespace traits) use: file
[
  ((result ::= ns new load: file) hasSlotNamed: #exports)
    ifTrue: [result exports] ifFalse: [result]
].

ns@(Namespace traits) reload: file
[[ns load: file] on: RebindError do: [| :x | x return: Nil]].

"
This is defined on == but we expect this to use = for comparing strings like:
StartupArguments includes: '--image-help'
"
#includes: removeMethodFrom: {Array traits. NoRole} &ifNotFound: [].

"Load macro support libraries, which aren't needed in the bootstrap as macros
are expanded by the bootstrap generator."
load: 'src/core/stream-terminals.slate'.
load: 'src/syntax/quote.slate'.
load: 'src/syntax/cascade.slate'.
load: 'src/syntax/assignment.slate'.
load: 'src/syntax/binding.slate'.
load: 'src/lib/format.slate'.
load: 'src/lib/macro.slate'.
load: 'src/syntax/case.slate'.

"recompile everything with the new compiler so that we have line number info, etc."
load: 'src/mobius/rebootstrap.slate'.

"Load the prelude, customizable separately from the bootstrap image, which
loads non-optional but useful libraries."
load: 'src/mobius/bootstrap-final-loadable.slate'.

"Invoke the method defined by the prelude as the image startup."
"lobby start"

"Drop the old bootstrap stack which takes up a lot of space."
(lobby globals specialOops at: 17) initializeThreadOn: [[lobby start] ensure: [lobby exit: 0]].

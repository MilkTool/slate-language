(Optimizer Platform x86 define: #Generator &parents: {Optimizer MR Generator})
  `>> [addSlot: #comparison. ].

g@(Optimizer Platform x86 Generator traits) new
[g newArchitecture: Optimizer Platform x86 Architecture].

g@(Optimizer Platform x86 Generator traits) generatePrologue
[
].

g@(Optimizer Platform x86 Generator traits) generateEpilogue
[
].

g@(Optimizer Platform x86 Generator traits) jumpTo: dst
[
  g basicBlock addLast: (Optimizer Platform x86 jmp newOperands: {Optimizer MR Label newTarget: dst})
].

g@(Optimizer Platform x86 Generator traits) branchFor: i@(Optimizer IR LessThan traits) with: dst
[
  ((i inputs first type is: Types _Unsigned)
    ifTrue:
      [Optimizer Platform x86 jb]
    ifFalse:
      [Optimizer Platform x86 jl]) newOperands: {dst}
].

g@(Optimizer Platform x86 Generator traits) branchFor: i@(Optimizer IR LessThanEqual traits) with: dst
[
  ((i inputs first type is: Types _Unsigned)
    ifTrue:
      [Optimizer Platform x86 jbe]
    ifFalse:
      [Optimizer Platform x86 jle]) newOperands: {dst}
].

g@(Optimizer Platform x86 Generator traits) branchFor: i@(Optimizer IR GreaterThan traits) with: dst
[
  ((i inputs first type is: Types _Unsigned)
    ifTrue:
      [Optimizer Platform x86 ja]
    ifFalse:
      [Optimizer Platform x86 jg]) newOperands: {dst}
].

g@(Optimizer Platform x86 Generator traits) branchFor: i@(Optimizer IR GreaterThanEqual traits) with: dst
[
  ((i inputs first type is: Types _Unsigned)
    ifTrue:
      [Optimizer Platform x86 jae]
    ifFalse:
      [Optimizer Platform x86 jge]) newOperands: {dst}
].

g@(Optimizer Platform x86 Generator traits) branchFor: i@(Optimizer IR Equal traits) with: dst
[Optimizer Platform x86 je newOperands: {dst}].

g@(Optimizer Platform x86 Generator traits) branchFor: i@(Optimizer IR NotEqual traits) with: dst
[Optimizer Platform x86 jne newOperands: {dst}].

g@(Optimizer Platform x86 Generator traits) branchTo: dst if: x equals: y
[
  g basicBlock
    addAllLast:
      {Optimizer Platform x86 cmp newOperands: {(g generate: y). (g generate: x)}.
        Optimizer Platform x86 je newOperands: {Optimizer MR Label newTarget: dst}}
].

g@(Optimizer Platform x86 Generator traits) branchTo: dst if: x@(Optimizer IR Constant traits) equals: y
[
  (x type isSameAs: Types _Condition)
    ifTrue:
      [g basicBlock 
        addLast: 
          (g branchFor: (x value isZero ifTrue: [g comparison] ifFalse: [g comparison newInverted])
             with: (Optimizer MR Label newTarget: dst))]
    ifFalse:
      [resend]
].

g@(Optimizer Platform x86 Generator traits) branchTo: dst if: x equals: y@(Optimizer IR Constant traits)
[
  g branchTo: dst if: y equals: x
].

g@(Optimizer Platform x86 Generator traits) generateMemory: m base: b@(Optimizer IR Constant traits) offset: o@(Optimizer IR Constant traits)
[
  o value isZero ifFalse: [error: 'Constant memory address may not be offset.'].
  Optimizer Platform x86 Memory Constant newOperands: {g generate: b}
].

g@(Optimizer Platform x86 Generator traits) generateMemory: m base: b@(Optimizer IR Label traits) offset: o@(Optimizer IR Constant traits)
[
  o value isZero
    ifTrue:
      [Optimizer Platform x86 Memory Label newOperands: {g generate: b}]
    ifFalse:
      [Optimizer Platform x86 Memory DisplacedLabel newOperands: {g generate: b. g generate: o}]
].

g@(Optimizer Platform x86 Generator traits) generateMemory: m base: b@(Optimizer IR LocalVariable traits) offset: o@(Optimizer IR Constant traits)
[
  o value isZero
    ifTrue:
      [Optimizer Platform x86 Memory Indirect newOperands: {g generate: b}]
    ifFalse:
      [Optimizer Platform x86 Memory Displaced newOperands: {g generate: b. g generate: o}]
].

g@(Optimizer Platform x86 Generator traits) generateMemory: m base: b@(Optimizer IR LocalVariable traits) offset: o@(Optimizer IR LocalVariable traits)
[
  Optimizer Platform x86 Memory Indexed newOperands: {g generate: b. g generate: o}
].
  
g@(Optimizer Platform x86 Generator traits) generate: m@(Optimizer IR Memory traits)
[
  (g generateMemory: m base: m base offset: m offset) `>> [type: m type. ]
].

g@(Optimizer Platform x86 Generator traits) relocateToTemporary: var
[| tmp |
  tmp: (g addTemporary: var type).
  g basicBlock addLast: (Optimizer Platform x86 mov newOperands: {tmp. y}).
  tmp
].

g@(Optimizer Platform x86 Generator traits) move: src to: dst
[
  g basicBlock addLast: 
    ((dst type is: Types _Float)
      ifTrue:
        [Optimizer Platform x86 vfmov newOperands: {dst. src}]
      ifFalse:
        [Optimizer Platform x86 mov newOperands: {dst. src}])
].

g@(Optimizer Platform x86 Generator traits) move: src@(Optimizer MR Constant traits) to: dst
[
  (dst type is: Float_)
    ifTrue:
      [src value
        caseOf:
          {0.0 -> [g basicBlock addLast: (Optimizer Platform x86 vfldz newOperands: {dst})].
            1.0 -> [g basicBlock addLast: (Optimizer Platform x86 vfld1 newOperands: {dst})]}
        otherwise:
          [g assignMemoryLocationTo: dst.
            g basicBlock addLast: (Optimizer Platform x86 vfmov newOperands: {dst. src memoryLocation})]]
    ifFalse:
      [src value isZero
        ifTrue:
          [g basicBlock addLast: (g basicBlock addLast: (Optimizer Platform x86 xor newOperands: {dst. dst}))]
        ifFalse:
          [resend]]
].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR SetVariable traits)
[| dst src |
  dst: (g generate: i outputs first).
  src: (g generate: i inputs first).

  g move: src to: dst
].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR LoadMemory traits)
[| dst src |
  dst: (g generate: i outputs first).
  src: (g generate: i inputs first).

  g move: src to: dst
].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR StoreMemory traits)
[| dst src |
  dst: (g generate: i outputs first).
  src: (g generate: i inputs first).

  g move: src to: dst
].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR LoadGlobalVariable traits)
[| dst src |
  dst: (g generate: i outputs first).
  src: (g generate: i inputs first).

  g move: src memoryLocation to: dst
].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR StoreGlobalVariable traits)
[| dst src |
  dst: (g generate: i outputs first).
  src: (g generate: i inputs first).

  g move: src to: dst memoryLocation
].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR ReloadVariable traits)
"TODO: Assign spill location."
[| dst src |
  dst: (g generate: i outputs first).
  src: (g generate: i inputs first).

  g assignMemoryLocationTo: src.
  g move: src spillLocation to: dst
].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR SpillVariable traits)
"TODO: Assign spill location."
[| dst src |
  dst: (g generate: i outputs first).
  src: (g generate: i inputs first).

  g assignMemoryLocationTo: dst.
  g move: src to: dst spillLocation
].

g@(Optimizer Platform x86 Generator traits) instructionFor: _@(Optimizer IR And traits) with: x with: y
[Optimizer Platform x86 and newOperands: {x. y}].

g@(Optimizer Platform x86 Generator traits) instructionFor: _@(Optimizer IR Or traits) with: x with: y
[Optimizer Platform x86 or newOperands: {x. y}].

g@(Optimizer Platform x86 Generator traits) instructionFor: _@(Optimizer IR Xor traits) with: x with: y
[Optimizer Platform x86 xor newOperands: {x. y}].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR Logic traits)
[| r x y |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).
  y: (g generate: i inputs second).

  r == y
    ifTrue:
      [y: x.
        x: r].
  r == x
    ifFalse:
      [g move: x to: r].
  g basicBlock addLast: (g instructionFor: i with: r with: y)
].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR Not traits)
[| r x |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).

  r == x
    ifFalse:
      [g move: x to: r].
  g basicBlock addLast: (Optimizer Platform x86 not newOperands: {x. y})
].

g@(Optimizer Platform x86 Generator traits) generateInteger: i@(Optimizer IR Add traits)
[| r x y |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).
  y: (g generate: i inputs second).
  
  r == y
    ifTrue:
      [y: x.
        x: r].
  r == x
    ifFalse:
      [g move: x to: r].
  g basicBlock addLast:
    ((y isSameAs: Optimizer MR Constant) /\ [y value abs = 1]
      ifTrue:
        [y value = 1
          ifTrue: [Optimizer Platform x86 inc newOperands: {r}]
          ifFalse: [Optimizer Platform x86 dec newOperands: {r}]]
      ifFalse:
        [Optimizer Platform x86 add newOperands: {r. y}])
].

g@(Optimizer Platform x86 Generator traits) generateInteger: i@(Optimizer IR Subtract traits)
[| r x y |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).
  y: (g generate: i inputs second).

  (x isSameAs: Optimizer MR Constant) /\ [x value isZero]
    ifTrue:
      [r == x
        ifFalse:
          [g move: x to: r].
        ^ (Optimizer Platform x86 neg newOperands: {r})].
  r == y
    ifTrue:
      [y: (g relocateToTemporary: y)].
  r == x
    ifFalse:
      [g move: x to: r].
  g basicBlock addLast: 
    ((y isSameAs: Optimizer MR Constant) /\ [y value abs = 1]
      ifTrue:
        [y value = 1
          ifTrue: [Optimizer Platform x86 dec newOperands: {r}]
          ifFalse: [Optimizer Platform x86 inc newOperands: {r}]]
      ifFalse:
        [Optimizer Platform x86 sub newOperands: {r. y}])
].

g@(Optimizer Platform x86 Generator traits) generateInteger: i@(Optimizer IR Division traits)
[| r x y q m |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).
  y: (g generate: i inputs second).
  q: (g addTemporary: Optimizer Platform x86 EAX type) `>> [register: Optimizer Platform x86 EAX. ].
  m: (g addTemporary: Optimizer Platform x86 EDX type) `>> [register: Optimizer Platform x86 EDX. ].  
  
  g move: x to: q.
  g basicBlock addAllLast:
    ((x is: Types _Signed)
      ifTrue:
        [{Optimizer Platform x86 cdq newOperands: {m. q}.
           Optimizer Platform x86 idiv newOperands: {m. q. y}}]
      ifFalse:
        [{Optimizer Platform x86 xor newOperands: {m. m}.
           Optimizer Platform x86 div newOperands: {m. q. y}}]).
  g move: 
    ((i isSameAs: Optimizer IR Remainder)
      ifTrue: [m] 
      ifFalse: [q])
    to: r
].

g@(Optimizer Platform x86 Generator traits) generateInteger: i@(Optimizer IR Multiply traits)
[| r x y q m |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).
  y: (g generate: i inputs second).

  r == y
    ifTrue:
      [y: x.
       x: r].
  (x isSameAs: Optimizer MR Constant)
    ifTrue:
      [x `swapWith: y].
  (y isSameAs: Optimizer MR Constant)
    ifTrue:
      [g basicBlock addLast: (Optimizer Platform x86 imulc newOperands: {r. x. y})]
    ifFalse:
      [r == x
        ifFalse:
          [g move: x to: r].
        g basicBlock addLast: (Optimizer Platform x86 imullo newOperands: {r. y})]
].

_@(Optimizer Platform x86 Generator traits) floatInstructionFor: _@(Optimizer IR Add traits) with: r with: x with: y
[Optimizer Platform x86 vfadd newOperands: {r. x. y}].

_@(Optimizer Platform x86 Generator traits) floatInstructionFor: _@(Optimizer IR Multiply traits) with: r with: x with: y
[Optimizer Platform x86 vfmul newOperands: {r. x. y}].

_@(Optimizer Platform x86 Generator traits) floatInstructionFor: _@(Optimizer IR Divide traits) with: r with: x with: y
[Optimizer Platform x86 vfdiv newOperands: {r. x. y}].

g@(Optimizer Platform x86 Generator traits) floatArithmeticOperandFor: x
[x].

g@(Optimizer Platform x86 Generator traits) floatArithmeticOperandFor: c@(Optimizer MR Constant traits)
[
  (#{0.0. 1.0} includes: c value)
    ifTrue:
      [| tmp |
        tmp: (g addTemporary: c type).
        g move: c to: tmp.
        tmp]
    ifFalse:
      [g assignMemoryLocationTo: x.
        x memoryLocation]
].

g@(Optimizer Platform x86 Generator traits) generateFloat: i@(Optimizer IR Arithmetic traits)
[| r x y |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).
  y: (g generate: i inputs second).

  g basicBlock addLast: 
    (g floatInstructionFor: i 
      with: r 
      with: (g floatArithmeticOperandFor: x)
      with: (g floatArithmeticOperandFor: y))
].

g@(Optimizer Platform x86 Generator traits) generateFloat: i@(Optimizer IR Subtract traits)
[| r x y |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).
  y: (g generate: i inputs second).

  g basicBlock addLast:
    ((x isSameAs: Optimizer MR Constant) /\ [x value isZero]
      ifTrue:
        [Optimizer Platform x86 vfchs newOperands: {r. y}]
      ifFalse:
        [Optimizer Platform x86 vfsub newOperands:
          {r.
            g floatArithmeticOperandFor: x.
            g floatArithmeticOperandFor: y}])
].

g@(Optimizer Platform x86 Generator traits) generateFloat: i@(Optimizer IR Remainder traits)
[| r x y |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).
  y: (g generate: i inputs second).

  (x isSameAs: Optimizer MR Constant)
    ifTrue:
      [g move: x to: r.
        r: x].
  (y isSameAs: Optimizer MR Constant)
    ifTrue:
      [| tmp |
        tmp: (g addTemporary: y type).
        g move: y to: tmp.
        y: tmp].
  r == x
    ifFalse:
      [g move: x to: r].
  g basicBlock addLast: (Optimizer Platform x86 vfprem1 newOperands: {r. y})
].

g@(Optimizer Platform x86 Generator traits) instructionFor: _@(Optimizer IR SignExtend traits) with: x with: y
[
  (y type bitSize caseOf:
    {8 -> [Optimizer Platform x86 movsx8].
      16 -> [Optimizer Platform x86 movsx16]}
    otherwise: [error: 'Sign-extended source must be 1 or 2 bytes.'])
    newOperands: {x. y}
].

g@(Optimizer Platform x86 Generator traits) instructionFor: _@(Optimizer IR ZeroExtend traits) with: x with: y
[
  (y type bitSize caseOf:
    {8 -> [Optimizer Platform x86 movzx8].
      16 -> [Optimizer Platform x86 movzx16]}
    otherwise: [error: 'Zero-extended source must be 1 or 2 bytes.'])
    newOperands: {x. y}
].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR Conversion traits)
[| r x |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).
  
  g basicBlock addLast: (g instructionFor: i with: r with: x)
].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR Truncate traits)
[| r x |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).

  r == x
    ifFalse:
      [g move: x to: r].
  g basicBlock addLast: 
    (Optimizer Platform x86 and newOperands: 
      {r. 
        (Optimizer MR Constant newValue: (1 bitShift: r type bitSize + 1) - 1)
          `>> [type: r type]})
].

g@(Optimizer Platform x86 Generator traits) instructionFor: _@(Optimizer IR ShiftRight traits) with: x with: y
[Optimizer Platform x86 shr newOperands: {x. y}].

g@(Optimizer Platform x86 Generator traits) instructionFor: _@(Optimizer IR ShiftLeft traits) with: x with: y
[Optimizer Platform x86 shl newOperands: {x. y}].

g@(Optimizer Platform x86 Generator traits) instructionFor: _@(Optimizer IR ArithmeticShiftRight traits) with: x with: y
[Optimizer Platform x86 sar newOperands: {x. y}].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR Shift traits)
[| r x y c |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).
  y: (g generate: i inputs second).
  (y isSameAs: Optimizer MR Constant)
    ifTrue:
      [c: y].
    ifFalse:
      [c: (g addTemporary: Optimizer Platform x86 ECX type) `>> [register: Optimizer Platform x86 ECX. ].
        g move: y to: c].
  r == x
    ifFalse:
      [g move: x to: r].
  g basicBlock addLast: (g instructionFor: i with: r with: c)
].

g@(Optimizer Platform x86 Generator traits) floatComparisonOperandFor: x
[x].

g@(Optimizer Platform x86 Generator traits) floatComparisonOperandFor: c@(Optimizer MR Constant traits)
[| tmp |
  tmp: (g addTemporary: x type).
  g move: x to: tmp.
  tmp
].

g@(Optimizer Platform x86 Generator traits) generateFloat: i@(Optimizer IR Comparison traits)
[| x y |
  x: (g generate: i inputs first).
  y: (g generate: i inputs second).

  g basicBlock addLast:
    (Optimizer Platform x86 vfcomi newOperands:
      {g floatComparisonOperandFor: x.
        g floatComparisonOperandFor: y}).
  g comparison: i
].

g@(Optimizer Platform x86 Generator traits) generateInteger: i@(Optimizer IR Comparison traits)
[| x y |
  x: (g generate: i inputs first).
  y: (g generate: i inputs second).
  
  (x isSameAs: Optimizer MR Constant)
    ifTrue:
      [i: i newReversed.
        x `swapWith: y].
  g basicBlock addLast: (Optimizer Platform x86 cmp newOperands: {x. y})
  g comparison: i
].

g@(Optimizer Platform x86 Generator traits) generateInteger: i@(Optimizer IR Equal traits)
[| x y |
  x: i inputs first.
  y: i inputs second.

  (x isSameAs: Optimizer MR Constant)
    ifTrue:
      [x `swapWith: y]. 
  (y isSameAs: Optimizer MR Constant) /\ [y value = 0]
    ifTrue:
      [x: (g generate: x).
        g basicBlock addLast: (Optimizer Platform x86 test newOperands: {x. x}).
        g comparison: i]
    ifFalse:
      [resend]
].

g@(Optimizer Platform x86 Generator traits) generateInteger: i@(Optimizer IR NotEqual traits)
[| x y |
  x: i inputs first.
  y: i inputs second.

  (x isSameAs: Optimizer MR Constant)
    ifTrue:
      [x `swapWith: y].
  (y isSameAs: Optimizer MR Constant) /\ [y value = 0]
    ifTrue:
      [x: (g generate: x).
        g basicBlock addLast: (Optimizer Platform x86 test newOperands: {x. x}).
        g comparison: i]
    ifFalse:
      [resend]
].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR ToFloat traits)
[| r x |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).

  (x type is: Types _Float)
    ifTrue:
      [r == x
        ifFalse:
          [g move: x to: r]]
    ifFalse:
      [g assignMemoryLocationTo: x.
        g move: x to: x memoryLocation.
        g move: x memoryLocation to: r]
].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR FromFloat traits)
[| r x |
  r: (g generate: i outputs first).
  x: (g generate: i inputs first).

  g assignMemoryLocationTo: r.
  g move: x to: r memoryLocation.
  g move: r memoryLocation to: r
].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR ToCondition traits)
[| x |
  x: (g generate: i inputs first).
  g basicBlock addLast: (Optimizer Platform x86 test newOperands: {x. x}).
  g comparison: 
    (Optimizer IR NotEqual new `>> 
      [inputs: {i inputs first. (Optimizer IR Constant newValue: 0) `>> [type: i inputs first type. ]}.
        outputs: i outputs])
].

g@(Optimizer Platform x86 Generator traits) instructionFor: i@(Optimizer IR LessThan traits) with: dst
[
  ((i inputs first type is: Types _Unsigned)
    ifTrue:
      [Optimizer Platform x86 setb]
    ifFalse:
      [Optimizer Platform x86 setl]) newOperands: {dst}
].

g@(Optimizer Platform x86 Generator traits) instructionFor: i@(Optimizer IR LessThanEqual traits) with: dst
[
  ((i inputs first type is: Types _Unsigned)
    ifTrue:
      [Optimizer Platform x86 setbe]
    ifFalse:
      [Optimizer Platform x86 setle]) newOperands: {dst}
].
  
g@(Optimizer Platform x86 Generator traits) instructionFor: i@(Optimizer IR GreaterThan traits) with: dst
[
  ((i inputs first type is: Types _Unsigned)
    ifTrue:
      [Optimizer Platform x86 seta] 
    ifFalse:
      [Optimizer Platform x86 setg]) newOperands: {dst}
].

g@(Optimizer Platform x86 Generator traits) instructionFor: i@(Optimizer IR GreaterThanEqual traits) with: dst
[ 
  ((i inputs first type is: Types _Unsigned)
    ifTrue:
      [Optimizer Platform x86 setae]
    ifFalse:
      [Optimizer Platform x86 setge]) newOperands: {dst}
].

g@(Optimizer Platform x86 Generator traits) instructionFor: i@(Optimizer IR Equal traits) with: dst
[Optimizer Platform x86 sete newOperands: {dst}].
    
g@(Optimizer Platform x86 Generator traits) instructionFor: i@(Optimizer IR NotEqual traits) with: dst
[Optimizer Platform x86 setne newOperands: {dst}].

g@(Optimizer Platform x86 Generator traits) generate: i@(Optimizer IR FromCondition traits)
[| r |
  r: (g generate: r outputs first).
  g basicBlock addAllLast: 
    {Optimizer Platform x86 xor newOperands: {r. r}.
      g instructionFor: g comparison with: r}
].

g@(Optimizer Platform x86 Generator traits) pushUnassignedInputs: inputs
[
  inputs reverseDo: [| :input |
    (input type is: Types _Float)
      ifTrue:
        [g basicBlock addLast:
          (Optimizer Platform x86 sub newOperands:
            {Optimizer Platform x86 ESP.
              (Optimizer MR Constant newValue:
                (input type byteSize / 4) ceiling * 4) `>> [type: Types _Signed32]}).
          g move: input to: 
            (Optimizer Platform x86 Memory Indirect newOperands: {Optimizer Platform x86 ESP})
              `>> [type: input type. ]]
      ifFalse:
        [g basicBlock addLast: (Optimizer Platform x86 push newOperands: {input})]].
].

g@(Optimizer Platform x86 Generator traits) popUnassignedInputs: inputs
[
  inputs isEmpty
    ifFalse:
      [g basicBlock addLast:
        (Optimizer Platform x86 add newOperands:
          {Optimizer Platform x86 ESP.
            (Optimizer MR Constant newValue:
              (inputs inject: 0 into: [| :total :input |
                total + ((input type byteSize / 4) ceiling * 4)])) `>> [type: Types _Signed32]})]
].

g@(Optimizer Platform x86 Generator traits) call: label
[
  g basicBlock addLast: (Optimizer Platform x86 call newOperands: {label})
].

        
    

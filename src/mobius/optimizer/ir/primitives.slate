gen@(Optimizer IR Generator traits) generatePrimitive: selector@(Symbol traits) for: args
[
  (args first isSameAs: Syntax ImplicitArgument)
    ifTrue:
      [| variable name |
       name: (selector as: String).
       name last = $: ifTrue: [name: name allButLast].
       (gen findVariable: name intern)
         ifNil: [error: 'Unknown global variable "' ; name ; '"']
         ifNotNilDo:
           [| :variable |
	    args size = 1
              ifTrue:
                 [| val |
                  val: (gen generateArgument: args first).
                  gen emit:
                    {Optimizer IR StoreGlobalVariable new `>>
                         [inputs: {val}. outputs: {variable}.].
                       Optimizer IR SetVariable new `>>
                         [inputs: {val}. outputs: {gen results top}.]}]
               ifFalse:
                 [gen emit: Optimizer IR LoadGlobalVariable new `>>
                    [inputs: {variable}. outputs: {gen results top}.]]]]
    ifFalse:
      [(gen findFunction: selector)
         ifNil: [error: 'Unknown function "' ; selector name ; '"']
         ifNotNilDo:
           [| :function |
	    gen emit: Optimizer IR Call new `>>
              [inputs:
                {Optimizer IR Label new `>> [target: function. ]} ;
                  (args collect: [| :arg | gen generateArgument: arg]).
               outputs:
                 ((gen results top isSameAs: Array)
                    ifTrue: [gen results top]
                    ifFalse: [{gen results top}]).]]]
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#multipleValues: for: args
[| block results |
  block: args second.
  results:
    (gen
      generateResult: args first
      into:
        (block inputVariables
          collect:
            [| :var | gen makeTemporaryVariable: var type])).
  results
    with: block inputVariables
    do:
      [| :result :var |
        gen emit: Optimizer IR SetVariable `>>
          [inputs: {result}.
            outputs: {gen makeLocalVariable: var}.]
      ].
  gen addLocalVariables: block.
  block statements
    allButLast: 1
    do:
      [| :statement | gen generateArgument: statement].
  block statements size > 1
    ifTrue: [gen generate: block statements last]
].

gen@(Optimizer IR Generator traits) generateArithmetic: instruction for: args
[
  gen emit: instruction new `>>
    [inputs: (args collect: [| :arg | gen generateArgument: arg]).
      outputs: { gen results top }.]
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#+ for: args
[
  gen generateArithmetic: Optimizer IR Add for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#- for: args
[
  gen generateArithmetic: Optimizer IR Subtract for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#* for: args
[
  gen generateArithmetic: Optimizer IR Multiply for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#/ for: args
[
  gen generateArithmetic: Optimizer IR Divide for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#\\ for: args
[
  gen generateArithmetic: Optimizer IR Remainder for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#/\ for: args
[
  gen generateArithmetic: Optimizer IR And for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#\/ for: args
[
  gen generateArithmetic: Optimizer IR Or for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#xor: for: args
[
  gen generateArithmetic: Optimizer IR Xor for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#not for: args
[
  gen generateArithmetic: Optimizer IR Not for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#<< for: args
[
  gen generateArithmetic: Optimizer IR ShiftLeft for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#>> for: args
[
  gen generateArithmetic: Optimizer IR ShiftRight for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#>>> for: args
[
  gen generateArithmetic: Optimizer IR ShiftRightArithmetic for: args
].

_@(Optimizer IR Generator traits) conversionFrom: src@(Types _Integer traits) to: dst@(Types _Integer traits)
[
  src bitSize <=> dst bitSize
    caseOf:
      {-1 -> [Optimizer IR ZeroExtend].
        0 -> [Optimizer IR SetVariable].
        1 -> [Optimizer IR Truncate]}
].

_@(Optimizer IR Generator traits) conversionFrom: src@(Types _Signed traits) to: dst@(Types _Signed traits)
[
  src bitSize <=> dst bitSize
    caseOf:
      {-1 -> [Optimizer IR SignExtend].
        0 -> [Optimizer IR SetVariable].
        1 -> [Optimizer IR Truncate]}
].

_@(Optimizer IR Generator traits) conversionFrom: _ to: _@(Types _Float traits)
[Optimizer IR ToFloat].

_@(Optimizer IR Generator traits) conversionFrom: _@(Types _Float traits) to: _@(Types _Integer traits)
[Optimizer IR FromFloat].

_@(Optimizer IR Generator traits) conversionFrom: _@(Types _Integer traits) to: _@(Types _Condition traits)
[Optimizer IR ToCondition].

_@(Optimizer IR Generator traits) conversionFrom: _@(Types _Condition traits) to: _@(Types _Integer traits)
[Optimizer IR FromCondition].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#convert for: args
[
  gen generateArithmetic: (gen conversionFrom: args first type to: gen results top type) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#= for: args
[
  gen generateArithmetic: Optimizer IR Equal for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#~= for: args
[
  gen generateArithmetic: Optimizer IR NotEqual for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#< for: args
[
  gen generateArithmetic: Optimizer IR LessThan for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#<= for: args
[
  gen generateArithmetic: Optimizer IR LessThanEqual for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#> for: args
[
  gen generateArithmetic: Optimizer IR GreaterThan for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#>= for: args
[
  gen generateArithmetic: Optimizer IR GreaterThanEqual for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#at: for: args
[
  gen emit: Optimizer IR LoadMemory new `>>
    [inputs: {Optimizer IR Memory new `>>
        [base: (gen generateArgument: args first).
          offset: (gen generateArgument: args second).]}.
      outputs: {gen results top}.]
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#at:put: for: args
[
  gen emit: Optimizer IR StoreMemory new `>>
    [inputs: {gen generateArgument: args third}.
      outputs: {Optimizer IR Memory new `>>
        [base: (gen generateArgument: args first).
          offset: (gen generateArgument: args second).]}.]
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#label for: args
[| label blockNode |
  label: Optimizer IR Continuation new.
  gen emit: label.
  gen controlFlow push: label.
  blockNode: args first.
  labels at: blockNode inputVariables first put: label -> gen results top.
  blockNode statements
    allButLastDo: [| :statement | gen generateArgument: statement].
  blockNode statements isEmpty
    ifFalse: [gen generateResult: blockNode statements last].
  gen controlFlow pop
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#return for: args
[| label |
  (args first isSameAs: Syntax ImplicitArgument)
    ifTrue:
      [label: gen method child]
    ifFalse:
      [label: (labels at: args first variable)].
  gen emit: Optimizer IR ReturnToContinuation new `>> [continuation: label key.]
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#return: for: args
[| label return |
  (args first isSameAs: Syntax ImplicitArgument)
    ifTrue:
      [
        label: gen method child.
        (args second isSameAs: Syntax Array)
          ifTrue:
            [args second statements
                with: gen method outputVariables
                do: [| :statement :var |
		     gen generateResult: statement into: var]]
          ifFalse:
            [gen generateResult: args second into: gen method outputVariables first]
      ]
    ifFalse:
      [
        label: (labels at: args first variable).
        gen generateResult: args second into: label value
      ].
  gen emit: Optimizer IR ReturnToContinuation new `>> [continuation: label key.]
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#loop for: args
[| loop blockNode |
  loop: Optimizer IR Loop new.
  blockNode: args first.
  blockNode inputVariables size > 0
    ifTrue:
      [| label |
        label: Optimizer IR label clone.
        gen emit: label.
        labels at: blockNode inputVariables first put: label -> gen results top.
        label makeChild: loop]
    ifFalse:
      [gen emit: loop].
  gen controlFlow push: loop.
  gen addLocalVariables: blockNode.
  blockNode statements
    do: [| :statement | gen generateArgument: statement].
  gen controlFlow pop
].

gen@(Optimizer IR Generator traits) generateLogic: key for: args
[| match |
  gen generateResult: args first.
  gen controlFlow push: gen controlFlow top.
  args
    allButFirst: 1
    do:
      [| :block |
        match: Optimizer IR Match new `>> [value: gen results top. key: key.].
        gen emit: match.
        gen controlFlow fromTop: 0 put: match failureChild.
        block statements
          allButLast: 1
          do:
            [| :statement |
              gen generateArgument: statement
            ].
        block statements size > 0
          ifTrue:
            [gen generateResult: block statements last]
      ].
  gen controlFlow pop
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#and: for: args
[
  gen generateLogic: (gen makeConstant: Types _Condition valued: 0) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#and:and: for: args
[
  gen generateLogic: (gen makeConstant: Types _Condition valued: 0) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#and:and:and: for: args
[
  gen generateLogic: (gen makeConstant: Types _Condition valued: 0) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#or: for: args
[
  gen generateLogic: (gen makeConstant: Types _Condition valued: 1) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#or:or: for: args
[
  gen generateLogic: (gen makeConstant: Types _Condition valued: 1) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#or:or:or: for: args
[
  gen generateLogic: (gen makeConstant: Types _Condition valued: 1) for: args
].

gen@(Optimizer IR Generator traits) generateCaseOf: args
[| val cases match block |
  val: (gen generateArgument: args first).
  cases: args second statements.
  cases
    do:
      [| :case alternative block |
        alternative: Optimizer IR Match new `>>
          [value: val.
            key:
              (gen
                makeConstant: case arguments first type
                valued: case arguments first value).].
        match
          ifNil:
            [gen emit: match]
          ifNotNil:
            [
              alternative parent: match
              match failureChild: alternative
            ].
        gen controlFlow push: alternative successChild.
        block: case arguments second.
        gen addLocalVariables: block.
        block statements
          allButLast: 1
          do:
            [| :statement |
              gen generateArgument: statement
            ].
        block statements size > 0
          ifTrue:
            [gen generateResult: block statements last].
        gen controlFlow pop.
        match: alternative
      ].
  args size >= 3
    ifTrue:
      [| block |
        match ifNotNil: [gen controlFlow push: match failureChild].
        block: args third.
        gen addLocalVariables: block.
        block statements
          allButLast: 1
          do:
            [| :statement |
              gen generateArgument: statement
            ].
        block statements size > 0
          ifTrue:
            [gen generateResult: block statements last].
        match ifNotNil: [gen controlFlow pop]
      ]
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#caseOf: for: args
[
  gen generateCaseOf: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#caseOf:otherwise: for: args
[
  gen generateCaseOf: args
].

gen@(Optimizer IR Generator traits) generateIf: key for: args
[| match trueBlock falseBlock |
  match: Optimizer IR Match new `>>
    [value: (gen generateArgument: args first).
      key: key.].
  gen emit: match.
  gen controlFlow push: match successChild.
  trueBlock: args second.
  gen addLocalVariables: trueBlock.
  trueBlock statements
    allButLast: 1
    do:
      [| :statement |
        gen generateArgument: statement
      ].
  trueBlock statements size > 0
    ifTrue:
      [gen generateResult: trueBlock statements last].
  gen controlFlow pop.
  args size >= 3
    ifTrue:
      [
        gen controlFlow push: match failureChild.
        falseBlock: args third.
        gen addLocalVariables: falseBlock.
        falseBlock statements
          allButLast: 1
          do:
            [| :statement |
              gen generateArgument: statement
            ].
        falseBlock statements size > 0
          ifTrue:
            [gen generateResult: falseBlock statements last].
        gen controlFlow pop
      ].
  match
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#ifTrue:ifFalse: for: args
[
  gen generateIf: (gen makeConstant: Types Any valued: True) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#ifTrue: for: args
[
  gen generateIf: (gen makeConstant: Types Any valued: True) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#ifFalse: for: args
[
  gen generateIf: (gen makeConstant: Types Any valued: False) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#ifNil:ifNotNil: for: args
[
  gen generateIf: (gen makeConstant: Types Any valued: Nil) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#ifNil: for: args
[
  gen generateIf: (gen makeConstant: Types Any valued: Nil) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#ifNotNil: for: args
[
  gen generateIf: (gen makeConstant: Types Any valued: Nil) for: { args first. Compiler BlockNode. args second }
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#ifZero:ifNotZero: for: args
[
  gen generateIf: (gen makeConstant: Types _Condition valued: 0) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#ifZero: for: args
[
  gen generateIf: (gen makeConstant: Types _Condition valued: 0) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#ifNotZero: for: args
[
  gen generateIf: (gen makeConstant: Types _Condition valued: 0) for: { args first. Compiler BlockNode. args second }
].

gen@(Optimizer IR Generator traits) generateWhile: key for: args
[| label loop match cond body ret |
  label: Optimizer IR Continuation new.
  gen emit: label.
  loop: Optimizer IR Loop new.
  label makeChild: loop.
  match: Optimizer IR Match new `>> [key: key.].
  ret: Optimizer IR ReturnToContinuation new `>> [continuation: label.].
  ret parent: match.
  match failureChild: ret.
  gen controlFlow push: loop.
  cond: args first.
  cond inputVariables size > 0
    ifTrue:
      [gen labels at: body inputVariables first put: label -> gen results top].
  gen addLocalVariables: cond.
  cond statements
    allButLast: 1
    do:
      [| :statement |
        gen generateArgument: statement
      ].
  match value: (gen generateArgument: cond statements last).
  gen emit: match.
  body: args second.
  body inputVariables size > 0
    ifTrue:
      [gen labels at: body inputVariables first put: label -> gen results top].
  gen addLocalVariables: body.
  body statements
    do:
      [| :statement |
        gen generateArgument: statement
      ].
  gen controlFlow pop
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#whileTrue: for: args
[
  gen generateWhile: (gen makeConstant: Types Any valued: True) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#whileFalse: for: args
[
  gen generateWhile: (gen makeConstant: Types Any valued: False) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#whileTrue for: args
[
  gen generateWhile: (gen makeConstant: Types Any valued: True) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#whileFalse for: args
[
  gen generateWhile: (gen makeConstant: Types Any valued: False) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#whileZero: for: args
[
  gen generateWhile: (gen makeConstant: Types _Condition valued: 0) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#whileNotZero: for: args
[
  gen generateWhile: (gen makeConstant: Types _Condition valued: 1) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#whileZero for: args
[
  gen generateWhile: (gen makeConstant: Types _Condition valued: 0) for: args
].

gen@(Optimizer IR Generator traits) generatePrimitive: _@#whileNotZero for: args
[
  gen generateWhile: (gen makeConstant: Types _Condition valued: 1) for: args
].




Optimizer IR define: #ClosureLifter &parents: {Cloneable} &slots:
{#module.
 #scope -> Stack new.
 #environmentVariables -> IdentityDictionary new.
 #variableLocations -> IdentityDictionary new.
 #capturedEnvironments -> IdentityDictionary new.
 #functions -> IdentityDictionary new}.

cl@(Optimizer IR ClosureLifter traits) newModule: module
[
  cl cloneSettingSlots: #(module scope environmentVariables variableLocations capturedEnvironments functions)
     to: {module.
	  cl scope new.
	  cl environmentVariables new.
	  cl capturedEnvironments new.
	  cl functions new}
].

cl@(Optimizer IR ClosureLifter traits) captureUse: _@(Optimizer IR Operand traits)
[
].

cl@(Optimizer IR ClosureLifter traits) captureUse: label@(Optimizer IR Label traits)
[
  cl functions at: label target ifPresent: [| :fun | label target: fun]
].

cl@(Optimizer IR ClosureLifter traits) captureUse: var@(Optimizer IR LocalVariable traits)
[| envs scope |
  scope: cl scope top.
  [scope == var scope \/ 
    [(envs: (cl capturedEnvironments 
        at: scope 
        ifAbsentPut: 
          [SortedArray newSortedBy:
	    [| :x :y | (cl scope indexOf: x) < (cl scope indexOf: y)]]))
       includes: var scope]]
    whileFalse:
      [envs add: var scope.
       scope: scope parent]
].

_@(Optimizer IR ClosureLifter traits) captureFreeVariablesIn: _
[
].

cl@(Optimizer IR ClosureLifter traits) captureFreeVariablesIn: bb@(Optimizer IR BasicBlock traits)
[
  bb instructions do:
    [| :inst |
     inst inputsDo: [| :input | cl captureUse: input].
     inst outputsDo: [| :output | cl captureUse: output]]
].

cl@(Optimizer IR ClosureLifter traits) captureFreeVariablesIn: closure@(Optimizer IR Closure traits)
[
  cl scope push: closure.
  closure walk: [| :cf | cl markFreeVariablesIn: cf].
  closure closures do: [| :child | cl captureFreeVariablesIn: child].
  cl scope pop
].

cl@(Optimizer IR ClosureLifter traits) captureFreeVariables
[
  module closures do:
    [| :closure |
     closure parent ifNil: [cl captureFreeVariablesIn: closure]]
].

_@(Optimizer IR ClosureLifter traits) lift: _
[].

cl@(Optimizer IR ClosureLifter traits) lift: bb@(Optimizer IR BasicBlock traits)
[
  bb instructions do: [| :inst | cl lift: inst]
].

cl@(Optimizer IR ClosureLifter traits) lift: inst@(Optimizer IR InstantiateClosure traits)
[
  inst inputs first `cacheAs: #label.
  label target `cacheAs: #closure.
  label target: (cl functions at: closure).
  inst inputs:
    (((cl capturedEnvironments at: cl scope ifAbsent: [#{}])
        collect: [| :env | cl environmentVariables at: env]) copyWith: label at: 0)
].

cl@(Optimizer IR ClosureLifter traits) lift: inst@(Optimizer IR LoadFreeVariable traits)
[
  inst inputs first `cacheAs: #var.
  var nonLocalUses = 0
    ifTrue:
      [inst basicBlock add: Optimizer IR SetVariable new `>>
         [inputs: {var}. outputs: inst outputs. ]
		       before: inst]
    ifFalse:
      [inst basicBlock add: Optimizer IR LoadEnvironment new `>>
        [inputs: 
          {cl environmentVariables at: var scope. 
           Optimizer IR Constant new `>> [value: (cl variableLocations at: var). ]}.
         outputs: inst outputs. ]].
  inst basicBlock remove: inst
].

cl@(Optimizer IR ClosureLifter traits) lift: inst@(Optimizer IR StoreFreeVariable traits)
[
  inst outputs first `cacheAs: #var.
  var nonLocalUses = 0
    ifTrue:
      [inst basicBlock add: Optimizer IR SetVariable new `>>
         [inputs: inst inputs.
          outputs: inst outputs. ]
		       before: inst]
    ifFalse:
      [inst basicBlock add: Optimizer IR StoreEnvironment new `>>
         [inputs: 
           {cl environmentVariables at: var scope. 
            Optimizer IR Constant new `>> [value: (cl variableLocations at: var). ].
            inst inputs first}.]].
  inst basicBlock remove: inst
].

cl@(Optimizer IR ClosureLifter traits) lift: closure@(Optimizer IR Closure traits)
[| fun capturedVars |
  fun: (cl functions at: closure).
  fun inputVariables: closure inputVariables.
  fun outputVariables: closure outputVariables.
  fun localVariables: closure localVariables.
  fun constants: closure constants.
  fun child: closure child.
  cl environmentVariables: IdentityDictionary new.
  cl capturedEnvironments at: closure
    ifPresent:
      [| :envs |
        envs reverseDo:
          [| :env var |
            var: Optimizer IR InputVariable new `>>
              [type: Types _Address32.
                scope: fun.].
            fun inputVariables addFirst: var.
            cl environmentVariables at: env put: var]].
  capturedVars: (fun localVariables collect: [| :var | var nonLocalUses > 0]).
  capturedVars isEmpty
    ifFalse:
      [| var bb |
        capturedVariables 
          doWithIndex: 
            [| :var :index | cl variableLocations at: var put: index].
        var: Optimizer IR LocalVariable new `>>
          [type: Types _Address32.
            scope: fun.].
        fun localVariables add: var.
        cl environmentVariables at: closure put: var.
        fun emit: Optimizer IR CreateEnvironment new `>>
          [inputs: {Optimizer IR Constant new `>> [value: capturedVars size]}.
            outputs: {var}.]].
  cl scope: closure.
  cl walk: [| :cf | cl lift: cf].
  closure closures do: [| :closure | cl lift: closure].
].

cl@(Optimizer IR ClosureLifter traits) liftClosures
[
  module closures do: [| :closure fun |
    fun: (Optimizer IR Function newNamed: closure name).
    cl functions at: closure put: fun.
    cl module functions add: fun].
  cl captureFreeVariables.
  module closures copy do:
    [| :closure | closure parent ifNil: [cl lift: closure]].
].


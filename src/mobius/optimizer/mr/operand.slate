Optimizer ensureNamespace: #MR.
"The machine representation encompasses any machine dependent optimization
(such as register allocation) and representation needed for a target. In 
comparison to the IR, the MR is a `flat' representation - functions are 
represented as basic blocks and the edges between them and machine-specific 
instructions. Once code has gone through the MR phase, it is ready to output
and run."

Optimizer MR define: #Operand &parents: {Cloneable} &slots:
{#type -> Types Any}.
"The abstract object for an operand to an instruction. Operands carry a type
slot identifying the type and size of the operand.
Mostly familiar operands are carried over from the IR."

Optimizer MR define: #Constant &parents: {Optimizer MR Operand} &slots:
{#value. "The value of the constant."
 #memoryLocation "The assigned memory location, if necessary, for the constant."}.
"A constant input operand (constant outputs are NOT supported). The type slot 
describes acceptable constants."

c@(Optimizer MR Constant traits) newValue: value
[
  c clone `>>
    [value: value.]
].

Optimizer MR define: #Memory &parents: {Optimizer MR Operand} &slots:
{#operands -> #{}}.
"A memory reference, with an Array of operands that calculate the actual
memory address."

m@(Optimizer MR Memory traits) newOperands: operands
[m cloneSettingSlots: #(operands) to: {operands}].

_@(Optimizer MR Memory traits) operandModes
"Describe the format of the operands."
[shouldOverrideThis].

Optimizer MR define: #Label &parents: {Optimizer MR Operand} &slots:
{#target "The target slot holds the BasicBlock or function."}.
"A Label used to reference a BasicBlock in a Branch Instruction, or a 
Function/closure in a Function call."

l@(Optimizer MR Label traits) newTarget: target
[l cloneSettingSlots: #(target) to: {target}].

Optimizer MR define: #Variable &parents: {Optimizer MR Operand} &slots:
 {#name "The Symbol name."}.
"An abstract object representing a variable."

v@(Optimizer MR Variable traits) newNamed: name
[v cloneSettingSlots: #(name) to: {name}].

Optimizer MR define: #GlobalVariable &parents: {Optimizer MR Variable} &slots:
{#module.
 #memoryLocation. "The Memory location of the global variable."
 #value}.
"A variable stored in the global data section of a module."

Optimizer MR define: #LocalVariable &parents: {Optimizer MR Variable} &slots:
{#spillLocation. "The location where the variable should be spilled." 
 #intervalStart. "The starting position of the variable's use interval."
 #intervalEnd. "The end position of the variable's use interval."
 #register. "The register that has been assigned to the variable."
 #conflicts -> #{} "The registers this variable interferes with and must avoid using."}.
"A spillable variable to be cached in a register when possible."

var@(Optimizer MR LocalVariable traits) intervalSize
[
  var intervalEnd - var intervalStart
].

x@(Optimizer MR LocalVariable traits) overlaps: y@(Optimizer MR LocalVariable traits)
[
  x intervalEnd >= y intervalStart /\ [x intervalStart <= y intervalEnd]
].

Optimizer MR define: #InputOutputVariable &parents: {Optimizer MR LocalVariable}.
Optimizer MR define: #InputVariable &parents: {Optimizer MR InputOutputVariable}.
"A Function argument. Either stored in a register or on the stack.
Function arguments ideally are located in registers
whenever possible."
Optimizer MR define: #OutputVariable &parents: {Optimizer MR InputOutputVariable}.
"A Function result. The location is always a register."

Optimizer MR ensureNamespace: #OperandMode.
"All instruction types must implement a method `operandModes' which describes
how they use their operands, so that the register allocator and other phases
can interpret them.
The modes describe whether the operand is an input to the instruction,
whether it is an output of the instruction (can coexist with input mode for
read-modify-write instructions), and whether it utilizes a register, memory,
or a constant. This is accomplished by overriding the methods isInput,
isOutput, usesConstant, usesRegister, and usesMemory (among others)."
Optimizer MR OperandMode define: #Mode &parents: {Cloneable}.

_@(Optimizer MR OperandMode Mode traits) isInput
[False].

_@(Optimizer MR OperandMode Mode traits) isOutput
[False].

_@(Optimizer MR OperandMode Mode traits) usesMemory
[False].

_@(Optimizer MR OperandMode Mode traits) usesRegister
[False].

_@(Optimizer MR OperandMode Mode traits) usesConstant
[False].

Optimizer MR OperandMode define: #Or &parents: {Optimizer MR OperandMode Mode}
 &slots: {#modes -> #{}}.
"The disjunction of operand modes. May either be created with `newModes:' or
created implicitly with the \/ method defined for operand modes."

or@(Optimizer MR OperandMode Or traits) newModes: modes
[or clone `>>
  [modes: modes.]
].

x@(Optimizer MR OperandMode Mode traits) \/ y@(Optimizer MR OperandMode Mode traits)
[
  Optimizer MR OperandMode Or newModes: {x. y}
].

x@(Optimizer MR OperandMode Or traits) \/ y@(Optimizer MR OperandMode Mode traits)
[
  Optimizer MR OperandMode Or newModes: x modes ; {y}
].

x@(Optimizer MR OperandMode Mode traits) \/ y@(Optimizer MR OperandMode Or traits)
[
  Optimizer MR OperandMode Or newModes: {x} ; y modes
].

x@(Optimizer MR OperandMode Or traits) \/ y@(Optimizer MR OperandMode Or traits)
[
  Optimizer MR OperandMode Or newModes: x modes ; y modes
].

or@(Optimizer MR OperandMode Or traits) isInput
[
  or modes first isInput
].

or@(Optimizer MR OperandMode Or traits) isOutput
[
  or modes first isOutput
].

or@(Optimizer MR OperandMode Or traits) usesRegister
[
  or modes anySatisfy: [| :mode | mode usesRegister]
].

or@(Optimizer MR OperandMode Or traits) usesMemory
[
  or modes anySatisfy: [| :mode | mode usesMemory]
].

or@(Optimizer MR OperandMode Or traits) operandModes
[
  (or modes detect: [| :mode | mode usesMemory]) operandModes
].
  
or@(Optimizer MR OperandMode Or traits) usesConstant
[
  or modes anySatisfy: [| :mode | mode usesConstant]
].

Optimizer MR OperandMode define: #Label &parents: {Optimizer MR OperandMode Mode}.
"A relocatable label to some fixed offset within a module."

_@(Optimizer MR OperandMode Label traits) isInput
[True].

_@(Optimizer MR OperandMode Label traits) isConstant
[True].

Optimizer MR OperandMode define: #Constant &parents: {Optimizer MR OperandMode Mode}
 &slots: {#type -> Types Any}.
"A constant input operand (constant outputs are NOT supported). The type slot
describes acceptable constants."

c@(Optimizer MR OperandMode Constant traits) newType: type
[c cloneSettingSlots: #(type) to: {type}].

_@(Optimizer MR OperandMode Constant traits) isInput
[True].

_@(Optimizer MR OperandMode Constant traits) usesConstant
[True].

Optimizer MR OperandMode define: #Memory &parents: {Optimizer MR OperandMode Mode}.

_@(Optimizer MR OperandMode Memory traits) usesMemory
[True].

Optimizer MR OperandMode define: #Register &parents: {Optimizer MR OperandMode Mode}
 &slots: {#registerFile "The register file the register is to be allocated from."}.
"A register operand."

reg@(Optimizer MR OperandMode Register traits) newRegisterFile: rf
[reg cloneSettingSlots: #(registerFile) to: {rf}].

_@(Optimizer MR OperandMode Register traits) usesRegister
[True].

Optimizer MR OperandMode define: #IndexedRegister &parents: {Optimizer MR OperandMode Register}.
"A register stack operand. This class is mainly intended to support such
oddities as the FPU on x86 processors."

Optimizer MR OperandMode define: #Load &parents: {Optimizer MR OperandMode Memory}.
"A memory input operand."

_@(Optimizer MR OperandMode Load traits) isInput
[True].

Optimizer MR OperandMode define: #Store &parents: {Optimizer MR OperandMode Memory}.
"A memory output operand."

_@(Optimizer MR OperandMode Store traits) isOutput
[True].

Optimizer MR OperandMode define: #LoadStore &parents: {Optimizer MR OperandMode Load}.

Optimizer MR OperandMode define: #Read &parents: {Optimizer MR OperandMode Register}.
"A register input operand."

_@(Optimizer MR OperandMode Read traits) isInput
[True].

Optimizer MR OperandMode define: #Write &parents: {Optimizer MR OperandMode Register}.
"A register output operand."

_@(Optimizer MR OperandMode Write traits) isOutput
[True].

Optimizer MR OperandMode define: #ReadWrite &parents: {Optimizer MR OperandMode Read}.
"A read-modify-write Register Operand."

Optimizer MR OperandMode define: #IndexedRead &parents: {Optimizer MR OperandMode IndexedRegister}.
"A register input operand."

_@(Optimizer MR OperandMode IndexedRead traits) isInput
[True].

Optimizer MR OperandMode define: #IndexedWrite &parents: {Optimizer MR OperandMode IndexedRegister}.
"A register output operand."

_@(Optimizer MR OperandMode IndexedWrite traits) isOutput
[True].

Optimizer MR OperandMode define: #IndexedReadWrite &parents: {Optimizer MR OperandMode IndexedRead}.
"A read-modify-write Register Operand."

Optimizer MR OperandMode define: #Pop &parents: {Optimizer MR OperandMode IndexedRegister}.
"A Pop Operand. All Pops are assumed to occur before Pushes."

_@(Optimizer MR OperandMode Pop traits) isInput
[True].

Optimizer MR OperandMode define: #Push &parents: {Optimizer MR OperandMode IndexedRegister}.

_@(Optimizer MR OperandMode Push traits) isOutput
[True].

Optimizer MR OperandMode define: #PopPush &parents: {Optimizer MR OperandMode Pop}.
"A IndexedRegister read-modify-write (pop-then-push-again) Operand."


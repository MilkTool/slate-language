"TODO: Use a hierarchial scheme if this is too slow."

fun@(Optimizer MR Function traits) doForwardDataflow: block
[| seq changed |
  seq: (ExtensibleArray newSizeOf: fun basicBlocks).
  seq add: fun basicBlocks first. 
  seq
    from: 0
    to: fun basicBlocks size - 1
    do:
      [| :bb |
        block applyWith: bb.
        bb successors
          do:
            [| :succ |
              (seq includes: succ)
                ifFalse:
                  [seq add: succ]
            ]
      ].
  changed: True.
  [changed]
    whileTrue:
      [
        changed: False.
        seq do: [| :bb | changed: changed \/ (block applyWith: bb)]
      ]
].

fun@(Optimizer MR Function traits) doBackwardDataflow: block
[| seq changed |
  seq: (ExtensibleArray newSizeOf: fun basicBlocks).
  seq add: fun basicBlocks last.
  seq
    from: 0
    to: fun basicBlocks size - 1
    do:
      [| :bb |
        block applyWith: bb.
        bb predecessors
          do:
            [| :pred |
              (seq includes: pred)
                ifFalse:
                  [seq add: pred]
            ]
      ].
  changed: True.
  [changed]
    whileTrue:
      [
        changed: False. 
        seq do: [| :bb | changed: changed \/ (block applyWith: bb)]
      ] 
].

fun@(Optimizer MR Function traits) computeDepthFirstOrder
[| order workList |
  order: ExtensibleArray new.
  workList: ExtensibleArray new.
  workList addLast: fun basicBlocks first.
  [workList isEmpty]
    whileFalse:
      [| bb |
        bb: workList removeLast.
        order addLast: bb.
        bb successors do:
          [| :succ |
            (order includes: succ) \/ [workList includes: succ]
              ifFalse: [workList addLast: succ]]
      ].
  fun basicBlocks: order
].
      

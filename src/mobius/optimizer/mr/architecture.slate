Optimizer MR define: #Architecture &parents: {Cloneable}
 &slots: {#name. #registerFiles -> #{}}.

arch@(Optimizer MR Architecture traits) newNamed: name
[arch cloneSettingSlots: #(name) to: {name}].

arch@(Optimizer MR Architecture traits) addRegisterFile: rf
[
  arch registerFiles: (arch registerFiles copyWith: rf).
  rf architecture: arch.
  rf
].

Optimizer MR define: #Register &parents: {Optimizer MR Operand}
 &slots: {#name. #registerFile}.

reg@(Optimizer MR Register traits) newNamed: name type: type
[reg cloneSettingSlots: #(name type) to: {name. type}].

reg@(Optimizer MR Register traits) callerSave
[
  (reg registerFile inputRegisters includes: reg) \/
    [reg registerFile outputRegisters includes: reg]
].

reg@(Optimizer MR Register traits) calleeSave
[reg callerSave not].

reg@(Optimizer MR Register traits) readMode
[Optimizer MR OperandMode Read newRegisterFile: reg registerFile].

reg@(Optimizer MR Register traits) writeMode
[Optimizer MR OperandMode Write newRegisterFile: reg registerFile].

Optimizer MR define: #IndexedRegister &parents: {Optimizer MR Register}
 &slots: {#index -> 0}.

reg@(Optimizer MR IndexedRegister traits) newNamed: name &index: index
[| newReg |
  newReg: resend.
  index ifNotNil: [newReg index: index].
  newReg
].

reg@(Optimizer MR IndexedRegister traits) readMode
[Optimizer MR OperandMode IndexedRead newRegisterFile: reg registerFile].

reg@(Optimizer MR IndexedRegister traits) writeMode
[Optimizer MR OperandMode IndexedWrite newRegisterFile: reg registerFile].

Optimizer MR define: #RegisterFile &parents: {Cloneable} &slots:
{#architecture.
 #name.
 #registers -> {}.
 #allocatable -> False.
 #scratchRegisters -> 0.
 #inputRegisters -> {}.
 #outputRegisters -> {}}.

rf@(Optimizer MR RegisterFile traits) newNamed: name &allocatable: alloc
[| newRF |
  newRF: rf clone.
  newRF name: name.
  alloc ifNotNil: [newRF allocatable: alloc].
  newRF
].

rf@(Optimizer MR RegisterFile traits) addRegister: reg
[
  rf registers: (rf registers copyWith: reg).
  reg registerFile: rf.
  reg
].

rf@(Optimizer MR RegisterFile traits) addInputRegister: reg
[
  rf inputRegisters: (rf inputRegisters copyWith: reg).
  reg
].

rf@(Optimizer MR RegisterFile traits) addOutputRegister: reg
[
  rf outputRegisters: (rf outputRegisters copyWith: reg).
  reg
].

rf@(Optimizer MR RegisterFile traits) accepts: var
[
  rf registers first type subsumes: var type
].

(Optimizer MR define: #RegisterStack &parents: {Optimizer MR RegisterFile}
 &slots: {#stackRegisters -> #{}.
	  #IndexedRegister -> Optimizer MR IndexedRegister})
  `>> [removeSlot: #inputRegisters.
       removeSlot: #outputRegisters. ].

rs@(Optimizer MR RegisterStack traits) addStackRegister: reg
[
  rs stackRegisters: (rs stackRegisters copyWith: reg).
  reg registerFile: rs.
  reg
].

_@(Optimizer MR RegisterStack traits) addInputRegister: _
[shouldNotImplement].

_@(Optimizer MR RegisterStack traits) addOutputRegister: _
[shouldNotImplement].

rs@(Optimizer MR RegisterStack traits) inputRegisters
[rs registers].

rs@(Optimizer MR RegisterStack traits) outputRegisters
[rs registers].

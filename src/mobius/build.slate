Image define: #Definition &parents: {Cloneable} &slots:
  {#bootstrapFilenames ->
"The names of the sources used to build the kernel REPL image, in necessary
load-order."
    ({'mobius/pre-bootstrap'.
     'core/root'.
     'core/nil'.
     'core/boolean'.
     'core/namespace'.
     'core/derivable'.
     'core/numeric'.
     'core/association'.
     'core/method'.
     'core/collection'.
     'core/extensible'.
     'core/set'.
     'core/mapping'.
     'core/sequence'.
     'core/arrayed'.
     'core/integer'.
     'core/dictionary'.
     'core/string'.
     'core/symbol'.
     'core/range'.
     'core/extensibleSeq'.
     'core/sorted'.
     'core/mixin'.
     'core/stack'. "Used by the conditionStack."
     'core/condition'. "Essential error-handling logic."
     'core/condition-epilogue'. "Error types for previous libraries."
     'core/stream'. "Basic Streams, only depends on condition.slate."
     'core/stream-collections'. "Streams over previous collection libraries."
     'core/stream-transforms'. "Stream operation types."
     'core/external'. "Abstract type for external resources and streams."
     'core/console'. "Console I/O."
     'core/file'. "File I/O."
     'core/print'. "Print methods, pretty-printing (of objects, not source)."
     'core/types'. "The object-based type system."
     'syntax/init'.
     'syntax/node'.
     'syntax/token'.
     'syntax/lexer'.
     'syntax/parser'.
     'core/debugger'.
     'syntax/macro'.
     'syntax/inference'.
     'mobius/compiler'.
     'mobius/debug'.
     'mobius/post-bootstrap'.
    } collect: [| :name | 'src/' ; name ; '.slate']).
    #filename -> Nil. "The filename for the image."
    #wordSize -> (Platform Current bytesPerWord * 8). "The size of a word in bits of the image"
    #primitives -> ExtensibleArray new.
    #littleEndian -> True. "Whether to have a little-endian byte-word format."
    #bootstrapDirectory -> '.' "Where the source filename paths relate to."
  }.

Image Definition primitives clear.

inform: 'Adding primitives'.
[| :code :selector :roles | 
  Image Definition primitives add: code ->
    (Syntax MethodDefinition new `>>
       [selector: selector.
        roles: (roles collect: [| :val | val = #NoRoleObject ifFalse: [Syntax UnaryMessage sending: val]]). ]).
] applier for: #(
  (0 #asMethod:on: (MethodTraits SymbolTraits ArrayTraits))
  (1 #asAccessor:for:on: (MethodTraits SymbolTraits NoRoleObject ArrayTraits))
  (2 #_map (RootTraits))
  (3 #_map: (RootTraits MapTraits))
  (4 #addRolesFrom: (RootTraits RootTraits))
  (5 #removeFrom: (MethodTraits ArrayTraits))
  (6 #clone (CloneableTraits))
  (7 #cloneSettingSlots:to: (RootTraits ArrayTraits ArrayTraits))
  (8 #cloneWithSlot:valued: (RootTraits SymbolTraits NoRoleObject))
  (9 #cloneWithDelegate:valued: (RootTraits SymbolTraits NoRoleObject))
  (10 #cloneWithDelegate:before:valued: (RootTraits SymbolTraits NoRoleObject NoRoleObject))
  (11 #cloneWithDelegate:after:valued: (RootTraits SymbolTraits NoRoleObject NoRoleObject))
  (12 #cloneWithoutSlot: (RootTraits SymbolTraits))
  (13 #atSlotNamed: (RootTraits SymbolTraits))
  (14 #atSlotNamed: (SmallIntegerProto SymbolTraits))
  (15 #atSlotNamed:put: (RootTraits SymbolTraits NoRoleObject))
  (16 #forwardTo: (RootTraits NoRoleObject))
  (17 #newSize: (ByteArrayTraits NoRoleObject))
  (18 #size (ByteArrayTraits))
  (19 #byteAt: (ByteArrayTraits NoRoleObject))
  (20 #byteAt:put: (ByteArrayTraits NoRoleObject NoRoleObject))
  (21 #newSize: (ArrayTraits NoRoleObject))
  (22 #size (ArrayTraits))
  (23 #at: (ArrayTraits NoRoleObject))
  (24 #at:put: (ArrayTraits NoRoleObject NoRoleObject))
  (25 #ensure: (MethodTraits MethodTraits))
  (26 #applyTo: (MethodTraits ArrayTraits))
  (27 #sendTo: (SymbolTraits ArrayTraits))
  (28 #sendTo:through: (SymbolTraits ArrayTraits ArrayTraits))
  (29 #findOn: (SymbolTraits ArrayTraits))
  (30 #findOn:after: (SymbolTraits ArrayTraits NoRoleObject))
  (31 #runArgsInto: (BootstrapObject ByteArrayTraits))
  (32 #exit: (BootstrapObject SmallIntegerTraits))
  (33 #'==' (RootTraits RootTraits))
  (34 #identityHash (RootTraits))
  (35 #identityHash (SmallIntegerTraits))
  (36 #'=' (SmallIntegerTraits SmallIntegerTraits))
  (37 #'<' (SmallIntegerTraits SmallIntegerTraits))
  (38 #bitOr: (SmallIntegerTraits SmallIntegerTraits))
  (39 #bitAnd: (SmallIntegerTraits SmallIntegerTraits))
  (40 #bitXor: (SmallIntegerTraits SmallIntegerTraits))
  (41 #bitNot (SmallIntegerTraits))
  (42 #bitShift: (SmallIntegerTraits SmallIntegerTraits))
  (43 #'+' (SmallIntegerTraits SmallIntegerTraits))
  (44 #'-' (SmallIntegerTraits SmallIntegerTraits))
  (45 #'*' (SmallIntegerTraits SmallIntegerTraits))
  (46 #quo: (SmallIntegerTraits SmallIntegerTraits))
  (47 #interrupt (InterpreterTraits))
  (48 #initializeThreadOn: (InterpreterTraits NoRoleObject))
  (49 #framePointerOf: (InterpreterTraits NoRoleObject))
  (50 #stackPointer (InterpreterTraits))
  (51 #framePointer (InterpreterTraits))
  (52 #codePointer (InterpreterTraits))
  (53 #collectGarbage (BootstrapObject))
  (54 #bytesPerWord (BootstrapObject))
  (55 #firstObject (BootstrapObject))
  (56 #nextObjectAfter: (BootstrapObject NoRoleObject))
  (57 #firstObjectDelegatingTo: (BootstrapObject NoRoleObject))
  (58 #nextObjectAfter:delegatingTo: (BootstrapObject NoRoleObject NoRoleObject))
  (59 #firstObjectReferringTo: (BootstrapObject NoRoleObject))
  (60 #nextObjectAfter:referringTo: (BootstrapObject NoRoleObject NoRoleObject))
  (61 #isLastObject: (BootstrapObject NoRoleObject))
  (62 #isLastObject:delegatingTo: (BootstrapObject NoRoleObject NoRoleObject))
  (63 #isLastObject:referringTo: (BootstrapObject NoRoleObject NoRoleObject))
  (64 #read:from:into:startingAt: (ConsoleObject NoRoleObject NoRoleObject NoRoleObject NoRoleObject))
  (65 #write:to:from:startingAt: (ConsoleObject NoRoleObject NoRoleObject NoRoleObject NoRoleObject))
  (66 #flushOutput (ConsoleObject))
  (67 #handleFor: (FileTraits NoRoleObject))
  (68 #handleForInput: (FileTraits NoRoleObject))
  (69 #handleForOutput: (FileTraits NoRoleObject))
  (70 #handleForNew: (FileTraits NoRoleObject))
  (71 #close: (FileTraits NoRoleObject))
  (72 #read:from:into:startingAt: (FileTraits NoRoleObject NoRoleObject NoRoleObject NoRoleObject))
  (73 #write:to:from:startingAt: (FileTraits NoRoleObject NoRoleObject NoRoleObject NoRoleObject))
  (74 #reposition:to: (FileTraits NoRoleObject NoRoleObject))
  (75 #positionOf: (FileTraits NoRoleObject))
  (76 #atEndOf: (FileTraits NoRoleObject))
  (77 #sizeOf: (FileTraits NoRoleObject))
  (78 #saveImageNamed: (BootstrapObject NoRoleObject))
  (79 #primitiveOpen: (DirectoryTraits NoRoleObject))
  (80 #primitiveClose: (DirectoryTraits NoRoleObject))
  (81 #primitiveRead:into: (DirectoryTraits NoRoleObject NoRoleObject))
  (82 #primitiveGetCurrentDirectory: (DirectoryTraits NoRoleObject))
  (83 #primitiveSetCurrentDirectory: (DirectoryTraits NoRoleObject))
  (84 #significand (FloatTraits))
  (85 #exponent (FloatTraits))
  (86 #withSignificand:exponent: (FloatTraits NoRoleObject NoRoleObject))
  (87 #'=' (FloatTraits FloatTraits))
  (88 #'<' (FloatTraits FloatTraits))
  (89 #'+' (FloatTraits FloatTraits))
  (90 #'-' (FloatTraits FloatTraits))
  (91 #'*' (FloatTraits FloatTraits))
  (92 #'/' (FloatTraits FloatTraits))
  (93 #raisedTo: (FloatTraits FloatTraits))
  (94 #ln (FloatTraits))
  (95 #exp (FloatTraits))
  (96 #sin (FloatTraits))
  (97 #cos (FloatTraits))
  (98 #tan (FloatTraits))
  (99 #arcsin (FloatTraits))
  (100 #arccos (FloatTraits))
  (101 #arctan (FloatTraits))
  (102 #arctan: (FloatTraits FloatTraits))
  (103 #newFixedAreaSized: (ByteArrayTraits NoRoleObject))
  (104 #close: (ByteArrayTraits NoRoleObject))
  (105 #noteNewReferenceTo: (ByteArrayTraits NoRoleObject))
  (106 #write:into:startingAt: (ByteArrayTraits NoRoleObject NoRoleObject NoRoleObject))
  (107 #read:from:startingAt: (ByteArrayTraits NoRoleObject NoRoleObject NoRoleObject))
  (108 #sizeOf: (ByteArrayTraits NoRoleObject))
  (109 #resize:to: (ByteArrayTraits NoRoleObject NoRoleObject))
  (110 #addressOf:at:into: (ByteArrayTraits NoRoleObject NoRoleObject NoRoleObject))
  (111 #primitiveOpen:handle: (ExternalLibraryTraits ASCIIStringTraits ByteArrayTraits))
  (112 #primitiveClose: (ExternalLibraryTraits ByteArrayTraits))
  (113 #primitiveLookup:handle:into: (ExternalLibraryTraits ASCIIStringTraits ByteArrayTraits ByteArrayTraits))
  (114 #primitiveErrorInto: (ExternalLibraryTraits ByteArrayTraits))
  (115 #primitiveApply:accepting:callFormat:returning:to: (ExternalLibraryTraits ByteArrayTraits NoRoleObject NoRoleObject NoRoleObject ArrayTraits))
  (116 #timeSinceEpoch (BootstrapObject))
  (117 #cloneSystem (BootstrapObject))
  (118 #readFromPipe:start:end: (NoRoleObject SmallIntegerTraits SmallIntegerTraits SmallIntegerTraits))
  (119 #writeToPipe:start:end: (NoRoleObject SmallIntegerTraits SmallIntegerTraits SmallIntegerTraits))
  (120 #selectOnReadPipesFor: (ArrayTraits SmallIntegerTraits))
  (121 #selectOnWritePipesFor: (ArrayTraits SmallIntegerTraits))
  (122 #closePipe (SmallIntegerTraits))
  (123 #socketCreate:protocol: (SmallIntegerTraits SmallIntegerTraits SmallIntegerTraits))
  (124 #socketListenSize: (SmallIntegerTraits SmallIntegerTraits))
  (125 #socketAcceptConnection (SmallIntegerTraits))
    "(returns {retval. struct sockaddr}"
  (126 #socketBindOn: (SmallIntegerTraits ByteArrayTraits))
  (127 #socketConnect: (SmallIntegerTraits ByteArrayTraits))
  (128 #createIPAddress:port:options: (SmallIntegerTraits NoRoleObject NoRoleObject NoRoleObject))
    "AF_INET createIPAddress: {127. 0. 0. 1} port: 80 options: #()"
  (129 #smallIntegerMinimum (BootstrapObject))
  (130 #smallIntegerMaximum (BootstrapObject))
  (131 #socketGetError (SmallIntegerTraits))
  "lobby getAddrInfo: ('slatelanguage.org' as: ByteArray) 
       service: ('http' as: ByteArray)
       family: Net Socket Domains IP4 
       type: Net Socket Types Stream 
       protocol: Net Socket Protocols Default 
       flags: 0"
  "returns an integer to the ticket you've been assigned (since it is asynchronous)"
  (132 #getAddrInfo:service:family:type:protocol:flags: (BootstrapObject NoRoleObject NoRoleObject SmallIntegerTraits SmallIntegerTraits SmallIntegerTraits SmallIntegerTraits))
  "Gets the result of the earlier async call or Nil if it's not ready. if it's done you get an error code(int) or an array (resolved addresses)"
  (133 #getAddrInfoResult (SmallIntegerTraits))
  (134 #freeAddrInfoResult (SmallIntegerTraits))
  (135 #vmArgCount (BootstrapObject))
  (136 #vmArg: (BootstrapObject SmallIntegerTraits))
  (137 #environmentVariables (BootstrapObject))
  (138 #environmentAt:put: (BootstrapObject ASCIIStringTraits ASCIIStringTraits))
  (139 #environmentRemoveKey: (BootstrapObject ASCIIStringTraits))
  (140 #isLittleEndian (BootstrapObject))
  (141 #systemName (BootstrapObject))
  (142 #systemRelease (BootstrapObject))
  (143 #systemVersion (BootstrapObject))
  (144 #systemPlatform (BootstrapObject))
  (145 #systemMachine (BootstrapObject))
  (146 #systemExecute: (BootstrapObject ASCIIStringTraits))
  (147 #startProfiling (BootstrapObject))
  (148 #stopProfiling (BootstrapObject))
  (149 #profilerStatistics (BootstrapObject))
  (150 #deleteFileNamed: (FileTraits ASCIIStringTraits))
  (151 #replaceFrom:to:with:startingAt: (ByteArrayTraits SmallIntegerTraits SmallIntegerTraits ByteArrayTraits SmallIntegerTraits))
  (152 #renameFileNamed:to: (FileTraits ASCIIStringTraits ASCIIStringTraits))
  (153 #informationForFileNamed: (FileTraits ASCIIStringTraits))
  (154 #createDirectoryNamed: (DirectoryTraits ASCIIStringTraits))
  (155 #renameDirectoryNamed:to: (DirectoryTraits ASCIIStringTraits ASCIIStringTraits))
  (156 #deleteDirectoryNamed: (DirectoryTraits ASCIIStringTraits))
  (157 #objectPointerAddress: (BootstrapObject NoRoleObject))
  (158 #replaceFrom:to:with:startingAt: (ArrayTraits SmallIntegerTraits SmallIntegerTraits ArrayTraits SmallIntegerTraits))

).

Image Definition traits define: #cached &builder: [Dictionary new].

Image Definition cached at: 'bare' put: (Image Definition clone `setting: #(bootstrapFilenames)
 to: {{'src/mobius/pre-bootstrap.slate'}}).
"An Image Definition consisting of the bare minimum to run some primitive call,
like adding 3 + 4, say."
"TODO: refactor Image Definition so that we can just supply a block here."

def@(Image Definition traits) newNamed: filename littleEndian: littleEndian wordSize: wordSize
[
  (def clone `setting: #(littleEndian wordSize) to: {littleEndian. wordSize})
   `>> [| :newDef | filename: (newDef defaultFilename &base: filename). ]
].

def@(Image Definition traits) defaultFilename &base: base
"Generates a unique and descriptive image filename based on the definition."
[
  base `defaultsTo: 'kernel'.
  base
    ; '.' ; (def littleEndian ifTrue: ['little'] ifFalse: ['big']) "endianness"
    ; '.' ; def wordSize printString "size of a word in bits"
    ; '.' ; (lobby timeSinceEpoch as: Integer) printString "timestamp"
    ; '.image'
].

def@(Image Definition traits) generate
[| builder bootBlock dir |
  builder: (Image Bootstrap Generator new &littleEndian: def littleEndian &wordSize: def wordSize).
  def filename ifNil: [def filename: def defaultFilename].
  dir: (Directory newNamed: def bootstrapDirectory).
  bootBlock: Syntax Block new.
  bootBlock statements: ([| :out |
    (def bootstrapFilenames collect: [| :each | dir / each]) do:
      [| :file |
       inform: 'Parsing: %r', file locator.
       file mode: file Read.
       file sessionDo:
         [| :file | (Syntax Parser newOn: file ASCIIReader) >> out]]
    ] writingAs: bootBlock statements).
  inform: 'Building image: %r', def filename.
  builder generateImageBooting: bootBlock withPrims: def primitives.
  (File newNamed: def filename &mode: File CreateWrite) sessionDo:
    [| :imageFile | builder emitOn: imageFile writer].
  builder
].

i@Image generateAmd64Test
[
  ((i Definition cached at: 'bare') newNamed: 'k64' littleEndian: True wordSize: 64) generate.
].

i@Image generateAmd64
[
  (i Definition newNamed: 'amd64' littleEndian: True wordSize: 64) generate.
].

i@Image bootstrap &littleEndian: littleEndian &wordSize: wordSize
"Only to be called during or after fullCleanBootstrap to build new images
based on the new VM Definition."
[| def |
  wordSize `defaultsTo: Platform Current bytesPerWord * 8.
  littleEndian `defaultsTo: (Platform Current endianness == #LittleEndian).
  def: (i Definition newNamed: 'kernel.new' littleEndian: littleEndian wordSize: wordSize).
  def cached at: {'new'. littleEndian ifTrue: ['little'] ifFalse: ['big']. wordSize} put: def.
  def generate.
  inform: 'Generated new kernel image at: %r', def filename.
  inform: 'Suggested next command: %s -i %s', StartupArguments first, def filename.
].

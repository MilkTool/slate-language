Map traits define: #RoleEntry &parents: {Cloneable}
  &slots: {#selector. #rolePositions. #methodDefinition}.
"An object representing an entry in the object Map table for a method dispatch
installation."

r1@(Map RoleEntry traits) = r2@(Map RoleEntry traits)
[
  r1 selector == r2 selector
   /\ [r1 rolePositions = r2 rolePositions]
   /\ [r1 methodDefinition = r2 methodDefinition]
].

r@(Map RoleEntry traits) hash
[
  (r selector hash bitXor: r rolePositions hash)
    bitXor: r methodDefinition hash
].

r@(Map RoleEntry traits) appliesToPosition: dispatchIndex
[
  (r rolePositions >> dispatchIndex bitAnd: 1) = 1
].

Map traits define: #EmbeddedRoleEntry &parents: {Map RoleEntry}
  &slots: {#nextRoleIndex. #table}.
"A RoleEntry subtype for describing the dispatch record installation as-is
within the table, so that the table can be traversed."

r@(Map EmbeddedRoleEntry traits) nextRole
[
  r nextRoleIndex ifNotNilDo: [| :index | r table at: index]
].

m@(Map traits) hasRoleInTableAt: index
[
  (m roleTable at: index ifAbsent: [Nil]) isNotNil
].

m@(Map traits) roleInTableAt: index
"Takes a raw index into the RoleTable array and answers a RoleEntry object with
that as starting index, or Nil if there is none."
[
  (m roleTable at: index ifAbsent: [Nil]) ifNotNilDo:
    [| :selector |
     m EmbeddedRoleEntry
       clone `>>
         [selector := selector.
          rolePositions := m roleTable at: index + 1.
          methodDefinition := m roleTable at: index + 2.
          nextRoleIndex := m roleTable at: index + 3. ]]
].

Map traits define: #RoleReadStream &parents: {PeekableStream. ReadStream}
  &slots: {#map. #index -> 0 "The raw index into the role table."}.
"An in-order traversal stream over the role-table in a Map, returning
EmbeddedRoleEntry objects."

m@(Map RoleReadStream traits) on: map [m map := map. m].

m@(Map traits) roleReadStream [m RoleReadStream newOn: m].

obj@(Root traits) roleReader [obj _map roleReadStream].

m@(Map RoleReadStream traits) reset [m index := 0. m].

m@(Map RoleReadStream traits) reader [m].

m@(Map RoleReadStream traits) elementType [Map RoleEntry].
"
m@(Map RoleReadStream traits) isAtEnd
[m index > m map roleTable indexLast].
"

m@(Map RoleReadStream traits) peek
"Search from the current location forward to see if there is
another entry later on before we get to the end."
[| index |
  index := m index.
  map ::= m map.
  [index > map roleTable indexLast] whileFalse:
    [(map roleInTableAt: index) ifNotNilDo: [| :role | ^ role].
     index += 4].
  Nil
].

m@(Map RoleReadStream traits) isAtEnd
[
  m peek isNil
].

m@(Map RoleReadStream traits) next
[| result |
  [m isAtEnd] whileFalse:
    [result := m map roleInTableAt: m index.
     m index += 4.
     result ifNotNil: [^ result]].
  m exhausted
].

x@(Root traits) roleIndices
"Answer the position indices that the object has roles for."
[| rolePositions |
  rolePositions := (x roleReader inject: 0 into:
    [| :positions :role | positions bitOr:
      (role ifNil: [0] ifNotNil: [role rolePositions])]) last.
  [| :result |
   (rolePositions as: BitArray) doWithIndex:
     [| :isRole :index | isRole ifTrue: [result nextPut: index]]] writingAs: #{}
].

x@(Root traits) rolesSatisfying: testBlock &into: collection
[
  collection `defaultsTo: #{}.
  ((x roleReader select: testBlock) >> collection writer) contents
].

x@(Root traits) roles
"Answers all the roles applying to the object."
[
  x rolesSatisfying: [| :role | role isNotNil]
].

x@(Root traits) rolesAt: dispatchIndex
"Answer the roles applying to the object at the given argument dispatch index."
[
  x rolesSatisfying: [| :role | role isNotNil /\ [role appliesToPosition: dispatchIndex]]
].

x@(Root traits) rolesNamed: selector
"Answer the roles applying to the object for the given selector, in any
position. This will not return duplicates."
[
  x rolesSatisfying: [| :role | role isNotNil /\ [role selector == selector]]
    &into: IdentitySet new
].

x@(Root traits) rolesNamed: selector at: dispatchIndex
"Answer the roles applying to the object for the given selector, in the given
position. This will not return duplicates."
[
  x rolesSatisfying:
    [| :role | role isNotNil /\ [role selector == selector] /\
                 [role appliesToPosition: dispatchIndex]]
    &into: IdentitySet new
].

x@(Root traits) methods
[x roles collect: [| :r | r methodDefinition method]].

x@(Root traits) methodsSatisfying: testBlock &into: collection
[
  collection `defaultsTo: #{}.
  (((x roleReader select: testBlock) collect: [| :r | r methodDefinition method])
     >> collection writer) contents
].

x@(Root traits) accessorMethods
[| selectors |
  selectors := x slotNames collect: [| :s | x accessorNameFor: s].
  x methodsSatisfying: [| :r | selectors includes: r selector]
    &into: IdentitySet new
].

x@(Root traits) mutatorMethods
[| selectors |
  selectors := x slotNames collect: [| :s | x mutatorNameFor: s].
  x methodsSatisfying: [| :r | selectors includes: r selector]
    &into: IdentitySet new
].

x@(Root traits) methodsNamed: selector
[
  x methodsSatisfying: [| :r | r isNotNil /\ [r selector = selector]]
    &into: IdentitySet new
].

x@(Root traits) hasMethodNamed: selector
[
  x roleReader anySatisfy: [| :role | role isNotNil /\ [role selector == selector]]
].

x@(Root traits) methodsNamed: selector at: dispatchIndex
[
  (x rolesNamed: selector at: dispatchIndex) select:
    [| :r | r selector = selector] collect: [| :r | r methodDefinition method]
].

x@(Root traits) hasMethodNamed: selector at: dispatchIndex
[
  x roleReader anySatisfy: [| :role | role selector == selector
			      /\ [role appliesToPosition: dispatchIndex]]
].

x@(Root traits) methodsAt: dispatchIndex
[
  (x rolesAt: dispatchIndex)
    collect: [| :r | r methodDefinition method]
].

x@(Root traits) methodsSending: selector
[
  x methodsSatisfying:
    [| :r | r isNotNil /\
              [r methodDefinition method allSelectorsSent includes: selector]]
    &into: IdentitySet new
].

x@(Root traits) methodsSendingMacro: selector
[
  [| :result |
   x roleReader do:
     [| :r m |
      r ifNotNil:
        [m := r methodDefinition method.
         (m isSameAs: CompiledMethod) ifTrue:
	   [m sourceTree ifNotNilDo:
	      [| :src |
	       (src allMacroSelectorsSent includes: selector)
	         ifTrue: [result nextPut: m]]]]]]
    writingAs: IdentitySet
].


gen@(VM SSACompiler traits) generate: _@#apply* on: args from: msg result: result
[
  result `defaultsTo: gen newRegister.
  methodReg ::= gen generate: args first result: Nil.
  argRegs ::= args allButFirst collect: [| :item | gen generate: item result: Nil].
  gen emitInstruction: gen directApplyTo withParameters: {methodReg. argRegs size. result} ; argRegs from: msg.
  result
].

gen@(VM SSACompiler traits) generate: _@#applyTo: on: args from: msg result: result
[
  (args second isSameAs: nodes Array)
    ifTrue:
      [result `defaultsTo: gen newRegister.
       methodReg ::= gen generate: args first result: Nil.
       argRegs ::= args second statements collect:
         [| :item | gen generate: item result: Nil].
       gen emitInstruction: gen directApplyTo
         withParameters: {methodReg. argRegs size. result} ; argRegs
         from: msg.
       result]
    ifFalse: [resend]
].

gen@(VM SSACompiler traits) generate: _@#primitiveApply* on: args from: msg result: result
[
  result `defaultsTo: gen newRegister.
  indexReg ::= gen generate: args first result: Nil.
  argRegs ::= args second statements collect: [| :item | gen generate: item result: Nil].
  gen emitInstruction: gen primitiveDo withParameters: {indexReg. argRegs size. result} ; argRegs from: msg.
  result
].

gen@(VM SSACompiler traits) generate: _@#True on: args from: msg result: result
[
  (args first isSameAs: nodes ImplicitArgument)
    ifTrue: [gen registerFor: True from: msg result: result]
    ifFalse: [resend]
].

gen@(VM SSACompiler traits) generate: _@#False on: args from: msg result: result
[
  (args first isSameAs: nodes ImplicitArgument)
    ifTrue: [gen registerFor: False from: msg result: result]
    ifFalse: [resend]
].

gen@(VM SSACompiler traits) generate: _@#Nil on: args from: msg result: result
[
  (args first isSameAs: nodes ImplicitArgument)
    ifTrue: [gen registerFor: Nil from: msg result: result]
    ifFalse: [resend]
].

gen@(VM SSACompiler traits) generate: _@#== on: args from: msg result: result
[
  result `defaultsTo: gen newRegister.
  argRegs ::= args collect: [| :arg | gen generate: arg result: Nil].
  gen emitInstruction: gen isIdenticalTo withParameters: {result. argRegs first. argRegs second} from: msg.
  result
].

gen@(VM SSACompiler traits) generate: _@#do on: args from: msg result: result
"If the block is a literal with no variables, then inline it.
Otherwise, fall back to evaluating it via 'do'."
[
  ((block ::= args first) isSameAs: nodes Block)
    /\ [block localVariables isEmpty]
    ifTrue:
      [result `defaultsTo: gen newRegister.
       block statements isEmpty
         ifTrue: [gen emitInstruction: gen loadLiteral withParameters: {result. Nil} from: msg.
                  result]
         ifFalse: [block statements allButLastDo: [| :node | gen generate: node result: Nil].
                   gen generate: block statements last result: result]]
    ifFalse: [resend]
].

gen@(VM SSACompiler traits) generateExecutionOf: args from: msg result: result
[gen generate: #do on: args from: msg result: result].

gen@(VM SSACompiler traits) generate: _@#loop on: args from: msg result: result
"Repeatedly evaluates a block via 'do'."
[
  label ::= gen emitLabel.
  gen generateExecutionOf: args from: msg result: Nil.
  gen emitInstruction: gen jumpTo withParameters: #{}"see below" from: msg.
  gen emitBranchTo: label from: msg.
  gen registerFor: Nil from: msg result: result "return nil"
].

gen@(VM SSACompiler traits) generate: _@#isNil on: args from: msg result: result
[
  result `defaultsTo: gen newRegister.
  objReg ::= gen generate: args first result: Nil.
  gen emitInstruction: gen isNilOp withParameters: {result. objReg} from: msg.
  result
].

gen@(VM SSACompiler traits) branchTableHash: key
[
  key identityHash
].

gen@(VM SSACompiler traits) buildBranchTableMapping: keys
[| tableSize |
  tableSize := 1.
  [tableSize < keys size]
    whileTrue:
      [tableSize *= 2].
  table ::= Array newSize: tableSize * 2.
  keys do:
    [| :key hash |
     hash := (gen branchTableHash: key) bitAnd: (tableSize - 1) * 2.
     [(table at: hash) isNil]
       whileFalse:
         [key = (table at: hash)
            ifTrue:
              [error: 'Duplicate key ' ; key printString ; ' in caseOf:.'].
          (hash += 2) >= (tableSize * 2) ifTrue:
            [hash := 0]].
     table at: hash put: key].
  table
].

gen@(VM SSACompiler traits) mayInlineCaseOf: msg
"Answer whether a safe inlining is possible for a caseOf: expression without
further analysis; currently this is the case where the second argument is a
literal array, and the appropriate Associations and their elements are laid
out with literal keys."
[
  (msg arguments second isSameAs: nodes Array) /\
   [msg arguments second statements allSatisfy:
     [| :assoc |
      (assoc is: nodes Message)
        /\ [assoc selector = #->]
        /\ [assoc arguments first is: nodes Literal]
        /\ [{Symbol. ASCIIString Character. SmallInteger} anySatisfy:
          [| :proto | assoc arguments first value is: proto]]]]
].

gen@(VM SSACompiler traits) generate: _@#caseOf:otherwise: on: args from: msg result: finalResult
[
  (gen mayInlineCaseOf: msg)
   ifFalse: [^ resend].
  assocs ::= args second statements.
  labels ::= assocs collect: [| :_ | gen newLabelIndex].
  finalResult `defaultsTo: gen newRegister.
  table ::=
    gen buildBranchTableMapping:
      (assocs collect: [| :assoc | assoc arguments first value]).
  indices ::= IdentityDictionary new.
  0 below: table size by: 2 do:
    [| :index | (table at: index) ifNotNilDo: [| :val | indices at: val put: index]].

  switchKeyRegister ::= gen generate: args first result: Nil.
  gen emitInstruction: gen branchKeyed
    withParameters: {switchKeyRegister. gen registerFor: table from: msg result: Nil}
    from: msg.
  branchOffset ::= gen codeWriter position.
  gen emitInstruction: gen jumpTo from: msg.
  endLabel ::= gen newLabelIndex.
  otherwiseLabel ::= gen newLabelIndex.
  gen emitBranchTo: otherwiseLabel from: msg.

  assocs with: labels do:
    [| :assoc :label |
     gen emitLabel &labelIndex: label.
     table
       at: (indices at: assoc arguments first value) + 1
       put: (gen currentContext resolveLabel: label at: branchOffset).
     gen generateExecutionOf: {assoc arguments second} from: msg result: finalResult.
     gen emitInstruction: gen jumpTo from: msg.
     gen emitBranchTo: endLabel from: msg].

  "Handle the otherwise clause. If we didn't get a literal block for it, just
    encode a Nil-push."
  gen emitLabel &labelIndex: otherwiseLabel.
  args size >= 3
    ifTrue: [gen generateExecutionOf: {args third} from: msg result: finalResult]
    ifFalse: [gen registerFor: Nil from: msg result: finalResult].
  gen emitLabel &labelIndex: endLabel.
  finalResult
].

gen@(VM SSACompiler traits) generate: _@#caseOf: on: args from: msg result: result
"Generates a caseOf:otherwise: with a default otherwise clause."
[
  (gen mayInlineCaseOf: msg)
    ifTrue: [gen generate: #caseOf:otherwise: on: args from: msg result: result]
    ifFalse: [resend]
].

gen@(VM SSACompiler traits) generate: _@#ifTrue:ifFalse: on: args from: msg result: finalResult
"Branches to one of two blocks and evaluates it."
[
  falseLabel ::= gen newLabelIndex.
  endLabel ::= gen newLabelIndex.
  finalResult `defaultsTo: gen newRegister.
  (condReg ::= gen generate: args first result: Nil)
    ifNil: [error: 'conditional is nil: ' ; args first printString].
  gen emitInstruction: gen branchIfFalse withParameters: {condReg} from: msg.
  gen emitBranchTo: falseLabel from: msg.
  gen generateExecutionOf: {args second} from: msg result: finalResult.
  gen emitInstruction: gen jumpTo from: msg.
  gen emitBranchTo: endLabel from: msg.
  gen emitLabel &labelIndex: falseLabel.
  gen generateExecutionOf: {args third} from: msg result: finalResult.
  gen emitLabel &labelIndex: endLabel.
  finalResult
].

gen@(VM SSACompiler traits) generate: _@#ifTrue: on: args from: msg result: finalResult
"Optionally evaluates a block."
[
  falseLabel ::= gen newLabelIndex.
  endLabel ::= gen newLabelIndex.
  finalResult `defaultsTo: gen newRegister.
  (condReg ::= gen generate: args first result: Nil)
    ifNil: [error: 'conditional is nil: ' ; args first printString].
  gen emitInstruction: gen branchIfFalse withParameters: {condReg} from: msg.
  gen emitBranchTo: falseLabel from: msg.
  gen generateExecutionOf: {args second} from: msg result: finalResult.
  gen emitInstruction: gen jumpTo from: msg.
  gen emitBranchTo: endLabel from: msg.
  gen emitLabel &labelIndex: falseLabel.
  gen registerFor: Nil from: msg result: finalResult.
  gen emitLabel &labelIndex: endLabel.
  finalResult
].

gen@(VM SSACompiler traits) generate: _@#ifFalse: on: args from: msg result: finalResult
[
  falseLabel ::= gen newLabelIndex.
  endLabel ::= gen newLabelIndex.
  finalResult `defaultsTo: gen newRegister.
  (condResult ::= gen generate: args first result: Nil)
    ifNil: [error: 'conditional is nil: ' ; args first printString].
  gen emitInstruction: gen branchIfTrue withParameters: {condResult} from: msg.
  gen emitBranchTo: falseLabel from: msg.
  gen generateExecutionOf: {args second} from: msg result: finalResult.
  gen emitInstruction: gen jumpTo from: msg.
  gen emitBranchTo: endLabel from: msg.
  gen emitLabel &labelIndex: falseLabel.
  gen registerFor: Nil from: msg result: finalResult.
  gen emitLabel &labelIndex: endLabel.
  finalResult
].

gen@(VM SSACompiler traits) generate: _@#ifNil: on: args from: msg result: finalResult
[
  endLabel ::= gen newLabelIndex.
  finalResult `defaultsTo: gen newRegister.
  lhsValueReg ::= gen generate: args first result: finalResult. "do not evaluate twice"
  condReg ::= gen newRegister.
  gen emitInstruction: gen isNilOp withParameters: {condReg. lhsValueReg} from: msg.
  gen emitInstruction: gen branchIfFalse withParameters: {condReg} from: msg.
  gen emitBranchTo: endLabel from: msg.
  gen generateExecutionOf: {args second} from: msg result: finalResult.
  gen emitLabel &labelIndex: endLabel.
  finalResult
].

gen@(VM SSACompiler traits) generate: _@#ifNotNil: on: args from: msg result: finalResult
[
  endLabel ::= gen newLabelIndex.
  finalResult `defaultsTo: gen newRegister.
  lhsValueReg ::= gen generate: args first result: finalResult. "do not evaluate twice"
  condReg ::= gen newRegister.
  gen emitInstruction: gen isNilOp withParameters: {condReg. lhsValueReg} from: msg.
  gen emitInstruction: gen branchIfTrue withParameters: {condReg} from: msg.
  gen emitBranchTo: endLabel from: msg.
  gen generateExecutionOf: {args second} from: msg result: finalResult.
  gen emitLabel &labelIndex: endLabel.
  finalResult
].

gen@(VM SSACompiler traits) generate: _@#/\ on: args from: msg result: finalResult
"Optionally evaluates a block."
[
  (args second isSameAs: nodes Block)
    ifFalse: [^ resend].
  falseLabel ::= gen newLabelIndex.
  endLabel ::= gen newLabelIndex.
  finalResult `defaultsTo: gen newRegister.
  (condResult ::= gen generate: args first result: Nil)
    ifNil: [error: 'conditional is nil: ' ; args first printString].
  gen emitInstruction: gen branchIfFalse withParameters: {condResult} from: msg.
  gen emitBranchTo: falseLabel from: msg.
  gen generateExecutionOf: {args second} from: msg result: finalResult.
  gen emitInstruction: gen jumpTo from: msg.
  gen emitBranchTo: endLabel from: msg.
  gen emitLabel &labelIndex: falseLabel.
  gen registerFor: False from: msg result: finalResult.
  gen emitLabel &labelIndex: endLabel.
  finalResult
].

gen@(VM SSACompiler traits) generate: _@#\/ on: args from: msg result: finalResult
"Optionally evaluates a block."
[
  (args second isSameAs: nodes Block)
    ifFalse: [^ resend].
  falseLabel ::= gen newLabelIndex.
  endLabel ::= gen newLabelIndex.
  finalResult `defaultsTo: gen newRegister.
  (condResult ::= gen generate: args first result: Nil)
    ifNil: [error: 'conditional is nil: ' ; args first printString].
  gen emitInstruction: gen branchIfTrue withParameters: {condResult} from: msg.
  gen emitBranchTo: falseLabel from: msg.
  gen generateExecutionOf: {args second} from: msg result: finalResult.
  gen emitInstruction: gen jumpTo from: msg.
  gen emitBranchTo: endLabel from: msg.
  gen emitLabel &labelIndex: falseLabel.
  gen registerFor: True from: msg result: finalResult.
  gen emitLabel &labelIndex: endLabel.
  finalResult
].

gen@(VM SSACompiler traits) generate: _@#whileTrue: on: args from: msg result: finalResult
"Repeatedly evaluates a block while it returns True."
[
  endLabel ::= gen newLabelIndex.
  label ::= gen emitLabel.
  (condResult ::= gen generateExecutionOf: {args first} from: msg result: Nil)
    ifNil: [error: 'conditional is nil: ' ; args first printString].
  gen emitInstruction: gen branchIfFalse withParameters: {condResult} from: msg.
  gen emitBranchTo: endLabel from: msg.
  gen generateExecutionOf: {args second} from: msg result: Nil.
  gen emitInstruction: gen jumpTo from: msg.
  gen emitBranchTo: label from: msg.
  gen emitLabel &labelIndex: endLabel.
  gen registerFor: Nil from: msg result: finalResult
].

gen@(VM SSACompiler traits) generate: _@#whileFalse: on: args from: msg result: finalResult
"Repeatedly evaluates a block while it returns False."
[
  endLabel ::= gen newLabelIndex.
  label ::= gen emitLabel.
  (condResult ::= gen generateExecutionOf: {args first} from: msg result: Nil)
    ifNil: [error: 'conditional is nil: ' ; args first printString].
  gen emitInstruction: gen branchIfTrue withParameters: {condResult} from: msg.
  gen emitBranchTo: endLabel from: msg.
  gen generateExecutionOf: {args second} from: msg result: Nil.
  gen emitInstruction: gen jumpTo from: msg.
  gen emitBranchTo: label from: msg.
  gen emitLabel &labelIndex: endLabel.
  gen registerFor: Nil from: msg result: finalResult
].

gen@(VM SSACompiler traits) generate: _@#whileTrue on: args from: msg result: result
"Repeatedly evaluates a block while it returns True."
[
  label ::= gen emitLabel.
  (condResult ::= gen generateExecutionOf: args from: msg result: Nil)
    ifNil: [error: 'conditional is nil: ' ; args first printString].
  gen emitInstruction: gen branchIfTrue withParameters: {condResult} from: msg.
  gen emitBranchTo: label from: msg.
  gen registerFor: Nil from: msg result: result
].

gen@(VM SSACompiler traits) generate: _@#whileFalse on: args from: msg result: result
"Repeatedly evaluates a block while it returns False."
[
  label ::= gen emitLabel.
  (condResult ::= gen generateExecutionOf: args from: msg result: Nil)
    ifNil: [error: 'conditional is nil: ' ; args first printString].
  gen emitInstruction: gen branchIfFalse withParameters: {condResult} from: msg.
  gen emitBranchTo: label from: msg.
  gen registerFor: Nil from: msg result: result
].

gen@(VM SSACompiler traits) generate: _@#primitiveDo: on: args from: msg result: result
[
  result `defaultsTo: gen newRegister.
  indexReg ::= gen generate: args first result: Nil.
  argRegs ::= args second statements collect: [| :item | gen generate: item result: Nil].
  gen emitInstruction: gen primitiveDo withParameters: {indexReg. argRegs size. result} ; argRegs from: msg.
  result
].

gen@(VM SSACompiler traits) generate: _@#fill:with: on: args from: msg result: result
[| index value tempVar |
  block ::= args first.
  index := args second.
  value := args third.
  (block isSameAs: nodes Block)
    /\ [index isSameAs: nodes Literal]
    /\ [block inputVariables acceptsKey: index value]
    ifFalse: [^ resend].
  (value isSameAs: nodes Literal)
    ifFalse:
      [tempVar := gen currentMethod sourceTree addVariable.
       gen generate: (nodes StoreVariable of: value into: tempVar) result: Nil. "fixme"
       value := nodes LoadVariable from: tempVar].
  index := index value.
  var ::= block inputVariables at: index.
  block inputVariables := block inputVariables copyWithoutAt: index.
  block localVariables
    replaceFrom: index
    below: block localVariables indexLast
    with: block localVariables
    startingAt: index + 1.
  block localVariables at: block localVariables indexLast put: var.
  block statements :=
    {nodes StoreVariable of: value into: var} ; block statements.
  gen generate: block result: result
].

gen@(VM SSACompiler traits) generate: _@#<-* on: args from: msg result: result
"Optimizes currying calls on literal blocks using #fill:with:."
[
  (args first isSameAs: nodes Block)
    ifTrue:
      [gen
         generate: #fill:with:
         on: (args copyWith:
                (nodes Literal for: args first inputVariables indexLast) at: 1)
         from: msg
         result: result]
    ifFalse: [resend]
].

"This file exists so that the build-up of the full standard image may be
customized without requiring a full bootstrap. This is loaded by post-bootstrap
code which is compiled in to the kernel image."

here load: 'src/mobius/map.slate'.

#(numerics load: _) `er for: {
  'src/lib/fraction.slate'.
  'src/lib/complex.slate'.
}.

numerics load: 'src/lib/numericMixin.slate' &imports: {Mixins -> #Mixin}.

#(collections load: _) `er for: {
  'src/lib/linkedlist.slate'. "Collection ExtensibleSequence"
  'src/lib/cord.slate'. "Sequence"
  'src/lib/sortedSet.slate'.
}.

collections load: 'src/lib/traversal.slate' &imports:
  {streams -> #ReadStream. prototypes -> #Root}. "Collection Sequence IdentitySet Stack"

prototypes load: 'src/lib/lookup.slate'.

_@prototypes lobby [here].
_@prototypes Syntax [Syntax].
prototypes import: #nodes from: here.
prototypes load: 'src/lib/path.slate' &imports:
  {streams -> #ReadStream. collections -> #TraversalStream}. "lobby IdentitySet"
prototypes load: 'src/lib/tokenizer.slate'.

collections load: 'src/lib/subsequence.slate' &imports:
  {streams -> #WriteStream. Mixins -> #PrettyPrinterMixin. prototypes -> #Root}.
#(collections load: _) `er for: {
  'src/lib/bag.slate'. "ExtensibleCollection Dictionary Collection PrettyPrinterMixin"
  'src/lib/queue.slate'. "ArrayBacked Sequence"
}.
collections load: 'src/lib/repetition.slate' &imports:
  {Mixins -> #PrettyPrinterMixin. prototypes -> #Root}.
mappings load: 'src/lib/mapping-epilogue.slate' &imports: {collections -> #Set}.
collections load: 'src/lib/ringbuffer.slate'. "Queue"
streams load: 'src/lib/buffer.slate' &imports:
  {collections -> {#RingBuffer. #Sequence}}. "Stream BufferStream WriteStream ReadStream"
collections load: 'src/lib/multi-dimensional.slate' &imports: {
  mappings -> #Mapping.
  streams -> {#ReadStream. #WriteStream. #PositionableStream}.
  numerics -> #Integer.
  prototypes -> {#Method. #Boolean}.
  globals -> #Nil
}. "also Range"

Syntax load: 'src/lib/precedence.slate' &imports: {collections -> #Stack}.

here load: 'src/lib/inspect.slate'.
prototypes load: 'src/lib/directory.slate'.
#(here load: _) `er for: {
  'src/lib/time.slate'.
  'src/lib/concurrency.slate'.
  'src/lib/observer.slate'.
  'src/lib/method.slate'.
  'src/mobius/role.slate'.
  'src/lib/image.slate'.
  'src/lib/method-query.slate'.
  'src/mobius/memory.slate'.
  'src/mobius/disassemble.slate'.
  'src/mobius/primitive-method.slate'.
  'src/lib/repl.slate'.
}.

lobby ensureNamespace: #C.
(Types ensureNamespace: #C)
  load: 'src/mobius/types.slate'
  &imports: {here -> #Types. prototypes -> #Cloneable. globals -> #{#Nil. #False}. collections -> #ExtensibleArray}.
prototypes load: 'src/lib/extlib.slate' &imports: {Types -> #C}.
prototypes load: 'src/lib/devsupport.slate'.

prototypes load: 'src/lib/platform.slate' &imports: {globals -> #Image}.

"Totally optional, makes for pretty source output and enables C code output."
load: 'src/syntax/print.slate'.

"Loads AutoLoader definitions from the standard file database."
load: 'src/lib/module.slate'.
AutoLoader readStorage.

"Print the greeting banner and start a REPL - or whatever else you want."
inform: 'Hi, there!'.
inform: 'Please save your image now, (eg. "Image saveNamed: \'slate.image\'.") to avoid repeating this initialization.'.

"Define the REPL as the primary setup for this image. This is called by the
bootstrap method."
_@lobby start [REPL start].

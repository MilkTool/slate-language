define: #Type &basedOn: Types Type &slots: {#dispatcher -> Cloneable clone}.
"A dispatching object for statically determining which pidgin method to invoke."

t@(Type traits) clone
[
  resend `>> [dispatcher := t dispatcher clone. ]
].

t@(Type traits) dependencies
[Set new `>> [addDependency: t withVisited: Set new. remove: t. ]].

c addDependency: t@(Type traits) withVisited: visited
[
].

t@(Type traits) alignment
[| bits |
  (bits := t bitSize) >= LongInt bitSize \/ [bits = 0]
    ifTrue: [LongInt bitSize]
    ifFalse: [bits]
].

t@(Type traits) byteSize
[
  (t bitSize + Char bitSize - 1) // Char bitSize
].

t@(Type traits) wordSize
[
  (t bitSize + LongInt bitSize - 1) // LongInt bitSize
].

define: #NamedType &basedOn: Type &slots: {#cName}.

define: #Pointer &basedOn: Type &slots: {#targetType}.

p@(Pointer traits) to: targetType
"Creates a new Pointer Type for the targetType."
"TODO: Map an IdentityDictionary from types to types of pointers to those
types, and unify implicitly?"
[
  p clone `>> [targetType := targetType. ]
].

p@(Pointer traits) cName ['P' ; p targetType slateName].
p@(Pointer traits) slateName ['UndefinedSlatePointer'].


_@(Pointer traits) bitSize
[
  LongInt bitSize
].

t@(Type traits) pointer
[
  Pointer to: t
].

p@(Pointer traits) = q@(Pointer traits)
[p targetType = q targetType].

c addDependency: p@(Pointer traits) withVisited: visited
[
  (visited includes: p)
    ifFalse:
      [visited include: p.
       (p targetType isSameAs: Synonym)
          ifTrue: [c addDependency: p targetType withVisited: visited]]
].

define: #Integer &basedOn: Type &slots: {#pointerType. #cPrintName}.

_@(Integer traits) baseByteSize [overrideThis].

n@(Integer traits) byteSize &platform: p
[
  n baseByteSizeOn: (p `defaultsTo: Platform Current)
].

n@(Integer traits) bitSize &platform: p
[(n byteSize &platform: p) * 8].

n@(Integer traits) cName
[n cPrintName `defaultsTo: n printName name fromCamelCase].

n@(Integer traits) slateName
[n printName].

n@(Integer traits) pointer
[n pointerType `defaultsTo: (Pointer to: n)].

define: #Signed &basedOn: Integer.
define: #Unsigned &basedOn: Integer.

define: #Char &basedOn: Signed.
_@(Char traits) baseByteSizeOn: _ [1].
define: #UnsignedChar &basedOn: Unsigned.
_@(UnsignedChar traits) baseByteSizeOn: _ [1].
define: #ShortInt &basedOn: Signed.
_@(ShortInt traits) baseByteSizeOn: _ [2].
define: #UnsignedShortInt &basedOn: Unsigned.
_@(UnsignedShortInt traits) baseByteSizeOn: _ [2].
define: #LongInt &basedOn: Signed.
_@(LongInt traits) baseByteSizeOn: p [p bytesPerWord].
define: #UnsignedLongInt &basedOn: Unsigned.
_@(UnsignedLongInt traits) baseByteSizeOn: p [p bytesPerWord].
define: #LongLongInt &basedOn: Signed.
_@(LongLongInt traits) baseByteSizeOn: p [p bytesPerWord * 2].
define: #UnsignedLongLongInt &basedOn: Unsigned.
_@(UnsignedLongLongInt traits) baseByteSizeOn: p [p bytesPerWord * 2].
define: #Float &basedOn: Type.
_@(Float traits) baseByteSizeOn: p [4].
define: #Double &basedOn: Float.
_@(Double traits) baseByteSizeOn: p [8].
define: #Void &basedOn: Type.
_@(Void traits) baseByteSizeOn: _ [0].

define: #FixedInteger &basedOn: Integer.

define: #FixedSigned &basedOn: FixedInteger.
define: #FixedUnsigned &basedOn: FixedInteger.

define: #Modifier &basedOn: Type &slots: {#baseType -> Type}.

t@(Modifier traits) cName [t modifierName ; ' ' ; t baseType cName].

m@(Modifier traits) for: b
[m clone `>> [baseType := b. ]].

define: #Mutability &basedOn: Modifier.
define: #Const &basedOn: Mutability.
_@Const modifierName [#const].
t@(Type traits) const [Const for: t].
define: #Volatile &basedOn: Mutability.
_@Volatile modifierName [#volatile].
t@(Type traits) volatile [Volatile for: t].

define: #Storage &basedOn: Modifier.
Storage traits None     ::= Storage clone.
Storage traits Auto     ::= Storage clone.
_@(Storage Auto traits) modifierName [#auto].
t@(Type traits) auto [Storage Auto for: t].
Storage traits Static   ::= Storage clone.
_@(Storage Static traits) modifierName [#static].
t@(Type traits) static [Storage Static for: t].
Storage traits Extern   ::= Storage clone.
_@(Storage Extern traits) modifierName [#extern].
t@(Type traits) extern [Storage Extern for: t].
Storage traits Register ::= Storage clone.
_@(Storage Register traits) modifierName [#register].
t@(Type traits) register [Storage Register for: t].

define: #Array &basedOn: Type &slots:
  {#elementType -> UnsignedLongInt.
   #size -> Nil}.

t@(Array traits) of: elementType size: size
[t clone `>> [elementType := elementType. size := size. ]].

t@(Array traits) of: elementType
[t of: elementType size: Nil].

c addDependency: t@(Array traits) withVisited: visited
[
  (visited includes: t)
    ifFalse:
      [
        visited include: t.
        c addDependency: t elementType withVisited: visited
      ]
].

t@(Array traits) bitSize
[
  t elementType bitSize * t size
].

define: #Synonym &basedOn: NamedType
  &slots: {#targetType. #pointer -> Pointer. #isExported -> False}.

t@(Synonym traits) newNamed: name type: type
[
  t clone `>> [| :newT |
    cName := name.
    pointer := t pointer to: newT.
    targetType := type. ]
].

t@(Synonym traits) export
[
  t isExported := True.
  t
].

c addDependency: t@(Synonym traits) withVisited: visited
[
  (visited includes: t)
    ifFalse:
      [visited include: t.
       c include: t.
       c addDependency: t targetType withVisited: visited]
].

t@(Synonym traits) bitSize
[
  t targetType bitSize
].

define: #Structure &basedOn: NamedType
  &slots: {#basis. #pointer -> Pointer. #isExported -> False.
	   #elementSpecs -> ExtensibleArray new}.

t@(Structure traits) newNamed: name basedOn: basis
[
  t clone `>>
   [| :newT | cName := name. basis := basis.
    pointer := t pointer to: newT.
    "pointer rules rawAddDelegate: #basisPointer valued: basis pointer rules.
    pointer dispatcher rawAddDelegate: #basisPointer valued: basis pointer dispatcher."
    elementSpecs := basis elementSpecs copy.
    elementSpecs do:
      [| :se | [| :_ | se type] asMethod: se cName asInferenceRule
				on: {newT}]. ]
].

t@(Structure traits) newNamed: name
[
  t clone `>> [| :newT |
    cName := name.
    basis := Nil.
    pointer := t pointer to: newT.
    elementSpecs := t elementSpecs new. ]
].

t@(Structure traits) export
[
  t isExported := True.
  t
].

c addDependency: t@(Structure traits) withVisited: visited
[
  (visited includes: t)
    ifFalse:
      [
        visited include: t.
        c include: t.
        t elementSpecs do: [| :se | c addDependency: se type withVisited: visited]
      ]
].

t@(Structure traits) doElements: block
[| previousSE bits |
  previousSE := t elementSpecs first.
  block applyTo: {previousSE. 0}.
  bits := previousSE bitSize.
  t elementSpecs allButFirstDo:
    [| :se |
      previousSE packed /\ [se packed]
        ifFalse:
          [| alignment |
            alignment := se type alignment.
            previousSE packed
              ifTrue:
                [alignment := alignment max: previousSE type bitSize].
            bits := (bits / alignment) ceiling * alignment].
      block applyTo: {se. bits}.
      bits += se bitSize.
      previousSE := se]
].

t@(Type traits) walkElements: block &bitOffset: offset
[
  t walkElements: block withPath: Stack new atBitOffset: (offset ifNil: [0])
].

_@(Type traits) walkElements: _ withPath: _ atBitOffset: _
[
].

t@(Structure traits) walkElements: block withPath: path atBitOffset: baseOffset
[
  t doElements:
    [| :se :offset |
     path push: se.
     block applyTo: {path. baseOffset + offset}.
     se type walkElements: block withPath: path atBitOffset: baseOffset + offset.
     path pop]
].

t@(Structure traits) unpaddedSize
[| lastSE lastOffset |
  t elementSpecs isEmpty
    ifTrue: [^ 0].
  t doElements:
    [| :se :offset |
      lastSE := se.
      lastOffset := offset].
  lastOffset + lastSE bitSize
].

t@(Structure traits) alignment
[
  t elementSpecs inject: 0 into:
    [| :maxAlign :se | maxAlign max: se type alignment]
].

t@(Structure traits) bitSize
[| maxAlign |
  maxAlign := t alignment.
  (t unpaddedSize / maxAlign) ceiling * maxAlign
].


define: #Union &basedOn: Structure.

t@(Union traits) doElements: block
[
  t elementSpecs do:
    [| :se | block applyTo: {se. 0}]
].

t@(Union traits) unpaddedSize
[| maxSize |
  maxSize := 0.
  t doElements:
    [| :se :_ |
      maxSize := maxSize max: se type bitSize].
  maxSize
].

define: #StructureElement &basedOn: NamedType
  &slots: {#type -> UnsignedLongInt}.

se@(StructureElement traits) newNamed: name type: type
[
  se clone `>> [cName := name. type := type. ]
].

t@(Structure traits) addElement: se
[
  t elementSpecs
    do: [| :each | each cName = se cName
          ifTrue: [warn: 'Attempted Redefinition of type StructureElement, named "' ; each cName ; '".'.
            ^ each]].
  [| :_ | se type] asMethod: se cName asInferenceRule on: {t}.
  [| :_ | se type] asMethod: se cName asInferenceRule on: {t pointer}.
  t elementSpecs addLast: se
].

t@(Structure traits) addElementNamed: name &type
[
  type `defaultsTo: UnsignedLongInt.
  t addElement: (StructureElement newNamed: name type: type)
].

t@(StructureElement traits) bitSize
[
  t type bitSize
].

_@(StructureElement traits) packed
[
  False
].

define: #PackedStructureElement &basedOn: StructureElement
  &slots: {#bitSize -> 0}.

se@(PackedStructureElement traits) newNamed: name size: size
[
  (se newNamed: name type: UnsignedLongInt) `>> [bitSize := size. ]
].

t@(Structure traits) addPackedElementNamed: name size: size
[
  t addElement: (PackedStructureElement newNamed: name size: size)
].

_@(PackedStructureElement traits) packed
[True].

define: #Function &basedOn: Type
  &slots: {#argumentTypes -> {}. #resultType -> Void}.

fun@(Function traits) from: argumentTypes to: resultType
[
  fun clone `>>
   [| :newFun | argumentTypes := argumentTypes as: newFun argumentTypes.
    resultType := resultType. ]
].

define: #FunctionPointer &basedOn: Pointer.

fun@(Function traits) pointer
[
  FunctionPointer to: fun
].

_@(FunctionPointer traits) from: argumentTypes to: resultType
[
  (Function from: argumentTypes to: resultType) pointer
].

define: #Module &basedOn: Type.


#!/usr/local/bin/slate
#scriptArgs ::= StartupArguments allButFirst: 3.

#options := (scriptArgs select: [| :arg | arg first = $-] collect: #allButFirst`er) join &separator: Nil.

(options detect: [| :each | ('wlcm' includes: each) not])
  ifNotNilDo: [| :char | error: 'Illegal option - ' ; (char as: String)].

options isEmpty ifTrue: [options := 'clw'].

#rawInputs :=
(scriptArgs indexOf: [| :each | (each first = $-) not])
  ifNil: [{Console}]
  ifNotNilDo:
    [| :index |
     ((index below: scriptArgs indexLast)
       collect: [| :idx | File newNamed: (scriptArgs at: idx)])].

#countTypes ::= {#byte. #word. #line}.

#countFlags := Dictionary new*,
  #byte -> (options includes: $c),
  #word -> (options includes: $w),
  #line -> (options includes: $l).

#counts := Dictionary new*,
  #byte -> (rawInputs collect: [| :_ | Counter newOn: 0]),
  #word -> (rawInputs collect: [| :_ | Counter newOn: 0]),
  #line -> (rawInputs collect: [| :_ | Counter newOn: 0]).

rawInputs doWithIndex:
  [| :in :idx |
   in reader sessionDo:
     [| :r pipe |
      pipe := r.
      countTypes do: [| :type |
        (countFlags at: type) ifTrue: [pipe := pipe echoTo: ((counts at: type) at: idx)]]].

_@here printCountsAt: index
[
  countTypes do: [| :type |
    (countFlags at: type)
      ifTrue: [Console ; '\t' ; ((counts at: type) at: index) contents printString].
].

rawInputs size > 1
  ifTrue:
    [rawInputs doWithIndex:
      [| :in :index |
       printCountsAt: index.
       Console ; ' ' ; ((in is: File) ifTrue: [in filename] ifFalse: ['']) ; '\n'].
     countTypes do: [| :type |
       (countFlags at: type)
         ifTrue: [Console ; '\t' ; (((counts at: type) collect: #contents `er) reduce: #+`er) printString]].
     Console ; ' total\n']
  ifFalse: [printCountsAt: 0. Console ; '\n'].

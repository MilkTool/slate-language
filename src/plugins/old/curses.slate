terminals define: #CursesConsole &parents: {StructuredConsole}.

CursesConsole traits `>> [
  define: #Lib &builder:
    [ExternalInterface newForLibrary: 'ncurses-console' primitives:
      #((Boolean isAvailable          ())
	(Boolean enterStructuredMode  ())
	(Boolean leaveStructuredMode  ())
	(CString keySequenceOf        (CString))
	(Int     columns              ())
	(Int     rows                 ())
	(Boolean write                (Bytes Int Int))
	(Boolean clear                ())
	(Boolean clearToEOS           ())
	(Boolean clearToEOL           ())
	(Boolean scroll               (Int))
	(Boolean moveToXY             (Int Int))
	(Int     cursorX              ())
	(Int     cursorY              ())
	(Int     nextEvent            (Int))
	(Boolean hasEvent             ())
	(Boolean flush                ())
	(Boolean deleteChar           ())
	(Boolean deleteLines          (Int))
	(Boolean insertLines          (Int))
	(Int     hideCursor           ())
	(Int     showCursor           ())
	(Void    setAttributes        (Int Int))
	(Int     maxColorPairs        ())
	(Boolean initColorPair        (Int Int Int))
       ) &leader: 'sc_'].
  addSlot: #maxColorPairs.
  addSlot: #currentColorPair.
  addSlot: #colorToPairs.
  colorToPairs: Dictionary new.

  "Create new prorotypes for the streams for methods we install on them"
  define: #EventStream &parents: {CursesConsole EventStream}.
  "define: #ReadStream &parents: {CursesConsole ReadStream}. we don't override anything for now"
  define: #WriteStream &parents: {CursesConsole WriteStream}.
  define: #ReadWriteStream &parents: {CursesConsole ReadStream. CursesConsole WriteStream}.
].

w@(CursesConsole WriteStream traits) next: n putAll: seq startingAt: start
"Override the generic cursor tracking mechanism with reading the cursor position
after the output"
[| result c |
  result: resend.
  c: w resource.
  c moveCursorTo: {c actualCursorColumn. c actualCursorRow}.
  result
].

c@(CursesConsole traits) updateCursorPositionFrom: col@(Collection traits)
[
  "Hide implementation, we will read the curses cursor position after the write"
].

_@(CursesConsole traits) elementType
[Character].

_@(CursesConsole traits) collectionType
[String].

c@(CursesConsole traits) isAvailable
[
  c Lib enable.
  c Lib primitives isAvailable do
].

c@(CursesConsole traits) enterStructuredMode
[
  (c Lib primitives enterStructuredMode do)
    ifTrue: 
      [c maxColorPairs: c Lib primitives maxColorPairs do.
       c currentColorPair: 0.
       c colorToPairs: c colorToPairs new.
       c Lib primitives clear do.
       True]
    ifFalse:
      [error: 'Curses console plugin failed to switch to structured mode'.
       False]
].

c@(CursesConsole traits) leaveStructuredMode
[| result |
  result: c Lib primitives leaveStructuredMode do.
  c Lib primitives slotNamesAndValuesDo: [| :name :value |
    (value is: ExternalMethod) ifTrue:
      [value close. c Lib primitives removeSlot: name]].
  c Lib disable.
  result
].

c@(CursesConsole traits) initKeyMappings
[
  c keyCodeToKeyName clear.
  c sequenceToKeyName clear.

  #((UpArrow    'kcuu1')
    (DownArrow  'kcud1')
    (RightArrow 'kcuf1')
    (LeftArrow  'kcub1')
    (Home       'khome')
    (Insert     'kich1')
    (Delete     'kdch1')
    (End        'kend')
    (PageUp     'kpp')
    (PageDown   'knp')

    (Enter      'kind' $\n)
    (Backspace  'kbs')
    (Tab        'ktab' $\t)
  ) do: [| :entry keyName cursesName |
    keyName: entry first.
    cursesName: entry second.

    (c Lib primitives keySequenceOf applyTo: {cursesName as: String})
      ifNil: [
        c ; 'Warning: Can\'t find TerminInfo entry for "' ; cursesName ; '" which is key "' ; keyName ; '"\n'.
        ]
      ifNotNilDo: [| :sequence char |
        entry size >= 3 ifTrue: [char: entry third].
        sequence size = 1
          ifTrue: [c keyCodeToKeyName at: (sequence first as: Integer) put: {keyName. char}]
          ifFalse: [
            sequence size = 2 /\ [sequence first = $^]
              ifTrue: [
                c keyCodeToKeyName
                  at: ((sequence second as: Integer) bitOr: 2r01000000)
                  put: {keyName. char}]
              ifFalse: [| keyCode |
                sequence size = 4 /\ [sequence first = $\\]
                  /\ [(keyCode: ((sequence copyFrom: 1) as: Integer &radix: 8)) ~= 0]
                    ifTrue: [c keyCodeToKeyName at: keyCode put: {keyName. Nil}]
                    ifFalse: [c sequenceToKeyName at: sequence put: keyName]]]].
  ].

  "Add function keys"
  0 to: 63 do: [| :index indexStr |
    indexStr: (index as: String).
    (c Lib primitives keySequenceOf applyTo: {'kf' ; indexStr})
      ifNotNilDo: [| :sequence |
        c sequenceToKeyName at: sequence put: ('Function' ; indexStr as: Symbol)].
  ].

  "Fill the holes with defaults"
  resend
].

"The exported primitives as methods"

c@(CursesConsole traits) actualColumns
[
  c assumeStructuredMode.
  c Lib primitives columns do
].

c@(CursesConsole traits) actualRows
[
  c assumeStructuredMode.
  c Lib primitives rows do
].

c@(CursesConsole traits) clear
[
  c assumeStructuredMode.
  c Lib primitives clear do
].

c@(CursesConsole traits) clearToEOS
[
  c assumeStructuredMode.
  c Lib primitives clearToEOS do
].

c@(CursesConsole traits) clearToEOL
[
  c assumeStructuredMode.
  c Lib primitives clearToEOL do
].

c@(CursesConsole traits) moveCursorTo: pos
[
  c assumeStructuredMode.
  c Lib primitives moveToXY applyTo: {pos first. pos second}.
  resend
].

c@(CursesConsole traits) actualCursorColumn
[
  c assumeStructuredMode.
  c Lib primitives cursorX do
].

c@(CursesConsole traits) actualCursorRow
[
  c assumeStructuredMode.
  c Lib primitives cursorY do
].

c@(CursesConsole traits) scroll &lines: lines
[
  c assumeStructuredMode.
  lines ifNil: [lines: 1].
  c Lib primitives scroll applyTo: {lines}
].

c@(CursesConsole traits) readEscapedKeyInto: event
[| keyCode seq count |
  seq: '' writer.
  count: 0.
  "Read up to 4 key codes without blocking"
  [(keyCode: (c Lib primitives nextEvent applyTo: {0})) > 0 /\
    [count <= 4]]
      whileTrue: [| result |
        count: count + 1.
        "Reenter for double escaped keys like alt+right arrow"
        count = 1 /\ [keyCode = 27]
          ifTrue: [
            event leftAltState: True.
            ^ (c readEscapedKeyInto: event)].
        seq nextPut: (keyCode as: ASCIICharacter).
        (c translateEscapedSequence: seq contents into: event)
          ifTrue: [^ Nil]].
  "If nothing was read unblockingly then it's a simple Escape"
  count isZero ifTrue: [event keyName: #Escape].
].

c@(CursesConsole traits) write: n to: handle from: array startingAt: start
[
  c assumeStructuredMode.
  c Lib primitives write applyTo: {array. n. start}.
  n
].

c@(CursesConsole traits) flush
[
  c assumeStructuredMode.
  c Lib primitives flush do
].

c@(CursesConsole traits) deleteChar
[
  c assumeStructuredMode.
  c Lib primitives deleteChar do
].

c@(CursesConsole traits) deleteLines: n
[
  c assumeStructuredMode.
  c Lib primitives deleteLines applyTo: {n}
].

c@(CursesConsole traits) insertLines: n
[
  c assumeStructuredMode.
  c Lib primitives insertLines applyTo: {n}
].

c@(CursesConsole traits) hideCursor
[
  c assumeStructuredMode.
  c Lib primitives hideCursor do
].

c@(CursesConsole traits) showCursor
[
  c assumeStructuredMode.
  c Lib primitives showCursor do
].

c@(CursesConsole traits) ensurePairForFg: fg forBg: bg
[
  c colorToPairs at: fg <> bg ifAbsentPut:
    [| oldPair |
     oldPair: c currentColorPair.
     oldPair >= c maxColorPairs ifTrue:
      [error: 'Ran out of terminal color pairs (this is how lame ncurses is with its color pairs)'].
    c currentColorPair: oldPair + 1.
    c Lib primitives initColorPair applyTo: {oldPair. fg. bg}.
    oldPair]
].

c@(CursesConsole traits) attributeMode: mode
[
  c setAttributeMode: mode withFg: c currentFgColor withBg: c currentBgColor.
  resend
].

c@(CursesConsole traits) foregroundColor: fg
[
  c setAttributeMode: c currentMode withFg: fg withBg: c currentBgColor.
  resend
].

c@(CursesConsole traits) backgroundColor: bg
[
  c setAttributeMode: c currentMode withFg: c currentFgColor withBg: bg.
  resend
].

c@(CursesConsole traits) setAttributeMode: mode withFg: fg withBg: bg
"This is the primitive"
[
  c assumeStructuredMode.
  c Lib primitives setAttributes applyTo: {mode. c ensurePairForFg: fg forBg: bg}.
].

"Event stream stuff"

s@(CursesConsole EventStream traits) hasNext
[| c |
  c: s console.
  c assumeStructuredMode.
  c Lib primitives hasEvent do
].

s@(CursesConsole EventStream traits) next
[| c keyCode |
  c: s console.
  c assumeStructuredMode.
  keyCode: (c Lib primitives nextEvent applyTo: {-1}).
  
  keyCode caseOf: {
    410 -> [
      c resized.
      ^ (c ResizeEvent new)].

    127 -> [
      ^ ((c KeyDownEvent newForKeyCode: 8) `>> [
            keyName: #BackSpace.
            leftControlState: True. ])].

    27 -> [| event |
      event: (c KeyDownEvent newForKeyCode: keyCode).
      c readEscapedKeyInto: event.
      "event keyName ifNil: [unknown key sequence]."
      ^ event].
  } otherwise: [
    c resolveEvent: (c KeyDownEvent newForKeyCode: keyCode)]
].


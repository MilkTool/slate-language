prototypes define: #Platform
  &slots: {#name -> ''.
	   #nodeName -> ''.
	   #systemRelease -> ''.
	   #systemVersion -> ''.
	   #machine -> ''.
	   #endianness -> #LittleEndian.
	   #bytesPerWord -> 4}.

p@(Platform traits) updateWithCurrentValues
[
  p `>>
   [name: p Lib primitives `cache GetPlatform do.
    nodeName: p Lib primitives GetSystemName do.
    systemRelease: p Lib primitives GetSystemRelease do.
    systemVersion: p Lib primitives GetSystemVersion do.
    machine: p Lib primitives GetMachine do.
    endianness: (p Lib primitives GetEndianness do ifTrue: [#LittleEndian] ifFalse: [#BigEndian]).
    bytesPerWord: lobby bytesPerWord. ]
].

p@(Platform traits) current
[p clone updateWithCurrentValues].

Platform traits define: #Lib
  &builder: [ExternalInterface newForLibrary: 'platform' primitives:
   #((CString GetSystemName ())
     (CString GetSystemRelease ())
     (CString GetSystemVersion ())
     (CString GetPlatform ())
     (CString GetMachine ())
     (CString EnvironmentAt (Bytes))
     (Boolean EnvironmentAtPut (Bytes Bytes))
     (Boolean EnvironmentRemoveKey (Bytes))
     (Boolean SystemProcessCommand (Bytes))
     (Boolean GetEndianness ())
     ) &leader: 'slate_'].

Platform Lib enable.

Platform traits define: #Current &builder: [Platform current].

p@(Platform traits) isPosix
"Whether the underlying platform implements (enough of?) the POSIX API."
"TODO: figure out a way to really determine/configure this."
[True].

p@(Platform traits) run: command
[p Lib primitives SystemProcessCommand applyWith: command].

globals define: #Environment &parents: {Mapping. ExtensibleCollection}.

_@(Environment traits) at: name
[Platform Lib primitives EnvironmentAt applyWith: name].

_@(Environment traits) at: name put: value
[Platform Lib primitives EnvironmentAtPut applyTo: {name. value}].

_@(Environment traits) removeKey: name
[Platform Lib primitives EnvironmentRemoveKey applyWith: name].

m@(Environment traits) keysAndValuesDo: block
"TODO: implement this (based on some kind of primitive keysDo:)."
[
].

m@(Environment traits) printOn: s [s ; m printName].

m@(Environment traits) homePath [m at: 'HOME'].
m@(Environment traits) currentPath [m at: 'PWD'].
m@(Environment traits) temporaryPath [m at: 'TMPDIR'].
m@(Environment traits) includedPaths
"Where the shell expects to find binary executables."
[(m at: 'PATH') ifNotNilDo: [| :paths | paths splitWith: $:]].
m@(Environment traits) userName [m at: 'LOGNAME'].
m@(Environment traits) terminalType [m at: 'TERM'].

m@(Environment traits) sourcePaths
"Where Slate expects to find code."
[(m at: 'SLATEPATH') ifNil: [{}] ifNotNilDo: [| :paths | paths splitWith: $:]].

globals defaultPaths addAll:
  (Environment sourcePaths collect: [| :each | each as: File Locator]).

Image startupActions at: #Platform put:
[
  [Platform Lib enable] on: SeriousCondition do: #exit `er.
  Platform Current updateWithCurrentValues
].

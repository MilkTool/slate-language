define: #Lexer &parents: {StreamProcessor} &slots: {
  #inputBuffer -> ExtensibleArray new.
  #outputBuffer -> ExtensibleArray new.
  "A backing buffer of tokens for undo functionality."
  #lineNumber -> 1 "The current line number."
}.
"The lexer takes an input character Stream and divides it up into Tokens,
using a buffer as necessary to hold the tokenized contents.
Also, debugging information is stored for now in terms of the line number that
the current stream position has reached."
Lexer traits define: #WordTerminatingTokens -> '()[]{}@,.|!#$`"\'%'.

Lexer traits define: #QuoteMacroChars &builder: [Dictionary new].
Lexer QuoteMacroChars at: $\' put: $\'.
Lexer QuoteMacroChars at: $\" put: $\".
Lexer QuoteMacroChars at: $\{ put: $\}.
Lexer QuoteMacroChars at: $\( put: $\).
Lexer QuoteMacroChars at: $\[ put: $\].

l@(Lexer traits) on: stream
"Target the lexer to the particular stream and initialize it."
[
  l `>> [resend. reset. ]
].

l@(Lexer traits) reset
[
  l inputBuffer := l inputBuffer new.
  l outputBuffer := l outputBuffer new.
  l lineNumber := 1.
].

l@(Lexer traits) showTokensFrom: src
[
  (l newOn: src) do: [| :x | inform: x printString].
].

l@(Lexer traits) isEndOfLine: char [char == $\n].
l@(Lexer traits) isEscape: char [char == $\\].

l@(Lexer traits) isAtEnd
"The lexer has reached its end when the stream is exhausted and the buffer is
empty."
[
  l outputBuffer isEmpty /\ [l hasMoreCharacters not]
].

l@(Lexer traits) hasMoreCharacters
"Answers whether more characters are immediately available."
[
  "It is important not to query the source stream, unless the input buffer is
   actually empty."
  l inputBuffer isEmpty not \/ [l source isAtEnd not]
].

Lexer traits define: #Error &parents: {DescriptiveError}
  &slots: {#lineNumber -> 0 "The line number on which the error was detected."}.
"An error that occurred in parsing, always requiring a description."

l@(Lexer traits) error: description
[
  (l Error newDescription:
    'Line ' ; l lineNumber printString ; ': ' ; description)
    `>> [lineNumber := l lineNumber. signal]
].

l@(Lexer traits) nextCharacter
"To get the next character, either pull one from the buffer or read from the
stream of characters. Raise an error if this is used at the end, and advance
the line number if a new-line is reached."
[| c |
  c := l inputBuffer isEmpty
    ifTrue:
      [l source isAtEnd
         ifTrue: [l error: 'Unexpected end of stream'].
       l source next]
    ifFalse: [l inputBuffer removeLast].
  (l isEndOfLine: c) ifTrue: [l lineNumber += 1].
  c
].

l@(Lexer traits) undoCharacter: c
"Put the character back into the buffer, and decrement the line number if it's
a new-line."
[
  (l isEndOfLine: c) ifTrue: [l lineNumber -= 1].
  l inputBuffer addLast: c
].

l@(Lexer traits) peekCharacter
"Grab the next character, but leave it in the buffer, so the position is not
advanced."
[
  l inputBuffer isEmpty
    ifTrue: [l undoCharacter: l nextCharacter]
    ifFalse: [l inputBuffer last]
].

l@(Lexer traits) peekCharacterForwardBy: n
[
  l inputBuffer isEmpty
    ifTrue: [l undoCharacter: l nextCharacter]
    ifFalse: [l inputBuffer last]
].

l@(Lexer traits) readInteger: radix
"The general method for building integers from the raw characters, with a
radix (number of digits) parameter. Grab all following digits for the radix,
multiplying the accumulator by the radix and adding the numeric equivalent
of the character."
[| number |
  number := 0.
  [l hasMoreCharacters /\ [(l peekCharacter isDigit: radix) \/ [l peekCharacter == $_]]] whileTrue:
    [| c |
     ((c := l nextCharacter) toDigit: radix) ifNotNilDo:
       [| :digit | number := number * radix + digit]].
  number
].

l@(Lexer traits) readMantissa: radix
"Build a floating-point number's fractional part."
[| number place |
  number := 0.
  place := 1.
  [l hasMoreCharacters /\ [(l peekCharacter isDigit: radix) \/ [l peekCharacter == $_]]] whileTrue:
    [| c |
     ((c := l nextCharacter) toDigit: radix) ifNotNilDo:
       [| :digit |
        number := number * radix + digit.
        place *= radix]].
  (number as: Float) / (place as: Float)
].

l@(Lexer traits) readExponent: radix
"Build a floating-point number's exponent as an integer."
[| c |
  (c := l nextCharacter) == $-
    ifTrue: [(l readInteger: radix) negated]
    ifFalse:
      [c == $+ ifFalse: [l undoCharacter: c]. l readInteger: radix]
].

l@(Lexer traits) newLiteralFor: obj
[tokens LiteralToken for: obj].

"l@(Lexer traits) newLiteralFor: a@(ByteArray traits)
[
  a isEmpty
    ifTrue: [TODO: 'intern empty array/bytearray/string']
    ifFalse: [resend]
]."

l@(Lexer traits) readNumber
"The overall routine for building numbers."
[| number isNegative radix c |
  isNegative := False.
  radix := 10.
  (c := l nextCharacter) == $-
    ifTrue: [isNegative := True]
    ifFalse: [c == $+ ifFalse: [l undoCharacter: c]].
  "Now read in all the continuous string of digits possible as an integer."
  number := l readInteger: radix.
  "Reaching the end of the lexing stream just finalizes the process."
  l hasMoreCharacters ifTrue:
    ["Conditionalize on the next character: it may set up a radix or a decimal."
     (c := l nextCharacter) == $r \/ [c == $R] ifTrue:
       [((radix := number) between: 2 and: 36) ifFalse:
          [l error: 'Number radix must be between 2 and 36.'].
        number := l readInteger: radix.
        l hasMoreCharacters
          ifTrue: [c := l nextCharacter]
          ifFalse:
            [^ (l newLiteralFor: (isNegative ifTrue: [number negated] ifFalse: [number]))]].
     c == $. /\ [l hasMoreCharacters] /\ [l peekCharacter isDigit: radix] ifTrue:
       [number := (number as: Float) + (l readMantissa: radix).
        l hasMoreCharacters
          ifTrue: [c := l nextCharacter]
          ifFalse:
            [^ (l newLiteralFor: (isNegative ifTrue: [number negated] ifFalse: [number]))]].
     c == $e \/ [c == $E]
       ifTrue:
         [number := (number as: Float) * ((radix as: Float) raisedTo: (l readExponent: 10))]
       ifFalse:
         [l undoCharacter: c]].
  l newLiteralFor: (isNegative ifTrue: [number negated] ifFalse: [number])
].

l@(Lexer traits) readEscapedCharacter
"Language support for character escapes. This should be called at the point
after the initial escape is seen, whether as a character or part of a string."
[| c |
  (c := l nextCharacter) caseOf: {
    $n -> [$\n].
    $t -> [$\t].
    $r -> [$\r].
    $b -> [$\b].
    $s -> [$\s].
    $a -> [$\a].
    $v -> [$\v].
    $f -> [$\f].
    $e -> [$\e].
    $0 -> [$\0].
    $x ->
      [((l nextCharacter toDigit: 16) ifNil:
          [l error: 'Unexpected numeric-escape Character syntax. Expected $\\xNN']) * 16
         + ((l nextCharacter toDigit: 16) ifNil:
              [l error: 'Unexpected numeric-escape Character syntax. Expected $\\xNN'])
         as: ASCIIString Character]
  } otherwise: [c]
].

l@(Lexer traits) characterFor: c
[(l isEscape: c) ifTrue: [l readEscapedCharacter] ifFalse: [c]].

l@(Lexer traits) nextSegmentUntil: terminator
[| c |
  [| :result |
   [(c := l nextCharacter) == terminator]
     whileFalse:
       [result nextPut: (l characterFor: c)]] writingAs: ''
].

l@(Lexer traits) readString
"Build a string until the next single-quote character is encountered.
Escaping is accounted for."
[
  l newLiteralFor: (l nextSegmentUntil: $\')
].

l@(Lexer traits) read: t@(tokens Comment traits)
"Build a comment string until the next double-quote character is encountered.
Escaping is accounted for."
[
  t for: (l nextSegmentUntil: $\")
].

l@(Lexer traits) nextQuoteMacroNamed: sel &terminator: terminator
[| contents |
  terminator `defaultsTo: (l QuoteMacroChars at: l nextCharacter ifAbsent: [$\n]).
  contents := l nextSegmentUntil: terminator.
  (tokens QuoteMacro for: contents) `>>
    [prefix := sel value intern.
     flags := [| :flags | l nextWordCharactersInto: flags] writingAs: ''. ]
].

l@(Lexer traits) nextWordCharactersInto: s@(WriteStream traits)
[| c |
  [l hasMoreCharacters
     /\ [(c := l peekCharacter) isWhitespace not]
     /\ [(l WordTerminatingTokens includes: c) not]]
    whileTrue: [s nextPut: l nextCharacter]
].

l@(Lexer traits) read: type@(tokens Selector traits)
"Read a selector symbol into a token."
[| result |
  (result :=
     [| :result |
      l hasMoreCharacters /\ [l peekCharacter isDigit] ifFalse:
        [l nextWordCharactersInto: result]] writingAs: '') isEmpty
   ifFalse: [type for: result]
].

l@(Lexer traits) readLiteralPastHash
"This handles the literal brace array syntaxes as well as literal symbols."
[
  l hasMoreCharacters
    /\ ['({[\'#' includes: l peekCharacter]
    ifTrue:
      [l nextCharacter caseOf: {
         $\( -> [tokens BeginPattern].
         $\{ -> [tokens BeginLiteralArray].
         $\[ -> [tokens BeginLiteralBlock].
         $\' -> [l newLiteralFor: (l nextSegmentUntil: $\') intern].
         $#  -> [l nextCharacter = $\(
                   ifTrue: [tokens BeginLiteralParenthesis]
                   ifFalse: [l error: 'Expected ( after ##']]
     }]
    ifFalse:
      [l newLiteralFor:
         (#(l nextWordCharactersInto: _) `er writingAs: '') intern]
].

l@(Lexer traits) readCharacter
"Read in a single character into a token or an escaped one."
[
  l newLiteralFor: (l characterFor: l nextCharacter)
].

l@(Lexer traits) read: w@(tokens Whitespace traits)
"A way to preserve the whitespace in the original text. Unused by default."
[| result c |
  result :=
    [| :result |
     [c := l nextCharacter.
      l hasMoreCharacters
        /\ [c isWhitespace]
        /\ [(l isEndOfLine: c) not]]
       whileTrue: [result nextPut: c]] writingAs: ''.
  l undoCharacter: c.
  w for: result
].

l@(Lexer traits) skipWhitespace
[| c |
  l hasMoreCharacters ifTrue:
    [[c := l nextCharacter.
      l hasMoreCharacters
        /\ [c isWhitespace]
        /\ [(l isEndOfLine: c) not]]
       whileTrue.
     l undoCharacter: c].
].

l@(Lexer traits) readToken
"The overall handler for tokenization, this conditionalizes on the various
initializing characters to build the various token objects."
"TODO: place these dispatch tables in persistent places, much like a Lisp
read-table."
[| c |
  "Consume/discard whitespace first."
  l skipWhitespace.
  l hasMoreCharacters
    ifTrue:
      [(c := l nextCharacter) caseOf: {
         $\' -> [l readString].
         $\" -> [l read: tokens Comment].
         $$ -> [l readCharacter].
         $# -> [l readLiteralPastHash].
         $( -> [tokens BeginParenthesis].
         $) -> [tokens EndParenthesis].
         ${ -> [tokens BeginArray].
         $} -> [tokens EndArray].
         $[ -> [tokens BeginBlock].
         $] -> [tokens EndBlock].
         $@ -> [tokens At].
         $. -> [tokens EndStatement].
         $, -> [tokens Comma].
         $\| -> [tokens BeginVariables].
         $! -> [tokens Type].
         $` -> [(l read: tokens MacroSelector) ifNil: [tokens Quote]].
         $% -> [(l read: tokens DeferredSelector) ifNil: [tokens Eventually]].
         $\n -> [tokens EndLine]
       } otherwise:
         [c isDigit \/ [c == $+ \/ [c == $-] /\ [l peekCharacter isDigit]]
            ifTrue: [l undoCharacter: c. l readNumber]
            ifFalse: [l undoCharacter: c.
                      (l read: tokens Selector)
                        ifNil: [l error: 'Message selector must not be empty.']
                        ifNotNilDo:
                          [| :sel |
                           l isAtEnd not /\
                             [l QuoteMacroChars includesKey: l peekCharacter]
                             ifTrue: [l nextQuoteMacroNamed: sel]
                             ifFalse: [sel]]]]]
    ifFalse: [tokens EndStream]
].

l@(Lexer traits) next
[
  l outputBuffer isEmpty
    ifTrue: [l readToken]
    ifFalse: [l outputBuffer removeFirst]
].

l@(Lexer traits) peek
[
  l outputBuffer isEmpty
    ifTrue: [l outputBuffer addLast: l readToken].
  l outputBuffer first
].

l@(Lexer traits) peek: n
[
  [(l outputBuffer includesKey: n) not]
    whileTrue: [l outputBuffer addLast: l readToken].
  l outputBuffer first: n
].

l@(Lexer traits) peekForwardBy: n
[
  [(l outputBuffer includesKey: n) not]
    whileTrue: [l outputBuffer addLast: l readToken].
  l outputBuffer at: n ifAbsent: [l error: 'Could not find token forward by: ' ; n printString]
].

l@(Lexer traits) undoToken: token
[
  l outputBuffer addFirst: token
].

_@(Lexer traits) undoToken: t@(tokens EndStream traits)
"Avoid placing EndStream tokens in the output buffer."
[t].

t@(tokens Token traits) readFrom: s
[| next |
  ((next := (Lexer newOn: s reader) next) is: t)
    ifTrue: [next]
    ifFalse: [error: 'The source did not parse into ' ; t printName asAn ; '.']
].

Syntax define: #Lexer &parents: {StreamProcessor}
  &slots: {#buffer -> ExtensibleArray new.
	   #lineNumber -> 1 "The current line number."}.
"The lexer takes an input character Stream and divides it up into Tokens,
using a buffer as necessary to hold the tokenized contents.
Also, debugging information is stored for now in terms of the line number that
the current stream position has reached."
Syntax Lexer traits define: #WordTerminatingTokens -> '()[]{}@,.|!#$`"\'%'.

l@(Syntax Lexer traits) on: stream
"Target the lexer to the particular stream and initialize it."
[
  resend reset.
  l
].

l@(Syntax Lexer traits) reset
[
  l buffer := l buffer new.
  l lineNumber := 1.
].

l@(Syntax Lexer traits) isEndOfLine: char [char == $\n].
l@(Syntax Lexer traits) isEscape: char [char == $\\].

l@(Syntax Lexer traits) isAtEnd
"The lexer has reached its end when the stream is exhausted and the buffer is
empty."
[
  l buffer isEmpty /\ [l source isAtEnd] \/
  [| c |
   [c := l nextCharacter.
    l buffer isEmpty /\ [l source isAtEnd]
      \/ [c isWhitespace not] \/ [l isEndOfLine: c]] whileFalse.
   c isWhitespace /\ [(l isEndOfLine: c) not] \/ [l undoCharacter: c. False]]
].

l@(Syntax Lexer traits) hasMoreCharacters
[
  l buffer isNotEmpty \/ [l source isAtEnd not]
].

l@(Syntax Lexer traits) peekCharacter
"Grab the next character, but leave it in the buffer, so the position is not
advanced."
[
  l buffer isEmpty
    ifTrue: [l undoCharacter: l nextCharacter]
    ifFalse: [l buffer last]
].

l@(Syntax Lexer traits) nextCharacter
"To get the next character, either pull one from the buffer or read from the
stream of characters. Raise an error if this is used at the end, and advance
the line number if a new-line is reached."
[| c |
  c := (l buffer isEmpty
    ifTrue:
      [l source isAtEnd
         ifTrue: [l error: 'Unexpected end of stream'].
       l source next]
    ifFalse: [l buffer removeLast]).
  (l isEndOfLine: c) ifTrue: [l lineNumber := l lineNumber + 1].
  c
].

l@(Syntax Lexer traits) undoCharacter: c
"Put the character back into the buffer, and decrement the line number if it's
a new-line."
[
  (l isEndOfLine: c) ifTrue: [l lineNumber := l lineNumber - 1].
  l buffer addLast: c
].

Syntax Lexer traits define: #Error &parents: {DescriptiveError}
  &slots: {#lineNumber -> 0 "The line number on which the error was detected."}.
"An error that occurred in parsing, always requiring a description."

l@(Syntax Lexer traits) error: description
[
  (l Error newDescription:
    'Line ' ; l lineNumber printString ; ': ' ; description)
    `>> [lineNumber := l lineNumber. signal]
].

l@(Syntax Lexer traits) readInteger: radix
"The general method for building integers from the raw characters, with a
radix (number of digits) parameter. Grab all following digits for the radix,
multiplying the accumulator by the radix and adding the numeric equivalent
of the character."
[| number |
  number := 0.
  [l hasMoreCharacters /\ [(l peekCharacter isDigit: radix) \/ [l peekCharacter == $_]]] whileTrue:
    [| c |
     ((c := l nextCharacter) toDigit: radix) ifNotNilDo:
       [| :digit | number := number * radix + digit]].
  number
].

l@(Syntax Lexer traits) readMantissa: radix
"Build a floating-point number's fractional part."
[| number place |
  number := 0.
  place := 1.
  [l hasMoreCharacters /\ [(l peekCharacter isDigit: radix) \/ [l peekCharacter == $_]]] whileTrue:
    [| c |
     ((c := l nextCharacter) toDigit: radix) ifNotNilDo:
       [| :digit |
	number := number * radix + digit.
        place := place * radix]].
  (number as: Float) / (place as: Float)
].

l@(Syntax Lexer traits) readExponent: radix
"Build a floating-point number's exponent as an integer."
[| c |
  (c := l nextCharacter) == $+
    ifTrue: [l readInteger: radix]
    ifFalse:
      [c == $-
	 ifTrue: [l readInteger: radix]
	 ifFalse: [l undoCharacter: c.
		   l readInteger: radix]]
].

l@(Syntax Lexer traits) newLiteralFor: obj
[Syntax LiteralToken for: obj].

"l@(Syntax Lexer traits) newLiteralFor: a@(ByteArray traits)
[
  a isEmpty
    ifTrue: [TODO: 'intern empty array/bytearray/string']
    ifFalse: [resend]
]."

l@(Syntax Lexer traits) readNumber
"The overall routine for building numbers."
[| number isNegative radix c |
  isNegative := False.
  radix := 10.
  (c := l nextCharacter) == $-
    ifTrue: [isNegative := True]
    ifFalse: [c == $+ ifFalse: [l undoCharacter: c]].
  "Now read in all the continuous string of digits possible as an integer."
  number := l readInteger: radix.
  "Reaching the end of the lexing stream just finalizes the process."
  l hasMoreCharacters ifTrue:
    ["Conditionalize on the next character: it may set up a radix or a decimal."
     (c := l nextCharacter) == $r \/ [c == $R] ifTrue:
       [((radix := number) between: 2 and: 36) ifFalse:
          [l error: 'Number radix must be between 2 and 36.'].
        number := l readInteger: radix.
        l hasMoreCharacters
          ifTrue: [c := l nextCharacter]
          ifFalse:
            [^ (l newLiteralFor: (isNegative ifTrue: [number negated] ifFalse: [number]))]].
     c == $. /\ [l hasMoreCharacters] /\ [l peekCharacter isDigit: radix] ifTrue:
       [number := (number as: Float) + (l readMantissa: radix).
        l hasMoreCharacters
          ifTrue: [c := l nextCharacter]
          ifFalse:
            [^ (l newLiteralFor: (isNegative ifTrue: [number negated] ifFalse: [number]))]].
     c == $e \/ [c == $E]
       ifTrue:
         [number := (number as: Float) * ((radix as: Float) raisedTo: (l readExponent: 10))]
       ifFalse:
         [l undoCharacter: c]].
  l newLiteralFor: (isNegative ifTrue: [number negated] ifFalse: [number])
].

l@(Syntax Lexer traits) readEscapedCharacter
"Language support for character escapes. This should be called at the point
after the initial escape is seen, whether as a character or part of a string."
[| c |
  (c := l nextCharacter) caseOf: {
    $n -> [$\n].
    $t -> [$\t].
    $r -> [$\r].
    $b -> [$\b].
    $s -> [$\s].
    $a -> [$\a].
    $v -> [$\v].
    $f -> [$\f].
    $e -> [$\e].
    $0 -> [$\0].
    $x ->
      [((l nextCharacter toDigit: 16) ifNil:
          [l error: 'Unexpected numeric-escape Character syntax. Expected $\\xNN']) * 16
         + ((l nextCharacter toDigit: 16) ifNil:
              [l error: 'Unexpected numeric-escape Character syntax. Expected $\\xNN'])
         as: ASCIIString Character]
  } otherwise: [c]
].

l@(Syntax Lexer traits) characterFor: c
[(l isEscape: c) ifTrue: [l readEscapedCharacter] ifFalse: [c]].

l@(Syntax Lexer traits) readString
"Build a string until the next single-quote character is encountered.
Escaping is accounted for."
[| c |
  l newLiteralFor: ([| :result |
    [(c := l nextCharacter) == $\']
      whileFalse:
	[result nextPut: (l characterFor: c)]] writingAs: String)
].

l@(Syntax Lexer traits) readComment
"Build a comment string until the next double-quote character is encountered.
Escaping is accounted for."
[| c |
  Syntax tokens Comment for: ([| :result |
    [(c := l nextCharacter) == $\"]
      whileFalse:
	[result nextPut: (l characterFor: c)]] writingAs: String)
].

l@(Syntax Lexer traits) nextWordCharactersInto: writeStream
[| c |
  [l hasMoreCharacters not
     \/ [(c := l peekCharacter) isWhitespace]
     \/ [l WordTerminatingTokens includes: c]]
    whileFalse: [writeStream nextPut: l nextCharacter]
].

l@(Syntax Lexer traits) readSelector: type &ifEmpty: emptyToken
"Read a selector symbol into a token."
[| result c |
  result := '' writer.
  l hasMoreCharacters /\ [l peekCharacter isDigit] ifFalse:
    [l nextWordCharactersInto: result].
  result contents isEmpty
    ifTrue:
      [emptyToken ifNil: [error: 'Message selector must not be empty.']]
    ifFalse:
      [type for: result contents intern]
].

l@(Syntax Lexer traits) readLiteral
"This handles the literal brace array syntaxes."
[
  l hasMoreCharacters
    /\ ['({[\'' includes: l peekCharacter]
    ifTrue:
      [l nextCharacter caseOf: {
         $\( -> [Syntax BeginPartial].
         $\{ -> [Syntax BeginLiteralArray].
         $\[ -> [Syntax BeginLiteralBlock].
         $\' -> [l newLiteralFor: ([| :result c |
                  [(c := l nextCharacter) == $\']
                    whileFalse:
                      [result nextPut: (l characterFor: c)]] writingAs: String)
                   intern]}]
    ifFalse:
      [l newLiteralFor:
         ([| :result | l nextWordCharactersInto: result] writingAs: String) intern]
].

l@(Syntax Lexer traits) readCharacter
"Read in a single character into a token or an escaped one."
[
  l newLiteralFor: (l characterFor: l nextCharacter)
].

l@(Syntax Lexer traits) readToken
"The overall handler for tokenization, this conditionalizes on the various
initializing characters to build the various token objects."
"TODO: place these dispatch tables in persistent places, much like a Lisp
read-table."
[| c |
  l isAtEnd ifTrue: [^ Syntax EndStream].
  (c := l nextCharacter) caseOf: {
    $\' -> [l readString].
    $\" -> [l readComment].
    $$ -> [l readCharacter].
    $# -> [l readLiteral].
    $( -> [Syntax BeginParenthesis].
    $) -> [Syntax EndParenthesis].
    ${ -> [Syntax BeginArray].
    $} -> [Syntax EndArray].
    $[ -> [Syntax BeginBlock].
    $] -> [Syntax EndBlock].
    $@ -> [Syntax At].
    $. -> [Syntax EndStatement].
    $, -> [Syntax Comma].
    $| -> [Syntax BeginVariables].
    $! -> [Syntax Type].
    $` -> [l readSelector: Syntax MacroSelector &ifEmpty: Syntax Quote].
    $% -> [l readSelector: Syntax DeferredSelector &ifEmpty: Syntax Eventually].
    $\n -> [Syntax EndLine]
  } otherwise:
    [c == $+ \/ [c == $-] /\ [l peekCharacter isDigit]
       ifTrue: [l undoCharacter: c. l readNumber]
       ifFalse:
         [l undoCharacter: c.
          c isDigit
            ifTrue: [l readNumber]
            ifFalse: [l readSelector: Syntax Selector]]]
].

l@(Syntax Lexer traits) next
[
  l readToken
].

t@(Syntax tokens Token traits) readFrom: s
[| next |
  ((next := (Syntax Lexer newOn: s reader) next) is: t)
    ifFalse: [error: 'The source did not parse into ' ; t printName asAn ; '.'].
  next
].

node@(nodes Node traits) cascadedTo: _
"The default behavior for treating a nodes Node as cascaded onto some
source variable - no-transformation."
[node].

imp@(nodes ImplicitArgument traits) cascadedTo: sourceVar
"Implicit argument sends cascaded to a variable are treated as loads."
[
  nodes LoadVariable from: sourceVar
].

msg@(nodes Message traits) cascadedTo: sourceVar
"Arbitrary messages are treated by first transforming the first argument,
then replacing it in the arguments as necessary."
[| replacement |
  replacement: (msg arguments first cascadedTo: sourceVar).
  (msg arguments at: 0) == replacement ifFalse:
    [msg arguments at: 0 put: replacement].
  msg
].

opts@(nodes OptionalKeywords traits) cascadedTo: sourceVar
"Forward the cascade to the enclosed message."
[| replacement |
  replacement: (opts message cascadedTo: sourceVar).
  opts message == replacement ifFalse:
    [opts message: replacement].
  opts
].

"rest@(nodes RestArguments traits) cascadedTo: sourceVar
[| replacement |
  replacement: (rest message cascadedTo: sourceVar).
  rest message == replacement ifFalse:
    [rest message: replacement].
  rest
]."

store@(nodes StoreVariable traits) cascadedTo: sourceVar
"A store to a variable when cascaded is treated as a mutator keyword
message to a load of it."
[
  nodes KeywordMessage
    sending: (store mutatorNameFor: store variable name)
    to: {nodes LoadVariable from: sourceVar. store value}
].

load@(nodes LoadVariable traits) cascadedTo: sourceVar
"A load of a variable when cascaded is treated as an accessor
message to a load of it."
[
  nodes UnaryMessage
    sending: load variable name
    to: {nodes LoadVariable from: sourceVar}
].

"paren@(nodes Parenthesis traits) cascadedTo: sourceVar
[| replacement |
  replacement: (paren statements first cascadedTo: sourceVar).
  (paren statements at: 0) == replacement ifFalse:
    [paren statements at: 0 put: replacement].
  paren
]."

source@(nodes Node traits) >> cascade@(nodes Block traits) &environment: env
[cascade doWithinContextOf: source &environment: env].

cascade@(nodes Block traits) doWithinContextOf: source@(nodes Node traits) &environment: env
"This is the cascading macro. It transforms an expression and a block into
a form where the top-level statements' expressions are cascaded onto the result
of evaluating the first at run-time. Technically, it expands into a new block.
If the cascade block has an input argument, it is bound to this cascaded value
so it can be explicitly referenced for statements where non-top-level access is
necessary."
[| sourceVar body block |
  env ifNil:
    [block: nodes Block new].
  cascade localVariables size > cascade inputVariables size ifTrue: 
    [block: cascade].
  cascade inputVariables isEmpty
    ifTrue: 
      [sourceVar: (block ifNil: [env]) addVariable]
    ifFalse: 
      [sourceVar: cascade inputVariables first.
       block == cascade ifFalse:
         [(block ifNil: [env]) addVariable: sourceVar]].
  body:
    {nodes StoreVariable of: source into: sourceVar} ;
      (cascade statements
        collect: [| :statement | statement cascadedTo: sourceVar]).
  (body last isSameAs: nodes Literal) /\ [body last value isNil] ifTrue:
    [body at: body indexLast put: (nodes LoadVariable from: sourceVar)].
  block
    ifNil:
      [body as: nodes Parenthesis]
    ifNotNil:
      [block inputVariables: #{}.
       block statements: body.
       nodes UnaryMessage sending: #do to: {block}]
].

source@(nodes Node traits) setting: slotsArray@(nodes Literal traits) to: valuesArray@(nodes Array traits) &environment: env
"This generates the kind of input that `>> expects for the simple case of just
setting a bunch of slot values."
[| cascade statements |
  cascade: nodes Block new.
  cascade inputVariables: #{}.
  cascade statements:
    ([| :out |
      slotsArray value with: valuesArray statements do:
        [| :name :value |
         out nextPut: (nodes KeywordMessage sending: (Root mutatorNameFor: name)
                                             to: {nodes ImplicitArgument. value})].
      out nextPut: nodes Literal Nil] writingAs: #{}).
  source >> cascade &environment: env
].

source@(nodes Node traits) setting: slotsArray@(nodes Literal traits) to: valuesArray@(nodes Literal traits) &environment: env
[| cascade statements |
  cascade: nodes Block new.
  cascade inputVariables: #{}.
  cascade statements:
    ([| :out |
      slotsArray value with: valuesArray value do:
        [| :name :value |
         out nextPut: (nodes KeywordMessage sending: (Root mutatorNameFor: name)
                                             to: {nodes ImplicitArgument. nodes Literal for: value})].
      out nextPut: nodes Literal Nil] writingAs: #{}).
  source >> cascade &environment: env
].

source@(nodes Node traits) setting: slotsArray to: valuesArray &environment: env
[
  nodes KeywordMessage sending: #cloneSettingSlots:to: to: {source. slotsArray. valuesArray}
].

node@(nodes Node traits) substitutingSlotsOf: source for: vars
[
  node
].

load@(nodes LoadVariable traits) substitutingSlotsOf: source for: vars
[
  (vars includes: load variable)
    ifTrue:
      [nodes UnaryMessage sending: load variable name to:
        {nodes LoadVariable from: source}]
    ifFalse:
      [load]
].

store@(nodes StoreVariable traits) substitutingSlotsOf: source for: vars
[
  (vars includes: store variable)
    ifTrue:
      [nodes KeywordMessage
         sending: store variable name name ; ':'
         to: {nodes LoadVariable from: source. store value}]
    ifFalse:
      [store]
].

source@(nodes Node traits) withSlotsDo: cascade@(nodes Block traits) &environment: env
"A macro for a different type of cascade. This searches the cascade block's input
arguments and binds them to corresponding slots in the result of evaluating the
source code."
[| sourceVar body block |
  env
    ifNil:
      [block: nodes Block new].
  cascade localVariables size > cascade inputVariables size
    ifTrue:
      [block: cascade].
  sourceVar: (block ifNil: [env]) addVariable.
  cascade transformBy:
    [| :node | node substitutingSlotsOf: sourceVar for: cascade inputVariables].
  body: {nodes StoreVariable of: source into: sourceVar} ; cascade statements.
  block
    ifNil:
      [body as: nodes Parenthesis]
    ifNotNil:
      [block localVariables: (block localVariables difference: block inputVariables).
       block inputVariables: #{}.
       block statements: body.
       nodes UnaryMessage sending: #do to: {block}]
].

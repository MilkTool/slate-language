def@(Syntax MethodDefinition traits) inferenceRule
[
  def selector := def selector asInferenceRule.
  def
].

node@(Syntax Node traits) inferTypesIn: namespace
"Assigns a type for the node as determined through propagation of
existing type information and hints."
[
  node type
].

node@(Syntax Node traits) inferTypes
[
  node inferTypesIn: lobby literalType
].

_@(Syntax ImplicitArgument traits) inferTypesIn: namespace
[
  namespace
].

ann@(Syntax Annotation traits) inferTypesIn: namespace
[
  ann type := ann value inferTypesIn: namespace
].

message@(Syntax Message traits) inferTypesIn: namespace
[
  message type == Types Any
    ifTrue:
      [message type := message selector inferOn:
         (message arguments
            collect: #(_ inferTypesIn: namespace) `er)]
    ifFalse:
      [message arguments do: #(_ inferTypesIn: namespace) `er.
       message type]
].

opts@(Syntax OptionalKeywords traits) inferTypesIn: namespace
[| msgType |
  msgType := opts message inferTypes. 
  opts arguments do: #(_ inferTypesIn: namespace) `er.
  opts type == Types Any
    ifTrue: [opts type := msgType]
    ifFalse: [opts type]
].

paren@(Syntax Parenthesis traits) inferTypesIn: namespace
[
  paren statements do: #(_ inferTypesIn: namespace) `er.
  paren type == Types Any /\ [paren statements isNotEmpty]
    ifTrue: [paren type := paren statements last type]
    ifFalse: [paren type]
].

var@(Syntax Variable traits) inferTypesIn: namespace
[
  var type
].

block@(Syntax Block traits) inferTypesIn: namespace
[| resultType |
  block localVariables do: #(_ inferTypesIn: namespace) `er.
  resultType := Types Any.
  "TODO: handle Return with a Union operation."
  block statements do:
    [| :statement | resultType := statement inferTypesIn: namespace].
  block type == Types Any
    ifTrue: 
      [block type := Types Block
         from: (block inputVariables collect: #type `er)
         to: resultType]
    ifFalse: [block type]
].

array@(Syntax Array traits) inferTypesIn: namespace
[
  array statements do: #(_ inferTypesIn: namespace) `er.
  array type == Types Any
    ifTrue:
      [array type := Types Array of:
         (array statements
            inject: Types None into: [| :x :y | x union: y type])]
    ifFalse: [array type]
].

obj@(Root traits) literalTypeIn: _
[
  Types Singleton of: obj
].

literal@(Syntax Literal traits) inferTypesIn: namespace
[
  literal type == Types Any
    ifTrue: [literal type := literal value literalTypeIn: namespace]
    ifFalse: [literal type]
].

load@(Syntax LoadVariable traits) inferTypesIn: _
[
  load type == Types Any
    ifTrue: [load type := load variable type]
    ifFalse: [load type]
].

Syntax define: #TypeMismatch &parents: {Warning} &slots: {#source. #target}.

tm@(Syntax TypeMismatch traits) from: source to: target causedBy: description
[
  (tm newDescription: description) `>> [source := source. target := target. ]
].

store@(Syntax StoreVariable traits) signalTypeMismatch
[
  (Syntax TypeMismatch
     from: store value
     to: store variable
     causedBy: 'Type mismatch in assignment to local variable: '
	; store variable name name "; ' type:' ; store variable type printString ; ' New type: ' ; store value type printString") signal
].

store@(Syntax StoreVariable traits) inferTypesIn: namespace
[
  store value inferTypesIn: namespace.
  (store variable type subsumes: store value type)
    ifFalse: [store signalTypeMismatch].
  store type == Types Any
    ifTrue: [store type := store value type]
    ifFalse: [store type] 
].

return@(Syntax Return traits) inferTypesIn: namespace
[
  return value inferTypesIn: namespace.
  return type == Types Any
    ifTrue: [return type := return value type]
    ifFalse: [return type]
].

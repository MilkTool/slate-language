"This file only defines methods on Syntax Nodes for the purpose of generating
static source output which can be used as valid input. These methods make a
general attempt at comprehensible output. All of them assume that the
previously-called method responsibly adds a line-ending when possible."

define: #IndentedPrintStream &parents: {StructuredPrinterMixin. Stream WrapperStream}.
"A basis for formatted code-printing."

IndentedPrintStream traits define: #indentString -> '  '.

w@(IndentedPrintStream traits) print: node
"The basic printing method to specialize on the target syntax object."
[overrideThis].

w@(IndentedPrintStream traits) indentedDo: block surroundedBy: str1 and: str2
[
  w newLine.
  w ; str1.
  w indentedDo: [block do].
  w newLine.
  w ; str2.
].

define: #SourcePrintStream &parents: {IndentedPrintStream} &slots: {
  #printComments -> False.
  "Whether comments are added to the source. The default is not to."
  #useApplyWith -> False.
  "Whether method calls should be printed with applyWith:"
  #surroundingArity -> -1.
  "The arity of a message-send context. This is significant if >= 0, and should
   be set to -1 otherwise. Comparisons are made with a current arity, and if the
   current is greater, the message is surrounded with precedence-preserving
   parentheses."
}.
"This visitor is a dispatch point for these methods and may be overridden."

w@(SourcePrintStream traits) print: node@(nodes Node traits)
"All printable nodes need to override this method."
[
  overrideThis
].

x@(nodes Node traits) printOn: o
"Specialize printOn: for syntax nodes"
[
  (SourcePrintStream newOn: o) print: x.
  o
].

w@(SourcePrintStream traits) print: _@(nodes ImplicitArgument traits)
"The target of implicit message sends to the context. Prints nothing."
[].

w@(SourcePrintStream traits) print: node@(nodes Comment traits)
"(Optionally) print out the comment on the following line."
[
  w print: node value.
  w printComments
    ifTrue: [w ; '"' ; node comment ; '"'].
  w newLine.
  w
].

"w@(SourcePrintStream traits) print: node inParenthesesOn: s
[
  s ; '('.
  w print: node on: s.
  s ; ')'.
  w
].
"

w@(SourcePrintStream traits) print: node@(nodes Literal traits)
[w ; node value printString. ].

w@(SourcePrintStream traits) printSelectorPrefixOf: _
[].

w@(SourcePrintStream traits) printSelectorPrefixOf: _@(nodes Macro traits)
[w ; '`'. ].

w@(SourcePrintStream traits) printSelectorPrefixOf: _@(nodes Deferred traits)
[w ; '%'. ].

w@(SourcePrintStream traits) withSurroundingArity: arity do: block
[| previousArity |
  previousArity := w surroundingArity.
  w surroundingArity := arity.
  block do.
  w surroundingArity := previousArity.
].

w@(SourcePrintStream traits) print: node sending: selector to: args
"Accepts a method name and array of arguments, and print the appropriate
source on the stream."
[| previousArity closeParen |
  closeParen := False.
  previousArity := w surroundingArity.
  `conditions: (
    [Syntax isUnarySelector: selector]
      -> [w withSurroundingArity: 1 do:
            [previousArity isZero
               /\ [(args first isSameAs: nodes ImplicitArgument) not]
               ifTrue: [w nextPut: $\(. closeParen := True].
             (w printAsArgument: args first) ifTrue: [w newColumn].
             w printSelectorPrefixOf: node.
	     w ; selector name]].
    [Syntax isBinarySelector: selector]
      -> [w withSurroundingArity: 2 do:
	    [(previousArity between: 0 and: 1)
               ifTrue: [w nextPut: $\(. closeParen := True].
	     (w printAsArgument: args first) ifTrue: [w newColumn].
             w printSelectorPrefixOf: node.
	     w ; selector name.
	     w newColumn.
	     w printAsArgument: args second]].
    "For keyword sends, print the first argument, partition the selector by
      the colons, (at an offset of 1 to synchronize indices for looping),
      and then loop from one to the end, printing the keywords and arguments
      alternately."
    [Syntax isKeywordSelector: selector]
      -> [| keywords |
	  keywords := selector keywords.
	  w withSurroundingArity: 3 do:
	    [previousArity >= 0 ifTrue:
               [w nextPut: $\(. closeParen := True].
	        (w printAsArgument: args first) ifTrue: [w newColumn].
	        1 below: args size do:
		  [| :index arg |
                   index = 1
                     ifTrue: [w printSelectorPrefixOf: node]
                     ifFalse: [w newColumn].
		   w ; ((keywords at: index - 1) as: String) ; ': '.
                   w printAsArgument: (args at: index)]]]).
  closeParen ifTrue: [w nextPut: $\)].
  w
].

w@(SourcePrintStream traits) print: node@(nodes StoreVariable traits)
[
  w print: node sending: (node variable name name ; ':') intern
		to: {nodes ImplicitArgument. node value}
].

w@(SourcePrintStream traits) print: node@(nodes LoadVariable traits)
[
  w print: node sending: node variable name to: {nodes ImplicitArgument}
].

w@(SourcePrintStream traits) print: node@(nodes Variable traits)
[shouldNotImplement].

w@(SourcePrintStream traits) print: node@(nodes Message traits)
[
  w useApplyWith
    ifTrue: [w ; '(' ; node selector printString ; ' applyWith: '
		     ; node arguments printString ; ')']
    ifFalse: [w print: node sending: node selector to: node arguments].
  w
].

w@(SourcePrintStream traits) print: node@(nodes MessageWrapper traits)
[
  w print: node message
].

w@(SourcePrintStream traits) print: node@(nodes OptionalKeywords traits)
[| closeParen |
  closeParen := False.
  w surroundingArity >= 0 ifTrue: [w ; '('. closeParen := True].
  w withSurroundingArity: -1 do:
    [resend].
  w withSurroundingArity: 2 do:
    [node keywords with: node arguments do:
      [| :selector :argument |
       w indentedDo:
	 [w newColumn.
          w ; selector name.
          w newColumn.
          w printAsArgument: argument]]].
  closeParen ifTrue: [w ; ')'].
  w
].

w@(SourcePrintStream traits) print: node@(nodes RestArguments traits)
[| closeParen |
  closeParen := False.
  w surroundingArity >= 0 ifTrue: [w ; '('. closeParen := True].
  w withSurroundingArity: -1 do:
    [resend].
  w withSurroundingArity: 2 do:
    [node arguments do:
      [| :argument |
       w indentedDo:
	 [w ; ','.
          w newColumn.
          w printAsArgument: argument]]].
  closeParen ifTrue: [w ; ')'].
  w
].

w@(SourcePrintStream traits) print: node@(nodes Placeholder traits)
[
  w ; '_'
].

w@(SourcePrintStream traits) print: node@(nodes Pattern traits)
[
  w ; '#('.
  resend.
  w ; ')'
].

w@(SourcePrintStream traits) isDefaultLastStatement: node
"Whether the expression would be a default value for the last statement in a
sequence - only True for Literal Nil."
[False].

w@(SourcePrintStream traits) isDefaultLastStatement: node@(nodes Literal traits)
[node value isNil].

w@(SourcePrintStream traits) printStatements: statements &separatedBy: separator
[
  separator `defaultsTo: [w newLine].
  w withSurroundingArity: -1 do:
    [statements indexLast `cache.
     statements doWithIndex:
       [| :statement :index |
	index = statements indexLast /\ [w isDefaultLastStatement: statement]
          ifFalse: [w print: statement]]
		separatedBy: [w ; '.'. separator do]].
  w
].

w@(SourcePrintStream traits) printAsRole: node
[
  w withSurroundingArity: 0 do: [w print: node].
].

w@(SourcePrintStream traits) print: node@(nodes CompoundStatement traits)
[
  w indentedDo:
    [w newLine.
     w printStatements: node statements].
  w newLine.
  w
].

w@(SourcePrintStream traits) print: node@(nodes Array traits)
[
  w ; '{'.
  resend.
  w ; '}'.
  w
].

w@(SourcePrintStream traits) print: node@(nodes Parenthesis traits)
[
  w ; '('.
  w printStatements: node statements.
  w ; ')'.
  w
].

w@(SourcePrintStream traits) printVariablesOf: node@(nodes Block traits) &skipInputs: skipInputs
[
  skipInputs `defaultsTo: False.
  (skipInputs not /\ [node inputVariables size > 0]) \/
    [node localVariables size > (node inputVariables size + node optionalVariables size)]
      ifTrue:
	[w nextPut: $|.
         skipInputs
           ifFalse:
             [node inputVariables do:
	       [| :inputVar |
		w newColumn.
		w ; ':' ; (inputVar name as: String)]].
         node localVariables do:
           [| :localVar |
            (node inputVariables includes: localVar) \/ [node optionalVariables includes: localVar]
              ifFalse:
                [w newColumn.
	         w ; (localVar name as: String)]].
         w ; ' | '].
].

w@(SourcePrintStream traits) print: node@(nodes Block traits)
[
  w ; '['.
  w printVariablesOf: node.
  resend.
  w ; ']'.
].

w@(SourcePrintStream traits) printAsStatement: node
[
  w print: node
].

w@(SourcePrintStream traits) printArg: arg withRole: role
[
  w ; (arg name as: String).
  (role is: nodes Literal) /\ [role value == NoRole] ifFalse:
    [w ; '@'.
     w printAsRole: role]
].

w@(SourcePrintStream traits) print: node@(nodes Signature traits)
"Accepts a method name and array of arguments, and print the appropriate
source on the stream."
[| args selector |
  selector := node selector.
  args := node inputVariables.
  w indentedDo:
    [`conditions: (
       [(Syntax isUnarySelector: selector) /\ [args size = 1]]
         -> [w printArg: args first withRole: node roles first.
	     w newColumn.
	     w ; selector name].
       [(Syntax isBinarySelector: selector) /\ [args size = 2]]
         -> [w printArg: args first withRole: node roles first.
	     w newColumn.
	     w ; selector name.
	     w newColumn.
	     w printArg: args second withRole: node roles second].
       "For keyword sends, print the first argument, partition the selector by
         the colons, (at an offset of 1 to synchronize indices for looping),
         and then loop from one to the end, printing the keywords and arguments
         alternately."
       [Syntax isKeywordSelector: selector]
         -> [| name keywords |
	     name := selector name.
	     keywords := selector keywords.
	     w printArg: args first withRole: node roles first.
	     1 below: args size do:
               [| :index |
		w newColumn.
		w ; ((keywords at: index - 1) as: String) ; ':'.
		w newColumn.
		w printArg: (args at: index) withRole: (node roles at: index)]]).
     node optionalKeywords with: node optionalVariables do:
       [| :selector :variable |
        w newColumn.
        w ; selector name.
        w newColumn.
        w ; variable name]].
].

w@(SourcePrintStream traits) printSignatureOf: node@(nodes MethodDefinition traits)
"Accepts a method name and array of arguments, and print the appropriate
source on the stream."
[
  w print: (node as: nodes Signature)
].

w@(SourcePrintStream traits) printAsMethodBody: node@(nodes Block traits)
[
  w newLine.
  w ; '['.
  w printVariablesOf: node &skipInputs: True.
  w indentedDo:
    [w newLine.
     w printStatements: node statements].
  w newLine.
  w ; ']'.
].

w@(SourcePrintStream traits) print: node@(nodes MethodDefinition traits)
[
  w newLine.
  w printSignatureOf: node.
  w printAsMethodBody: node.
].

w@(SourcePrintStream traits) print: node@(nodes Return traits)
[
  w ; node selector ; ' '.
  w withSurroundingArity: 2 do:
    [w print: node value].
].

w@(SourcePrintStream traits) print: _@(nodes Resend traits)
[
  w ; 'resend'.
].

w@(SourcePrintStream traits) treatAsSimpleNode: node
[| nodeCount |
  nodeCount := 0.
  node walk: [| :each | (nodeCount += 1) > 7 ifTrue: [^ False]].
  True
].

"
w@(SourcePrintStream traits) treatAsSimpleNode: node@(nodes CompoundStatement traits)
[
  node statements size <= 1
].
"

w@(SourcePrintStream traits) printAsArgument: node
"Print the node as an argument and return wether something was printed at all"
[
  w print: node.
  True
].

w@(SourcePrintStream traits) printAsArgument: def@(nodes MethodDefinition traits)
[
  w surroundingArity isNegative
    ifFalse: [w ; '('].
  w print: node.
  w surroundingArity isNegative
    ifFalse: [w ; ')'].
  True
].

w@(SourcePrintStream traits) printAsArgument: _@(nodes ImplicitArgument traits)
[False].

w@(SourcePrintStream traits) printAsArgument: node@(nodes CompoundStatement traits)
[
  w indentedDo:
    [w newLine.
     w print: node].
  True
].

w@(SourcePrintStream traits) printAsArgument: node@(nodes Parenthesis traits)
[
  w ; '('.
  w indentedDo:
    [w printStatements: node statements &separatedBy: [w newColumn]].
  w ; ')'.
  True
].

w@(SourcePrintStream traits) printAsArgument: node@(nodes Block traits)
[
  (w treatAsSimpleNode: node)
    ifTrue:
      [w ; '['.
       w printVariablesOf: node.
       w indentedDo:
	 [w printStatements: node statements &separatedBy: [w newColumn]].
       w ; ']']
    ifFalse: [resend].
  True
].

w@(SourcePrintStream traits) printAsArgument: node@(nodes Array traits)
[
  (w treatAsSimpleNode: node)
    ifTrue:
      [w ; '{'.
       w indentedDo:
	 [w printStatements: node statements &separatedBy: [w newColumn]].
       w ; '}']
    ifFalse: [resend].
  True
].

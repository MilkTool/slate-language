ensureNamespace: #tokens &delegate: True.

tokens define: #Token &parents: {Cloneable}.

_ nextFrom: _@(tokens Token traits) [Nil].

_ nextLiteralFrom: _@(tokens Token traits) [Nil].

t@(tokens Token traits) signifier
"Answer a String representing the punctuation/lexical beginning."
[t printName].

tokens define: #TokenWithValue &parents: {tokens Token} &slots: {#value}.

node@(tokens TokenWithValue traits) for: obj
[node new `setting: #{#value} to: {obj}].

t@(tokens TokenWithValue traits) signifier
[
  resend ; ':' ; (t value as: '')
].

tokens define: #LiteralToken &parents: {tokens TokenWithValue}.

_ nextLiteralFrom: token@(tokens LiteralToken traits) [token value].

_ nextFrom: token@(tokens LiteralToken traits)
[nodes Literal for: token value].

tokens define: #Comment &parents: {tokens TokenWithValue}.

_@(tokens Comment traits) signifier ['"'].

tokens define: #Whitespace &parents: {tokens TokenWithValue}.

_@(tokens Whitespace traits) signifier [' '].

tokens define: #Selector &parents: {tokens TokenWithValue}.

tokens define: #QuoteMacro &parents: {tokens TokenWithValue}.

"Parser optimization"
_@(tokens Selector traits) is: _@(tokens Selector traits) [True].
_@(tokens Token traits) is: _@(tokens Selector traits) [False].

ns@Syntax isUnarySelector: sel@(tokens Selector traits)
[ns isUnarySelector: sel value].

ns@Syntax isBinarySelector: sel@(tokens Selector traits)
[ns isBinarySelector: sel value].

ns@Syntax isKeywordSelector: sel@(tokens Selector traits)
[ns isKeywordSelector: sel value].

ns@Syntax isOptionalSelector: sel@(tokens Selector traits)
[ns isOptionalSelector: sel value].

ns@Syntax isReturnSelector: sel@(tokens Selector traits)
[ns isReturnSelector: sel value].

ns@Syntax isUnarySelector: sel@(tokens Token traits) [False].
ns@Syntax isBinarySelector: sel@(tokens Token traits) [False].
ns@Syntax isKeywordSelector: sel@(tokens Token traits) [False].
ns@Syntax isOptionalSelector: sel@(tokens Token traits) [False].
ns@Syntax isReturnSelector: sel@(tokens Token traits) [False].

_ nextLiteralFrom: token@(tokens Selector traits) [token value].

parser nextFrom: token@(tokens Selector traits)
[
  (Syntax isUnarySelector: token)
    ifTrue:
      [(parser currentScope findVariable: token value)
         ifNil:
           [token value =~ #resend
              ifTrue: [nodes Resend clone]
              ifFalse: [nodes UnaryMessage
                          sending: token value to: {nodes ImplicitArgument}]]
         ifNotNilDo: #load `er]
].

s@(tokens Selector traits) messageType
[nodes Message].

tokens define: #MacroSelector &parents: {tokens Selector}.

_ nextFrom: token@(tokens MacroSelector traits)
[
  (Syntax isUnarySelector: token) ifTrue:
    [nodes UnaryMacro sending: token value to: {nodes ImplicitArgument}]
].

s@(tokens MacroSelector traits) messageType
[nodes Macro].

tokens define: #DeferredSelector &parents: {tokens Selector}.

_ nextFrom: token@(tokens DeferredSelector traits)
[
  (Syntax isUnarySelector: token) ifTrue:
    [nodes UnaryDeferred
       sending: token value to: {nodes ImplicitArgument}]
].

s@(tokens DeferredSelector traits) messageType
[nodes Deferred].

tokens define: #Control &parents: {tokens Token}.

tokens define: #BeginParenthesis &parents: {tokens Control}.

parser nextLiteralFrom: _@(tokens BeginParenthesis traits)
[parser nextLiteralFrom: tokens BeginLiteralParenthesis].

parser nextFrom: _@(tokens BeginParenthesis traits)
[
  parser nonInteractivelyDo:
    [([| :statements token |
       statements nextPut: parser nextAsStatement.
       [(token := parser nextToken) isSameAs: tokens EndParenthesis]
          whileFalse:
            [parser check: token is: parser EndParenthesisStatementTokens.
             statements nextPut: parser nextAsStatement]]
       writingAs: #{}) as: nodes Parenthesis]
].

_@(tokens BeginParenthesis traits) signifier ['('].

tokens define: #EndParenthesis &parents: {tokens Control}.

_@(tokens EndParenthesis traits) signifier [')'].

tokens define: #BeginArray &parents: {tokens Control}.

parser nextLiteralFrom: token@(tokens BeginArray traits)
[(parser nextFrom: token) evaluate].

parser nextFrom: _@(tokens BeginArray traits)
[
  parser nonInteractivelyDo:
    [([| :statements token |
       [(token := parser peekToken) isSameAs: tokens EndArray]
          whileFalse:
            [statements nextPut: parser nextAsStatement.
             parser check: (token := parser peekToken) is: parser EndArrayStatementTokens.
             (token isSameAs: tokens EndStatement) ifTrue: [parser nextToken]].
       parser nextToken] writingAs: #{}) as: nodes Array]
].

_@(tokens BeginArray traits) signifier ['{'].

tokens define: #EndArray &parents: {tokens Control}.

_@(tokens EndArray traits) signifier ['}'].

tokens define: #BeginLiteral &parents: {tokens Control}.

parser nextFrom: token@(tokens BeginLiteral traits)
[
  parser inScope: parser currentScope topLevel do:
    [nodes Literal for: (parser nextLiteralFrom: token)]
].

tokens define: #BeginLiteralArray &parents: {tokens BeginLiteral}.

parser nextLiteralFrom: _@(tokens BeginLiteralArray traits)
[
  parser nextLiteralFrom: tokens BeginArray
].

_@(tokens BeginLiteralArray traits) signifier ['#{'].

tokens define: #BeginLiteralParenthesis &parents: {tokens BeginLiteral}.

parser nextLiteralFrom: _@(tokens BeginLiteralParenthesis traits)
[
  parser nonInteractivelyDo:
    [[| :elements token |
      [(token := parser peekToken) isSameAs: tokens EndParenthesis]
         whileFalse: [elements nextPut: parser nextLiteral].
      parser nextToken] writingAs: #{}]
].

_@(tokens BeginLiteralParenthesis traits) signifier ['##('].

tokens define: #BeginPattern &parents: {tokens Control}.

parser nextFrom: _@(tokens BeginPattern traits)
[| statements |
  parser nonInteractivelyDo:
    [statements :=
       [| :statements token |
        statements nextPut: parser nextAsStatement.
        [(token := parser nextToken) isSameAs: tokens EndParenthesis]
          whileFalse:
            [parser check: token is: parser EndParenthesisStatementTokens.
             statements nextPut:
               (token == tokens At
                  ifTrue:
                    [parser nextMessage &after:
                       (parser recordDeclaredTypeOf: parser nextSignature)]
                  ifFalse:
                    [parser nextAsStatement])]]
       writingAs: #{}.
     statements infect:
       [| :statement |
        statement transformBy: [| :node | node as: nodes Placeholder].
        nodes Pattern for: statement]].
  statements parenthesize
].

_@(tokens BeginPattern traits) signifier ['#('].

tokens define: #BeginLiteralBlock &parents: {tokens BeginLiteral}.

parser nextLiteralFrom: _@(tokens BeginLiteralBlock traits)
[
  (parser nextLiteralFrom: tokens BeginBlock) do
].

_@(tokens BeginLiteralBlock traits) signifier ['#['].

tokens define: #BeginBlock &parents: {tokens Control}.

parser nextLiteralFrom: token@(tokens BeginBlock traits)
[
  (parser nextFrom: token) evaluate
].

parser nextFrom: _@(tokens BeginBlock traits)
[
  parser nextBlock
].

_@(tokens BeginBlock traits) signifier ['['].

tokens define: #EndBlock &parents: {tokens Control}.

_@(tokens EndBlock traits) signifier [']'].

tokens define: #CommentStart &parents: {tokens Control}.

_@(tokens CommentStart traits) signifier ['"'].

tokens define: #CommentEnd &parents: {tokens Control}.

_@(tokens CommentEnd traits) signifier ['"'].

tokens define: #At &parents: {tokens Control}.

_ nextLiteralFrom: _@(tokens At traits) [#'@'].

_@(tokens At traits) signifier ['@'].

tokens define: #EndStatement &parents: {tokens Control}.

_ nextLiteralFrom: _@(tokens EndStatement traits) [#'.'].

_@(tokens EndStatement traits) signifier ['.'].

tokens define: #Comma &parents: {tokens Control}.

_ nextLiteralFrom: _@(tokens Comma traits) [#','].

_@(tokens Comma traits) signifier [','].

tokens define: #BeginVariables &parents: {tokens Control}.

_ nextLiteralFrom: _@(tokens BeginVariables traits) [#'|'].

_@(tokens BeginVariables traits) signifier ['|'].

tokens define: #EndVariables &builder: [tokens BeginVariables].

tokens define: #EndStream &parents: {tokens Control}.
"The end of the input Stream."

tokens define: #EndLine &parents: {tokens Control}.
"The end of a line of input."

tokens define: #Type &parents: {tokens Control}.
"A type annotation token."

_@(tokens Type traits) signifier ['!'].

tokens define: #Quote &parents: {tokens Control}.
"Begins a quoted atom, or non-selector syntax prefixed by `."

parser nextFrom: token@(tokens Quote traits)
[
  nodes UnaryMacro sending: #quote to: {parser nextAtom}
].

_@(tokens Quote traits) signifier ['`'].

tokens define: #Eventually &parents: {tokens Control}.
"Begins an eventual atom, or non-selector syntax prefixed by %."

parser nextFrom: token@(tokens Eventually traits)
[
  nodes UnaryMessage sending: #eventually to:
    {(nodes Block newFor: parser nextAtom) `>>
      [parentScope := parser currentScope. recordPositionFrom: parser]}
].

_ nextLiteralFrom: _@(tokens Eventually traits) [#'%'].

_@(tokens Eventually traits) signifier ['%'].

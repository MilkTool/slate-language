node@(Syntax Node traits) expand &environment: env
"Alias of macroExpand"
[node macroExpand &environment: env].

node@(Syntax Node traits) macroExpand &environment: _
"The default do-nothing action of macro expansion."
[
  node
].

ann@(Syntax Annotation traits) macroExpand &environment: env
"Return the annotation node, but replace the expression that the node
annotates with its expansion."
[| expansion |
  ann value == (expansion := ann value macroExpand &environment: env)
    ifFalse: [ann value := expansion].
  ann
].

macro@(Syntax Macro traits) macroExpand &optionals: opts &environment: env
"Simply apply the macro-method to its arguments. The generated nodes
inherit the macro node's debugging information."
[| expansion |
  macro selector = #macroExpand ifTrue:
    [error: 'Cannot macroExpand `macroExpand. Use `(expr) macroExpand instead'.
     ^ macro].
  opts := opts
    ifNil: [#{}]
    ifNotNil:
      [[| :result |
        opts keywords with: opts arguments do:
          [| :key :arg | result nextPutAll: {key intern. arg}]] writingAs: #{}].
  expansion :=
    (macro selector sendTo: macro arguments
      &optionals: (opts ; {#&environment:. env}))
        macroExpand &environment: env.
  macro lineNumber ifNotNilDo:
    [| :lineNumber |
     expansion walk:
       [| :child | child lineNumber `defaultsTo: lineNumber]].
  expansion
].

message@(Syntax Message traits) macroExpand &optionals: opts &environment: env
"Replace each argument to the message with its macro-expanded value.
When appropriate substitute a LoadVariable or StoreVariable for the message."
[| expansion |
  "Ensure macro expansions properly refer to Variables."
  env ifNotNil:
    [message == (expansion := env linkVariablesIn: message)
       ifFalse: [^ (expansion macroExpand &optionals: opts &environment: env)]].
  message arguments
    doWithIndex:
      [| :argument :index |
       argument == (expansion := argument macroExpand &environment: env)
         ifFalse: [message arguments at: index put: expansion]].
  opts
    ifNil: [message]
    ifNotNil:
      [opts message == message
         ifFalse: [opts message := message].
       opts arguments
         doWithIndex:
           [| :argument :index |
            argument == (expansion := argument macroExpand &environment: env)
              ifFalse:
                [opts arguments at: index put: expansion]].
       opts]
].

opts@(Syntax OptionalKeywords traits) macroExpand &environment: env
"Replace each argument to the optional keywords with its macro-expanded value."
[
  opts message macroExpand &optionals: opts &environment: env
].

group@(Syntax CompoundStatement traits) macroExpand &environment: env
"Replace the group's contents with their macro-expansions. This covers:
Arrays, Blocks, and Parentheses."
[
  group statements
    doWithIndex:
      [| :statement :index expansion |
       statement == (expansion := statement macroExpand &environment: env)
         ifFalse:
           [group statements at: index put: expansion]].
  group
].

block@(Syntax Block traits) macroExpand &environment: env
"Set up the environment optional parameter to use the block as its value,
and resend it on to handle the main structure."
[
  env ifNotNil: [env linkVariablesIn: block].
  env := block.
  resend
].

method@(Syntax MethodDefinition traits) macroExpand &environment: env
"MethodDefinition nodes must handle the additional complication of roles."
[
  method roles
    doWithIndex:
      [| :role :index |
       role ifNotNil:
         [| expansion |
          role == (expansion := role macroExpand &environment: env)
            ifFalse: [method roles at: index put: expansion]]].
  resend
].

load@(Syntax LoadVariable traits) macroExpand &environment: env
[
  env
    ifNil: [load]
    ifNotNil: [env linkVariablesIn: load]
].

store@(Syntax StoreVariable traits) macroExpand &environment: env
"Expand the value to be stored."
[| expansion |
  env ifNotNil:
    [store == (expansion := env linkVariablesIn: store)
       ifFalse: [^ (expansion macroExpand &environment: env)]].
  store value == (expansion := store value macroExpand &environment: env)
    ifFalse: [store value := expansion].
  store
].

ret@(Syntax Return traits) macroExpand &environment: env
"Expand the value to be returned."
[| expansion |
  ret value == (expansion := ret value macroExpand &environment: env)
    ifFalse: [ret value := expansion].
  ret
].

_@(Syntax Block traits) linkVariablesIn: node
[
  node
].

b@(Syntax Block traits) linkVariablesIn: load@(Syntax LoadVariable traits)
[
  (b includesScope: load variable scope)
    ifTrue:
      [load]
    ifFalse:
      [(b findVariable: load variable name)
        ifNil:
          [Syntax UnaryMessage sending: load variable name to: {Syntax ImplicitArgument}]
        ifNotNilDo:
          [| :var |
           load variable := var.
           load]]
].

b@(Syntax Block traits) linkVariablesIn: store@(Syntax StoreVariable traits)
[
  (b includesScope: store variable scope)
    ifTrue:
      [store]
    ifFalse:
      [(b findVariable: store variable name)
        ifNil:
          [Syntax KeywordMessage
             sending: store variable name name ; ':'
             to: {Syntax ImplicitArgument. store value}]
        ifNotNilDo:
          [| :var |
           store variable := var.
           store]]
].

b@(Syntax Block traits) linkVariablesIn: msg@(Syntax UnaryMessage traits)
[
  (msg arguments first isSameAs: Syntax ImplicitArgument)
    ifTrue: [(b findVariable: msg selector)
               ifNil: [msg]
               ifNotNilDo: [| :var | Syntax LoadVariable from: var]]
    ifFalse: [msg]
].

b@(Syntax Block traits) linkVariablesIn: msg@(Syntax KeywordMessage traits)
[
  (msg arguments first isSameAs: Syntax ImplicitArgument)
    /\ [msg arguments size = 2]
    ifTrue: [(b findVariable: msg selector name allButLast intern)
               ifNil: [msg]
               ifNotNilDo: [| :var | Syntax StoreVariable of: msg arguments second into: var]]
    ifFalse: [msg]
].

parent@(Syntax Block traits) linkVariablesIn: child@(Syntax Block traits)
[
  child parentScope == parent \/ [child == parent]
    ifFalse: [child parentScope := parent].
  child
].

b@(Syntax Block traits) linkVariables
"Fixes up a Block syntax tree so that all message sends within which should
actually be loads and stores are turned into those corresponding expression
types. This works by recursing down the tree with linkVariablesIn:."
[
   b transformBy: [| :node | b linkVariablesIn: node]
].

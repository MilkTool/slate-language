node@(nodes Node traits) expand &environment: env
"Alias of macroExpand"
[node macroExpand &environment: env].

node@(nodes Node traits) macroExpand &environment: _
"The default do-nothing action of macro expansion."
[
  node
].

ann@(nodes Annotation traits) macroExpand &environment: env
"Return the annotation node, but replace the expression that the node
annotates with its expansion."
[| expansion |
  ann value == (expansion := ann value macroExpand &environment: env)
    ifFalse: [ann value := expansion].
  ann
].

macro@(nodes Macro traits) macroExpand &optionals: opts &environment: env
"Simply apply the macro-method to its arguments. The generated nodes
inherit the macro node's debugging information."
[| expansion |
  macro selector = #macroExpand ifTrue:
    [error: 'Cannot macroExpand `macroExpand. Use `(expr) macroExpand instead'.
     ^ macro].
  opts := opts
    ifNil: [#{}]
    ifNotNil:
      [[| :result |
        opts keywords with: opts arguments do:
          [| :key :arg | result nextPutAll: {key intern. arg}]] writingAs: #{}].
  expansion :=
    (macro selector sendTo: macro arguments
      &optionals: (opts ; {#&environment:. env}))
        macroExpand &environment: env.
  macro lineNumber ifNotNilDo:
    [| :lineNumber |
     expansion walk:
       [| :child | child lineNumber `defaultsTo: lineNumber]].
  expansion
].

message@(nodes Message traits) macroExpand &optionals: opts &environment: env
"Replace each argument to the message with its macro-expanded value.
When appropriate substitute a LoadVariable or StoreVariable for the message."
[| expansion |
  "Ensure macro expansions properly refer to Variables."
  env ifNotNil:
    [message == (expansion := env linkVariablesIn: message)
       ifFalse: [^ (expansion macroExpand &optionals: opts &environment: env)]].
  message arguments
    doWithIndex:
      [| :argument :index |
       argument == (expansion := argument macroExpand &environment: env)
         ifFalse: [message arguments at: index put: expansion]].
  opts
    ifNil: [message]
    ifNotNil:
      [opts message == message
         ifFalse: [opts message := message].
       opts arguments
         doWithIndex:
           [| :argument :index |
            argument == (expansion := argument macroExpand &environment: env)
              ifFalse:
                [opts arguments at: index put: expansion]].
       opts]
].

opts@(nodes OptionalKeywords traits) macroExpand &environment: env
"Replace each argument to the optional keywords with its macro-expanded value."
[
  opts message macroExpand &optionals: opts &environment: env
].

rest@(nodes RestArguments traits) macroExpand &environment: env
"Replace each rest argument with its macro-expanded value."
[
  (rest for: (rest message macroExpand &environment: env)) `>>
    [arguments := rest arguments collect:
       [| :arg | arg macroExpand &environment: env]. ]
].

group@(nodes CompoundStatement traits) macroExpand &environment: env
"Replace the group's contents with their macro-expansions. This covers:
Arrays, Blocks, and Parentheses."
[
  group statements
    doWithIndex:
      [| :statement :index expansion |
       statement == (expansion := statement macroExpand &environment: env)
         ifFalse:
           [group statements at: index put: expansion]].
  group
].

block@(nodes Block traits) macroExpand &environment: env
"Set up the environment optional parameter to use the block as its value,
and resend it on to handle the main structure."
[
  env ifNotNil: [env linkVariablesIn: block].
  env := block.
  resend
].

method@(nodes MethodDefinition traits) macroExpand &environment: env
"MethodDefinition nodes must handle the additional complication of roles."
[
  method roles
    doWithIndex:
      [| :role :index |
       role ifNotNil:
         [| expansion |
          role == (expansion := role macroExpand &environment: env)
            ifFalse: [method roles at: index put: expansion]]].
  resend
].

load@(nodes LoadVariable traits) macroExpand &environment: env
[
  env
    ifNil: [load]
    ifNotNil: [env linkVariablesIn: load]
].

store@(nodes StoreVariable traits) macroExpand &environment: env
"Expand the value to be stored."
[| expansion |
  env ifNotNil:
    [store == (expansion := env linkVariablesIn: store)
       ifFalse: [^ (expansion macroExpand &environment: env)]].
  store value == (expansion := store value macroExpand &environment: env)
    ifFalse: [store value := expansion].
  store
].

ret@(nodes Return traits) macroExpand &environment: env
"Expand the value to be returned."
[| expansion |
  ret value == (expansion := ret value macroExpand &environment: env)
    ifFalse: [ret value := expansion].
  ret
].

_@(nodes Block traits) linkVariablesIn: node
[
  node
].

b@(nodes Block traits) linkVariablesIn: load@(nodes LoadVariable traits)
[
  (b includesScope: load variable scope)
    ifTrue:
      [load]
    ifFalse:
      [(b findVariable: load variable name)
        ifNil:
          [nodes UnaryMessage sending: load variable name to: {nodes ImplicitArgument}]
        ifNotNilDo:
          [| :var |
           load variable := var.
           load]]
].

b@(nodes Block traits) linkVariablesIn: store@(nodes StoreVariable traits)
[
  (b includesScope: store variable scope)
    ifTrue:
      [store]
    ifFalse:
      [(b findVariable: store variable name)
        ifNil:
          [nodes KeywordMessage
             sending: store variable name name ; ':'
             to: {nodes ImplicitArgument. store value}]
        ifNotNilDo:
          [| :var |
           store variable := var.
           store]]
].

b@(nodes Block traits) linkVariablesIn: msg@(nodes UnaryMessage traits)
[
  (msg arguments first isSameAs: nodes ImplicitArgument)
    ifTrue: [(b findVariable: msg selector)
               ifNil: [msg]
               ifNotNilDo: [| :var | nodes LoadVariable from: var]]
    ifFalse: [msg]
].

b@(nodes Block traits) linkVariablesIn: msg@(nodes KeywordMessage traits)
[
  (msg arguments first isSameAs: nodes ImplicitArgument)
    /\ [msg arguments size = 2]
    ifTrue: [(b findVariable: msg selector name allButLast intern)
               ifNil: [msg]
               ifNotNilDo: [| :var | nodes StoreVariable of: msg arguments second into: var]]
    ifFalse: [msg]
].

parent@(nodes Block traits) linkVariablesIn: child@(nodes Block traits)
[
  child parentScope == parent \/ [child == parent]
    ifFalse: [child parentScope := parent].
  child
].

b@(nodes Block traits) linkVariables
"Fixes up a Block syntax tree so that all message sends within which should
actually be loads and stores are turned into those corresponding expression
types. This works by recursing down the tree with linkVariablesIn:."
[
   b transformBy: [| :node | b linkVariablesIn: node]
].

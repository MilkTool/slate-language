define: #Parser &parents: {ReadStream} &slots: {
  #lexer -> Lexer.
  #currentScope -> nodes Ground.
  "Where expressions are evaluated."
  #typesNamespace -> Types.
  "Where expressions following ! annotations are evaluated."
  #parseInteractively -> False.
  "Whether a newline after a complete expression denotes completion."
}.
"Reads tokens from a Lexer and builds a Syntax Node tree for it."

(Syntax import: #Parser from: here) `bootstrapping.

Parser traits define: #EndStatementTokens &builder: [{tokens EndStatement. tokens EndStream}].
Parser traits define: #EndBlockStatementTokens &builder: [{tokens EndStatement. tokens EndBlock}].
Parser traits define: #EndParenthesisStatementTokens &builder: [{tokens EndStatement. tokens EndParenthesis}].
Parser traits define: #EndArrayStatementTokens &builder: [{tokens EndStatement. tokens EndArray}].
Parser traits define: #InteractiveExcludeTokens &builder: [{tokens Comment}].
Parser traits define: #ExcludeTokens &builder: [{tokens Comment. tokens EndLine}].

Parser traits define: #SpecialBinarySelectors &builder:
  [#{#:=. #::=. #=:=. #?=. #+=. #-=. #*=. #/=}].

obj@(Root traits) recordPositionFrom: p@(Parser traits)
[(nodes Literal for: obj) recordPositionFrom: p].

node@(nodes Node traits) recordPositionFrom: p@(Parser traits)
[
  node `>>
   [lineNumber := p lexer lineNumber.
    source := p lexer source. ]
].

p@(Parser traits) on: source
[
  p `>>
    [lexer := p lexer newOn: source reader.
     reset. ]
].

p@(Parser traits) reset
[
  p lexer reset.
].

p@(Parser traits) is: token likeAnyOf: options
[
  options anySatisfy: [| :opt | token isSameAs: opt]
].

p@(Parser traits) excludedTokens &interactive: interactive
[
  (interactive `defaultsTo: p parseInteractively)
    ifTrue: [p InteractiveExcludeTokens]
    ifFalse: [p ExcludeTokens]
].

p@(Parser traits) nextToken &interactive: interactive
"Takes the next token from either the buffer or the lexer transparently."
[| exclude token |
  exclude := p excludedTokens &interactive: interactive.
  [p is: (token := p lexer next) likeAnyOf: exclude] whileTrue.
  token
].

p@(Parser traits) peekToken &interactive: interactive
"Return the next non-stop token from the Lexer, but leave it in the buffer
and don't update the position."
[| exclude token lookAheadIndex |
  exclude := p excludedTokens &interactive: interactive.
  "Return the next non-stop token."
  lookAheadIndex := -1.
  [p is: (token := p lexer peekForwardBy: (lookAheadIndex += 1))
     likeAnyOf: exclude] whileTrue.
  token
].

p@(Parser traits) undoToken: token
[
  p lexer undoToken: token
].

p@(Parser traits) isAtEnd
[
  p lexer isAtEnd
].

Parser traits define: #Error &parents: {Lexer Error}.
"An error that occurred in parsing, always requiring a description."

p@(Parser traits) error: description
[
  (p Error newDescription:
    'Line ' ; p lexer lineNumber printString ; ': ' ; description)
   `>> [lineNumber := p lexer lineNumber. signal]
].

p@(Parser traits) unexpectedlyFound: found after: expr
[
  p error: 'Expected: (anything else) but found: ' ; found signifier ; ' after: ' ; expr printString
].

p@(Parser traits) expected: expected butFound: found@(tokens Token traits)
[
  p error: 'Expected: ' ; expected signifier  ; ' but found: ' ; found signifier
].

p@(Parser traits) check: found is: expected@(tokens Token traits)
[(found isSameAs: expected) ifFalse:
  [p expected: expected butFound: found]].

p@(Parser traits) check: found is: expected@(Sequence traits)
[(expected anySatisfy: #(isSameAs: found) `er) ifFalse:
  [p expected: expected butFound: found]].

p@(Parser traits) expected: expected@(Sequence traits) butFound: found
[| expectNames |
  (expectNames := expected collect: #signifier `er select: #isNotNil `er)
    size > 1 ifTrue:
      [expectNames
         at: expectNames indexLast
         put: 'or ' ; expectNames last].
  expectNames := expectNames join &separator:
    (expectNames size = 2 ifTrue: [' '] ifFalse: [', ']).
  p error: 'Expected ' ; expectNames ; ' but found ' ; found signifier
].

p@(Parser traits) nextExpression
[| token lookAheadIndex |
  lookAheadIndex := 0.
  [token := p lexer peekForwardBy: lookAheadIndex.
   (token isSameAs: tokens BeginVariables) ifTrue:
     [p lexer outputBuffer at: lookAheadIndex put:
        (tokens Selector for: (p nextLiteralFrom: token))].
   token == tokens At ifTrue:
     [^ (p nextMessage &after: (p recordDeclaredTypeOf: p nextSignatureOrDefinition))].
   lookAheadIndex += 1.
   (token isSameAs: tokens Selector)
     \/ [token isSameAs: tokens Comment]
     \/ [p parseInteractively not \/ [lookAheadIndex = 1]
           /\ [token isSameAs: tokens EndLine]]] whileTrue.
  p nextMessage
].

p@(Parser traits) nextAsStatement
"Find a complete expression suitable as a statement."
[
  p nextExpression ifNil: [nodes Literal Nil]
].

p@(Parser traits) next
"The top-level Stream processing to return the next syntax node."
[| statement token terminatesCorrectly |
  statement := p nextExpression.
  "Unless parsing lines greedily, statements need to be separated explicitly or be at the end of the input."
  (terminatesCorrectly := p is: (token := p nextToken) likeAnyOf: p EndStatementTokens)
    \/ p parseInteractively
    ifFalse: [p error: 'Expression was not terminated or separated correctly.'].
  statement
    ifNil:
      [terminatesCorrectly
         ifTrue: [nodes Literal Nil]
         ifFalse: [p expected: p EndStatementTokens
                     butFound: (p nextToken &interactive: p parseInteractively)]]
].

p@(Parser traits) nonInteractivelyDo: block
[| interactive |
  interactive := p parseInteractively.
  p parseInteractively := False.
  [block do] ensure: [p parseInteractively: interactive]
].

p@(Parser traits) inScope: scope do: block
[| oldScope |
  oldScope := p currentScope.
  p currentScope := scope.
  [block do] ensure: [p currentScope := oldScope]
].

p@(Parser traits) nextAtom
[| token |
  (p nextFrom: (token := p nextToken))
    ifNil: [p undoToken: token. ]
    ifNotNilDo: [| :node | p recordDeclaredTypeOf: (node recordPositionFrom: p)]
].

p@(Parser traits) nextLiteral
[
  p nextLiteralFrom: p nextToken
].

p@(Parser traits) recordDeclaredTypeOf: obj
[obj].

p@(Parser traits) recordDeclaredTypeOf: node@(nodes Node traits)
"Sets the type attribute of the node based on the suffixed type annotation.
Type expressions are evaluated in a separate namespace for convenience.
Type annotation suffixes may also be chained (for no particular reason)."
[| token |
  p inScope: (p currentScope topLevel for: p typesNamespace) do:
    [[(token := p nextToken &interactive: p parseInteractively)
        isSameAs: tokens Type]
       whileTrue:
         [node type := p nextAtom
            ifNil: [p error: 'No type given after type declaration marker.']
            ifNotNilDo: [| :typeExpr | typeExpr evaluateIn: p typesNamespace]].
     p undoToken: token].
  node
].

p@(Parser traits) nextMessage &after: node
[
  p parseRestArgumentsFor:
    (p parseOptionalKeywordsFor:
      (p nextPattern &after: node))
].

p@(Parser traits) parseRestArgumentsFor: expr
[| token |
  ((token := p peekToken) isSameAs: tokens Comma)
    ifTrue: [p unexpectedlyFound: token after: expr]
    ifFalse: [expr]
].

p@(Parser traits) parseRestArgumentsFor: message@(nodes Message traits)
[| token arguments |
  arguments :=
    [| :arguments |
     [(token := p nextToken) isSameAs: tokens Comma]
       whileTrue: [arguments nextPut: p nextBinaryMessages]] writingAs: #{}.
  p undoToken: token.
  arguments
    ifEmpty: [message]
    ifNotEmpty: [(nodes RestArguments for: message) `>>
                   [arguments := arguments.
                    recordPositionFrom: p]]
].

p@(Parser traits) parseOptionalKeywordsFor: expr
[| token |
  (Syntax isOptionalSelector: (token := p peekToken))
    ifTrue: [p unexpectedlyFound: token after: expr]
    ifFalse: [expr]
].

p@(Parser traits) parseOptionalKeywordsFor: message@(nodes Message traits)
[| token keywords arguments |
  arguments := #{} writer.
  keywords :=
    [| :keywords |
     [Syntax isOptionalSelector: (token := p nextToken)]
       whileTrue:
         [keywords nextPut: token value intern.
          arguments nextPut: p nextBinaryMessages]]
       writingAs: #{}.
  p undoToken: token.
  keywords
    ifEmpty: [message]
    ifNotEmpty: [(nodes OptionalKeywords for: message) `>>
                   [keywords := keywords.
                    arguments := arguments contents.
                    recordPositionFrom: p]]
].

p@(Parser traits) nextUnaryMessages &after: node
[| result token |
  result := node `defaultsTo: p nextAtom.
  [Syntax isUnarySelector: (token := p nextToken &interactive: p parseInteractively)]
    whileTrue:
      [(result := token messageType sending: token value to: {result})
         recordPositionFrom: p.
       p recordDeclaredTypeOf: result].
  p undoToken: token.
  result
].

p@(Parser traits) nextBinaryMessages &after: node
[| result token firstArg |
  result := p nextUnaryMessages &after: node.
  [(Syntax isBinarySelector: (token := p nextToken &interactive: p parseInteractively))
     /\ [p SpecialBinarySelectors noneSatisfy: [| :sel | token value =~ sel]]]
    whileTrue:
      [result := result isNil /\ [Syntax isReturnSelector: token]
         ifTrue:
           [(token value caseOf:
               {'^' -> [nodes ReturnClose].
                '^^' -> [nodes ReturnFar]}
               otherwise: [nodes ReturnLevel by:
                             (Integer readFrom: token value allButFirst)])
              of: p nextUnaryMessages]
         ifFalse:
           [firstArg := result ifNil: [nodes ImplicitArgument].
            token messageType sending: token value to:
              (p nextUnaryMessages
                 ifNil: [{firstArg}]
                 ifNotNilDo: [| :secondArg | {firstArg. secondArg}])].
       result recordPositionFrom: p].
  p undoToken: token.
  result
].

p@(Parser traits) nextKeywordMessages &after: argument
"Handles/creates all kewyord-message-send forms. It must gather all keywords
into a single selector with arguments."
[| messageType token result arguments selector |
  argument := p nextBinaryMessages &after: argument.
  token := p peekToken &interactive: p parseInteractively.
  selector := '' writer.
  (Syntax isKeywordSelector: token)
    ifTrue:
      [arguments :=
         [| :result |
          result nextPut: (argument ifNil: [nodes ImplicitArgument]).
          [(Syntax isKeywordSelector: (token := p nextToken &interactive: p parseInteractively))
             /\ [messageType isNil \/ [token messageType == nodes Message]]
             /\ [(Syntax isOptionalSelector: token) not]]
            whileTrue:
              [messageType ifNil: [messageType := token messageType].
               (Syntax isKeywordSelector: token)
                 ifFalse: [p error: 'Bad keyword token'].
               selector ; token value.
               result nextPut:
                 (p nextBinaryMessages ifNil: [p error: 'Bad keyword argument (being implicit).'])].
          p undoToken: token] writingAs: #{}.
       selector := selector contents.
       "Handle the special case of a StoreVariable:"
       arguments size = 2 /\ [arguments first isSameAs: nodes ImplicitArgument]
         ifTrue:
           [(p currentScope findVariable: selector allButLast intern)
              ifNotNilDo:
                [| :variable | ^ ((variable store: arguments second) recordPositionFrom: p)]].
       (messageType sending: selector to: arguments) recordPositionFrom: p]
    ifFalse: [argument]
].

p@(Parser traits) nextSpecialBinaryMessages &after: node
"Handles/creates all special-message-send forms."
[| token result |
  result := p nextKeywordMessages &after: node.
  [(Syntax isBinarySelector: (token := p nextToken &interactive: p parseInteractively))
     /\ [p SpecialBinarySelectors anySatisfy: [| :sel | token value =~ sel]]]
    whileTrue:
      [result := nodes BinaryMacro sending: token value to:
         (p nextExpression ifNil: [{result}] ifNotNilDo: [| :rhs | {result. rhs}])].
  p undoToken: token.
  result
].

p@(Parser traits) nextPattern &after: node
[| token result |
  result := p nextSpecialBinaryMessages &after: node.
  [(token := p nextToken &interactive: p parseInteractively) == tokens BeginPattern
    \/ [(token isSameAs: tokens LiteralToken) /\ [token value isSameAs: Symbol]]]
    whileTrue:
      [token == tokens BeginPattern
         ifTrue: [| partial |
                  (partial := p nextFrom: token) arity >= 1
                    ifTrue:
                      [partial completeWith: {result}.
                       result := partial message]
                    ifFalse: [p error: 'Pattern cascaded with too many placeholders.']]
         ifFalse: [result := nodes Message sending: token value to: {result}]].
  p undoToken: token.
  result
].

p@(Parser traits) newVariableNamed: name in: block
[
  nodes Variable clone `>>
    [name := name intern. scope := block. recordPositionFrom: p]
].

p@(Parser traits) nextBlock &updating: block
[| token statements lineNumber inputVariables optKeywords optVariables |
  block `defaultsTo: (nodes Block new recordPositionFrom: p).
  lineNumber := p lexer lineNumber.
  inputVariables := #{} writer.
  optKeywords := #{} writer.
  optVariables := #{} writer.
  block parentScope := p currentScope.
  p inScope: block do:
    [p nonInteractivelyDo:
       [((token := p nextToken) isSameAs: tokens BeginVariables)
          ifTrue:
            [token := p nextToken.
             [token isSameAs: tokens EndVariables]
               whileFalse:
                 [| variable name varName |
                  (token isSameAs: tokens Selector)
                    ifFalse: [p error: 'Bad variable declaration'].
                  name := token value.
                  (Syntax isUnarySelector: name)
                    ifTrue:
                      [variable := block localVariables
                         detect: [| :var | name =~ var name /\ [(name =~ #_) not]]
                         ifNone: [p newVariableNamed: name in: block]]
                    ifFalse:
                      [varName := name allButFirst intern.
                       (Syntax isUnarySelector: varName) ifFalse:
                         [p error: 'Bad rest variable declaration: ' ; name].
                       (varName =~ #_) not
                         /\ [block localVariables anySatisfy: [| :var | varName =~ var name]]
                         ifTrue: [p error: 'Variable already declared: ' ; varName].
                       variable := p newVariableNamed: varName in: block.
                       name first caseOf:
                         {$* -> [block restVariable := variable].
                          $: -> [inputVariables nextPut: variable].
                          $& -> [optKeywords nextPut: name intern.
                                 optVariables nextPut: variable]}
                         otherwise: [p error: 'Bad declaration in Block header: ' ; name]].
                  p recordDeclaredTypeOf: variable.
                  token := p nextToken.
                  variable name = #_
                    \/ [block localVariables noneSatisfy: [| :var | variable name =~ var name]]
                    ifTrue: [block localVariables := block localVariables copyWith: variable]]]
          ifFalse: [p undoToken: token].
        block inputVariables := block inputVariables ; inputVariables contents.
        block optionalKeywords := block optionalKeywords ; optKeywords contents.
        block optionalVariables := block optionalVariables ; optVariables contents.
        "Defines the order of locals: inputs, optionals, rest, then non-optional locals."
        block localVariables :=
          block inputVariables ;
          block optionalVariables ;
          (block restVariable ifNil: [#{}] ifNotNilDo: [| :rest | {rest}]) ;
          (block localVariables select:
             [| :var |
              (block inputVariables includes: var) not
                /\ [(block optionalVariables includes: var) not]
                /\ [block restVariable ~== var]]).
        statements := #{} writer.
        statements nextPut: p nextAsStatement.
        [(token := p nextToken) isSameAs: tokens EndBlock]
          whileFalse:
            [p check: token is: p EndBlockStatementTokens.
             statements nextPut: p nextAsStatement]]].
  block statements := statements contents.
  block
].

p@(Parser traits) nextSignatureOrDefinition
"Parses and returns a method definition, which has the highest precedence."
[| selector roles inputVariables optKeywords optVariables token result |
  selector := Nil.
  roles := #{} writer.
  inputVariables := #{} writer.
  optKeywords := #{} writer.
  optVariables := #{} writer.
  result := nodes MethodDefinition new recordPositionFrom: p.
  [(token := p nextToken) isSameAs: tokens BeginBlock]
    whileFalse:
      [| variable |
       (Syntax isUnarySelector: token)
         ifFalse: [p error: 'Bad input variable name in method signature: ' ; token printString].
       variable := p newVariableNamed: token value in: result.
       token := p nextToken.
       optKeywords size isZero
         ifTrue:
           [inputVariables nextPut: variable.
            token == tokens At
              ifTrue: [roles nextPut: p nextAtom. token := p nextToken]
              ifFalse: [roles nextPut: ((nodes Literal for: NoRole) recordPositionFrom: p)].
            (token isSameAs: tokens Selector)
              ifTrue:
                [selector isNotNil
                   /\ [(Syntax isOptionalSelector: token) not]
                   /\ [(Syntax isKeywordSelector: selector) not
                         \/ [(Syntax isKeywordSelector: token) not]]
                   ifTrue:
                     [p error: 'Bad selector name in method signature: ' ; selector].
                 (Syntax isUnarySelector: token)
                   ifTrue:
                     [selector := token value.
                      (Syntax isOptionalSelector: p peekToken)
                        ifTrue: [token := p nextToken]].
                 (Syntax isBinarySelector: token)
                   ifTrue:
                     [selector := token value].
                 (Syntax isKeywordSelector: token)
                   ifTrue:
                     [selector := selector
                        ifNil: [token value]
                        ifNotNil: [selector ; token value]].
                 (Syntax isOptionalSelector: token)
                   ifTrue:
                     [optKeywords nextPut: token value intern]]
              ifFalse:
                [p undoToken: token.
                 token == tokens BeginBlock ifFalse:
                   [^ ((result `>>
                          [selector := selector intern.
                           roles := roles contents.
                           inputVariables := inputVariables contents.
                           optionalKeywords := optKeywords contents.
                           optionalVariables := optVariables contents. ]
                         as: nodes Signature) recordPositionFrom: p)]]]
         ifFalse:
           [optVariables nextPut: variable.
            (Syntax isOptionalSelector: token)
              ifTrue: [optKeywords nextPut: token value intern]
              ifFalse:
                [p undoToken: token.
                 (token isSameAs: tokens BeginBlock)
                   ifFalse:
                     [^ ((result `>>
                            [selector := selector intern.
                             roles := roles contents.
                             inputVariables := inputVariables contents.
                             optionalKeywords := optKeywords contents.
                             optionalVariables := optVariables contents. ]
                            as: nodes Signature) recordPositionFrom: p)]]]].
  selector ifNil: [p error: 'No selector name specified in method definition'].
  result selector := selector intern.
  result roles := roles contents.
  result inputVariables := inputVariables contents.
  result optionalKeywords := optKeywords contents.
  result optionalVariables := optVariables contents.
  p nextBlock &updating: result
].

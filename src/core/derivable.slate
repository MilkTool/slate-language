d@(Root traits) traitsTally
[
  d traitsWindow _delegates size
].

d@(Derivable traits) traitsReverseDo: block
"Least important to most important traits"
[| index tally |
  index := 0.
  tally := d traitsTally.
  [index = tally]
    whileFalse:
      [block apply*, (d traitsWindow _delegates at: index).
       index += 1]
].

d@(Derivable traits) traitsDo: block
"Most important to least important traits"
[| index |
  index := d traitsTally.
  [index = 0]
    whileFalse:
      [index -= 1.
       block apply*, (d traitsWindow _delegates at: index)]
].

d@(Derivable traits) orderTraits &mixins
"Answers an array of the traits objects in order..."
[| tally order index fixedOrder |
  mixins `defaultsTo: #{}.
  "TODO: Bootstrap-replace these two lines with the third (commented):"
  tally := d traitsTally.
  mixins do: [| :mixin | tally += mixin traitsTally].
  "tally := mixins gather: [| :mixin :tally | tally + mixin traitsTally] &initial: d traitsTally."
  order := mixins newSize: tally.

  index := mixins size + 1.

  order at: 0 put: d traits.
  mixins doWithIndex: [| :each :i | order at: i + 1 put: each traits].

  d traitsDo:
    [| :traits |
     (order identityIncludes: traits)
       ifFalse:
         [order at: index put: traits. index += 1]].

  mixins do:
    [| :mixin |
     mixin traitsDo:
       [| :traits |
        (order identityIncludes: traits)
          ifFalse:
            [order at: index put: traits. index += 1]]].

  (order first: index) reversed

].

"this one ignores the d object"
d@(Derivable traits) orderTraits: mixins
[| tally order index fixedOrder |
  tally := mixins size.
  mixins do: [| :mixin | tally += mixin traitsTally].
  order := Array newSize: tally.

  mixins doWithIndex: [| :each :i | order at: i put: each traits].

  index := mixins size.

  mixins do:
    [| :mixin |
     mixin traitsDo:
       [| :traits |
        (order identityIncludes: traits)
          ifFalse:
            [order at: index put: traits. index += 1]]].

  (order first: index) reversed

].

d@(Derivable traits) derive &mixins &rejects
"Constructs and returns a new prototype based on the argument with a new
Traits object that delegates to the old one. If mixins are specified,
the Traits object inherits from each extra object's Traits in right-to-left
order. Also, the new prototype gains slots from the other objects involved,
except for those named rejects."
[
  mixins `defaultsTo: #{}.
  rejects `defaultsTo: #{}.
  newWindow ::= Cloneable clone.
  newWindow restrictDelegation.
  "newWindow _delegates: (d orderTraits &mixins: mixins)."
  newWindow _delegates: (d orderTraits: mixins).
  newWindow addDelegate: Cloneable clone. "the traits for this object"
  newObj ::= d clone.
  newObj _delegates: {newWindow}.
  mixins do: #(newObj addSlotsFrom: _) `er.
  rejects do: #(newObj removeSlot: _) `er.
  newObj
].

x@(Root traits) definePrototype: protoName &basis &mixins &immutable &doing
"Creates a new prototype with the given name, handles derive calls
transparently, and sets the traits name slot to the name for convenience."
[| result oldProto |
  immutable `defaultsTo: False.
  basis `defaultsTo: (mixins isNil \/ [mixins size = 0] ifTrue: [Cloneable] ifFalse: [mixins at: 0]).
  mixins `defaultsTo: {basis}.
  basis isNil /\ [mixins size = 0] ifTrue: [error: 'Basis or mixin objects must be supplied.'].
  result := basis derive &mixins: mixins.
  immutable ifTrue: [result := result immutably].
  "ensureSlot:is: may return the old value if =, but always returns what
  is installed after the method is done."
  (x hasSlotNamed: protoName)
    ifTrue:
      [oldProto := x atSlotNamed: protoName.
       result := x ensureSlot: protoName is: result unlessSatisfies:
         [| :old oldDelegates newDelegates |
          "Modified equality using == over each delegate pair."
          oldDelegates := old traitsWindow _delegates.
          newDelegates := result traitsWindow _delegates.
          oldDelegates size = newDelegates size
            /\ [oldDelegates keySet allSatisfy:
                  [| :index | (oldDelegates at: index) == (newDelegates at: index)]]].
       result traitsWindow _delegates at: result traitsWindow _delegates size - 1 put: oldProto traits]
    ifFalse: [x addImmutableSlot: protoName valued: result].
  result printName := protoName name.
  doing ifNotNil: [doing doIn: result].
  result
].

x@(Root traits) printName: name
"Add a printName slot on the object's traitsWindow and its traits.
Override as necessary."
[
  x traitsWindow addImmutableSlot: #printNameWindow valued: name.
  x traits addImmutableSlot: #printNameTraits valued: name.
].

x@(Root traits) printName
[
  `conditions: (
    [x hasSlotNamed: #printNameWindow] -> [x printNameWindow ; ' traitsWindow'].
    [x hasSlotNamed: #printNameTraits] -> [x printNameTraits ; ' traits']
  ) otherwise: [x traitsWindow printNameWindow]
].

x@(Root traits) printDelegates
[
  x traitsWindow _delegates do: [| :d | inform: d printName].
].

x@(Root traits) define: slotName recursivelyFrom: builder
"Creates a conservative new immutable slot holding the results of the block.
If such a slot already exists, recursively add slots from the built object
with their values in cases where the slots do not already exist in the
existing object. This is essentially a conservative object-slot tree builder."
[
  newObj ::= builder do.
  (x hasSlotNamed: slotName)
    ifTrue:
      [(x atSlotNamed: slotName)
        ifNil: [x atSlotNamed: slotName put: newObj]
        ifNotNilDo: #(addSlotsFromRecursively: newObj) `er]
    ifFalse: [x addImmutableSlot: slotName valued: newObj].
  x atSlotNamed: slotName
].

x@(Root traits) define: slotName using: builder
"Defines a new slot based on the result of running a block of code."
[
  x addImmutableSlot: slotName valued: builder do
].

x@(Root traits) define: protoName &parents &slots &builder &namespace &owner &immutable &basedOn
"Answer definePrototype: with a default single parent of Cloneable."
[
  immutable `defaultsTo: False.
  slots `defaultsTo: #{}.
  proto ::= builder
    ifNil: [x definePrototype: protoName &basis: basedOn &mixins: parents &immutable: immutable]
    ifNotNil: [x define: protoName using: builder].
  slots do:
    [| :each |
     each ifNotNil: [(each is: Association)
         ifTrue: [(immutable ifTrue: [#addImmutableSlot:valued:] ifFalse: [#addSlot:valued:]) sendTo: {proto. each key. each value}]
         ifFalse: [(immutable ifTrue: [#addImmutableSlot:] ifFalse: [#addSlot:]) sendTo: {proto. each}]]].
  builder ifNil:
    [namespace
      ifNil: [(x isSameAs: Namespace) /\
                [(#surroundings findOn: {x}) ifNil: [True] ifNotNilDo: [| :m | (m apply*, proto) == x]]
                ifTrue: [[| :_ | x] asMethod: #surroundings on: {proto traits}]]
      ifNotNil: [[| :_ | namespace] asMethod: #surroundings on: {proto traits}].
     owner ifNotNil: [[| :_ | owner] asMethod: #owner on: {proto traits}]].
  proto
].

x@(Root traits) defineOddball: name &parents
"Makes a new Oddball."
"TODO: handle the &parents: option."
[x define: name &builder: [Oddball clone]].

x@(Root traits) undefine: name
"Removes a previous slot definition."
[
  x removeSlot: name
].

x@(Cloneable traits) instancesSetting: slotNames to: values
[
  values collect: [| :columnValues newX |
    newX := x new.
    slotNames with: columnValues do:
      [| :slotName :slotValue | newX atSlotNamed: slotName put: slotValue].
    newX]
].

x@(Root traits) commentTemplate
"Answers a basic comment as a String for the object based on its definition."
[
  slotNames ::= x slotNames.
  [| :result |
   result ; x printName asAn capitalize ; ' is ' ; x traits printName asAn ; '.\n'.
   x traitsTally > 1
     ifTrue:
       [result ; 'Mixins: '.
        x traitsDo: [| :trait | result ; trait printName ; ', '].
        result ; '\n'].
   (#size findsSameMethodOn: {x} asOn: {Array})
     ifTrue: [result ; 'It has indexable slots.\n'].
   slotNames isEmpty
     ifTrue: [result ; 'It has no named slots.']
     ifFalse:
       [result ; 'It has named slots: '.
        slotNames do:
          [| :name val |
           result ; name name.
           (val := x atSlotNamed: name)
             ifNotNil: [result ; ' -> ' ; val printString].
           result ; '. ']].
   result ; '\n'
   ] writingAs: ''
].

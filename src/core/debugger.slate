"DebugConsole writeStream collectionLimit := 512.
DebugConsole writeStream nestingLimit := 3.
Stream PrettyPrinter collectionLimit := 512.
Stream PrettyPrinter nestingLimit := 3."

Stream PrettyPrinter collectionLimit := 256.
Stream PrettyPrinter nestingLimit := 2.

conditions define: #Debugger &parents: {Cloneable}
  &slots: {#condition -> Nil.
           #restarts -> ExtensibleArray new.
           #interpreter -> bootstrapInterpreter.
           #resource -> DebugConsole.
           #parser -> Parser.
           #printer -> DebugConsole writer.
           #namespace -> Nil.
           #frames -> ExtensibleArray new.
           #currentFrame -> Nil.
           #baseFramePointer -> Nil.
           #maxBacktraceSize -> 40.
           #basePrompt -> '> '.
           #isSaved -> False. "is the stack live or is it saved?"
	   #quitFlag -> False}.

Debugger traits define: #Namespace &parents: {Namespace} &slots: {}.

ns@(Debugger Namespace traits) new [Debugger Namespace clone].

d@(Debugger traits) refreshWorkspace
[
  d namespace := d namespace newSisterSpace.
  ns@(d namespace) debugger [d].
].

Debugger atSlotNamed: #namespace put: (Debugger Namespace newDelegatingTo: lobby).

d@(Debugger traits) on: resource
[
  d resource := resource.
  d parser := d parser newOn: resource reader.
  d printer := resource writer.
  d printer collectionLimit := Stream PrettyPrinter collectionLimit.
  d printer nestingLimit := Stream PrettyPrinter nestingLimit.
  d
].

d@(Debugger traits) newFor: c &interpreter: interp &console: resource &topMethod: symbol &save: isSaved
[
  interp `defaultsTo: d interpreter.
  resource `defaultsTo: d resource.
  isSaved `defaultsTo: False.
  symbol `defaultsTo: #invokeDebugger.
  d clone `>>
    [| :newD |
     on: resource.
     isSaved := isSaved.
     condition := c.
     restarts := d restarts new.
     namespace := d namespace clone.
     parser currentScope := nodes Namespace for: newD namespace.
     parser parseInteractively:
       ([repl parser parseInteractively]
	  on: SeriousCondition do: #(return: False) `er).
     baseFramePointer := d interpreter framePointerOf: symbol.
     buildFrames. ]
].

c@(Condition traits) invokeDebugger
"The hook for any Condition to start the debugger and enter its loop."
[(Debugger newFor: c) enter].

d@(Debugger traits) findRestarts
"Rebuilds the list of applicable restarts."
[
  d restarts clear.
  conditionStack
    reverseDo:
      [| :context |
       (context is: Restart) /\ [context appliesTo: d condition]
	 ifTrue: [d restarts addLast: context]].
  d restarts
].

d@(Debugger traits) describeRestartAt: index
[| restart |
  restart := d restarts at: index.
  d printer `cache ; 'restart: ' ; index printString ; '\t'.
  restart describeOn: d printer.
].

d@(Debugger traits) describeRestarts
"Describes the restarts available in the context, if any."
[
  d printer `cache ; 'The following condition was signaled:\n'.
  d condition describeOn: d printer.
  d printer ; '\nAvailable Restarts:\n'.
  d restarts isEmpty
    ifTrue: [d printer ; '(none available)']
    ifFalse: [d restarts keysDo: #(d describeRestartAt: _) `er].
].

d@(Debugger traits) stackAt: x
[
  d interpreter stack at: x
].

d@(Debugger traits) stackAt: x put: val
[
  d interpreter stack at: x put: val
].

Debugger traits define: #Frame &parents: {Cloneable}
  &slots: #{#debugger. #framePointer. #nextFramePointer}.

Debugger traits define: #SavedFrame &parents: {Debugger Frame}
  &slots: #{#lexicalContext. #method. #instructionPointer. #resultStackLocation}.

f@(Debugger Frame traits) isSaved [False].
f@(Debugger SavedFrame traits) isSaved [True].

f@(Debugger Frame traits) sizeOnStack [6].

f@(Debugger Frame traits) newOn: d@(Debugger traits) at: fp from: nextFp
[
  fp > f sizeOnStack ifTrue:
    [f cloneSettingSlots: #{#debugger. #framePointer. #nextFramePointer} to: {d. fp. nextFp}]
].

f@(Debugger Frame traits) newAtTopOf: d@(Debugger traits)
[
  f cloneSettingSlots: #{#debugger. #framePointer} to: {d. d baseFramePointer}
].

f@(Debugger Frame traits) nextFrame
[
  f newOn: f debugger at: f callerFrameIndex from: f framePointer
].

f@(Debugger Frame traits) stackAtOffset: offset
[f debugger stackAt: f framePointer + offset].

f@(Debugger Frame traits) stackAtOffset: offset put: value
[f debugger stackAt: f framePointer + offset put: value].

f@(Debugger Frame traits) localForOffset: offset
[
  f method method sourceTree
    ifNotNilDo:
      [| :src |
       (offset < src inputVariables size
	 ifTrue: [src inputVariables]
         ifFalse: [src localVariables]) at: offset ifAbsent: [Nil]]
].

f@(Debugger Frame traits) stackOffsetForLocal: name
[
  f method method sourceTree
    ifNil: [error: 'No source information available for the current frame.']
    ifNotNilDo:
      [| :src |
       (src inputVariables indexOfFirstSatisfying: [| :var | (var name as: String) = name])
	 ifNil:
	   [src localVariables indexOfFirstSatisfying: [| :var | (var name as: String) = name]]]
].

f@(Debugger Frame traits) callerFrameIndex
[f stackAtOffset: -1].

f@(Debugger Frame traits) lexicalContext
[f stackAtOffset: -2].

f@(Debugger Frame traits) method
[f stackAtOffset: -3].

f@(Debugger Frame traits) callerInstructionPointer
[f stackAtOffset: -4].

f@(Debugger Frame traits) instructionPointer
[f debugger stackAt: f nextFramePointer - 4].

f@(Debugger Frame traits) resultStackLocation
[f stackAtOffset: -5].

f@(Debugger Frame traits) previousStackPointer
[f stackAtOffset: -6].

f@(Debugger Frame traits) callerFrameIndex: fp
[f stackAtOffset: -1 put: fp].

f@(Debugger Frame traits) lexicalContext: lc
[f stackAtOffset: -2 put: lc].

f@(Debugger Frame traits) method: m
[f stackAtOffset: -3 put: m].

f@(Debugger Frame traits) callerInstructionPointer: ip
[f stackAtOffset: -4 put: ip].

f@(Debugger Frame traits) instructionPointer: ip
[f debugger stackAt: f nextFramePointer - 4 put: ip].

f@(Debugger Frame traits) resultStackLocation: rp
[f stackAtOffset: -5 put: rp].

f@(Debugger Frame traits) previousStackPointer: sp
[f stackAtOffset: -6 put: sp].

d@(Debugger traits) saveFrame: f@(Debugger Frame traits)
[Debugger SavedFrame cloneSettingSlots: #{#lexicalContext. #method. #instructionPointer. #resultStackLocation. #debugger}
                     to: {f lexicalContext. f method. f instructionPointer. f resultStackLocation. d}].

f@(Debugger Frame traits) describeOn: out
[
  f method method `cacheAs: #method.
  out
    ; 'frame: ' ; (f debugger frames indexOf: f) printString ; '\n'
    ; '  FP: ' ; f framePointer printString  ; '\n'
    ; '  IP: ' ; f instructionPointer printString ; '\n'
    ; 'method: ' ; method printString ; ' @ ' ; method definitionLocation ; '\n'
    ; '  #calls: ' ; method callCount printString ; '\n'
    ; '  #registers: ' ; method registerCount printString ; '\n'
    ; '  code size: ' ; method code size printString ; '\n'
    ; '  source: ' ; method sourceTree printString ; '\n'.
  out ; 'Inputs:\n'.
  0 below: method inputVariables do:
    [| :i | out
       ; ' arg: ' ; i printString
       ; '\t' ; ((f localForOffset: i) ifNil: ['?'] ifNotNilDo: [| :var | var name as: ''])
       ; ' := ' ; (f isSaved ifTrue: ['(not live)'] ifFalse: [(f stackAtOffset: i) printString])
       ; '\n'].
  out ; 'Locals:\n'.
  method inputVariables below: method inputVariables + method localVariables do:
    [| :i | out
       ; ' arg: ' ; i printString
       ; '\t' ; ((f localForOffset: i) ifNil: ['?'] ifNotNilDo: [| :var | var name as: ''])
       ; ' := ' ; (f isSaved ifTrue: ['(not live)'] ifFalse: [(f stackAtOffset: i) printString])
       ; '\n'].
  out ; 'Registers:\n'.
  method inputVariables + method localVariables below: method registerCount do:
    [| :i | out
       ; ' arg: ' ; i printString
       ; '\t' ; (f isSaved ifTrue: ['(not live)'] ifFalse: [(f stackAtOffset: i) printString])
       ; '\n'].
  out ; 'Decompiled: ' ; '\n'.
  [method printInstructionsOn: out &condensed: True]
    on: SeriousCondition do: [| :c | out ; '(instructions unavailable)'. c return: Nil].
].

f@(Debugger Frame traits) reset
[
  f instructionPointer := 0.
].

f@(Debugger Frame traits) restart
"Proceed execution from the start of this frame."
[
  f reset.
  f debugger quitFlag := True.
].

d@(Debugger traits) topFrame
[d Frame newAtTopOf: d].

d@(Debugger traits) buildFrames
[| frame |
  d baseFramePointer ifNil:
    [error: 'Base frame pointer is nil. Cannot build stack frames.\n'. ^ Nil].
  d frames := d frames new `>> [add: (frame := d topFrame). ].
  [(frame := frame nextFrame) isNotNil] whileTrue:
    [d frames add:
       (d isSaved
          ifTrue: [d saveFrame: frame]
          ifFalse: [frame])].
].

d@(Debugger traits) prompt
[
  [| :out |
   out ; 'slate-debug'.
   d restarts isEmpty
     ifFalse: [out ; '[0'.
	       d restarts size > 1 ifTrue:
		 [out ; '..' ; d restarts indexLast printString].
	       out ; ']'].
   d currentFrame ifNotNilDo: [| :frame | out ; '[frame: ' ; ((d frames indexOf: frame) as: String) ; ']'].
   out ; d basePrompt] writingAs: ''
].

d@(Debugger traits) signalRestartAt: index
"Takes the restart option number from the queryRestart and invokes it."
[
  (d restarts acceptsKey: index)
    ifTrue: [((d restarts at: index) newCondition: d condition)
	       `>> [queryFrom: d. signal]]
    ifFalse: [d resource ; index printString ; ' is not a valid restart.\n']
].

d@(Debugger traits) printFrameLineAt: index &stream: out &showLocation: showLocation
[
  out `defaultsTo: d printer.
  showLocation `defaultsTo: False.
  (d frames at: index) `cacheAs: #frame.
  out ; 'frame: ' ; index printString ; (d currentFrame = frame ifTrue: [' *'] ifFalse: ['']) ; '\t' ; frame method printString.
  showLocation ifTrue: [out ; ' @ ' ; frame method method definitionLocation].
  out ; '\n'.
].

d@(Debugger traits) printBacktrace &fromFrame: frameIndex &limit: limit &stream: out &showLocation: showLocation
[ 
  limit `defaultsTo: d maxBacktraceSize.
  frameIndex `defaultsTo: ((d frames identityIndexOf: d currentFrame) - (limit // 2) max: 0).
  out `defaultsTo: d printer.
  showLocation `defaultsTo: True.
  out ; 'Backtrace (method @ source): \n'.
  frameIndex below: (d frames length min: frameIndex + limit) do:
    [| :index | d printFrameLineAt: index &showLocation: showLocation].
].

d@(Debugger traits) frame: index
"Selects the frame at the given index."
[
  d currentFrame := d frames at: index ifAbsent: [Nil]
].

d@(Debugger traits) top
[
  d currentFrame := d frames first
].

d@(Debugger traits) bottom
[
  d currentFrame := d frames last
].

d@(Debugger traits) up
[
  (d frames before: d currentFrame)
    ifNil: [error: 'You are at the top of the stack and cannot go up a frame']
    ifNotNilDo: [| :frame | d currentFrame := frame]
].

d@(Debugger traits) down
[
  (d frames after: d currentFrame)
    ifNil: [error: 'You are at the bottom of the stack and cannot go down a frame']
    ifNotNilDo: [| :frame | d currentFrame := frame]
].

d@(Debugger traits) currentFrameAt: n@(Integer traits)
[
  d currentFrame isSaved ifTrue: [error: 'Cannot get value in saved frame'].
  d currentFrame
    ifNil: [^ (d printer ; 'No frame currently selected. Use "frame: N"')]
    ifNotNilDo:
      [| :frame |
       frame method method `cacheAs: #method.
       d printer ; 'register[' ; n printString ; ']@' ; (frame stackAtOffset: n) printName
	 ; '\t' ; (frame stackAtOffset: n) printString ; '\n'.
       frame stackAtOffset: n]
].

d@(Debugger traits) currentFrameAt: n@(Integer traits) put: val
[
  d currentFrame isSaved ifTrue: [error: 'Cannot set value in saved frame'].
  d currentFrame stackAtOffset: n put: val
].

d@(Debugger traits) currentFrameAt: name
[
  (d currentFrame stackOffsetForLocal: name)
    ifNil: [error: 'Input or Local Variable not found']
    ifNotNilDo: #(d currentFrameAt: _) `er
].

d@(Debugger traits) currentFrameAt: name put: val
[
  (d currentFrame stackOffsetForLocal: name)
    ifNil: [error: 'Input or Local Variable not found']
    ifNotNilDo: #(d currentFrameAt: _ put: val) `er
].

d@(Debugger traits) printFrame
[
  d currentFrame
    ifNil: [^ (d printer ; 'No frame currently selected. Use "frame: N"')]
    ifNotNilDo: [| :frame | frame describeOn: d printer]
].

ns@(Debugger Namespace traits) frame
[ns debugger printFrame].
ns@(Debugger Namespace traits) True
[True].
ns@(Debugger Namespace traits) False
[False].
ns@(Debugger Namespace traits) frame
[ns debugger currentFrame].
ns@(Debugger Namespace traits) frame: n
[ns debugger `>> [frame := n. printFrame]].
ns@(Debugger Namespace traits) top
[ns debugger `>> [top. printFrame]].
ns@(Debugger Namespace traits) up
[ns debugger `>> [up. printFrame]].
ns@(Debugger Namespace traits) down
[ns debugger `>> [down. printFrame]].
ns@(Debugger Namespace traits) arg: n
[ns debugger currentFrameAt: n].
ns@(Debugger Namespace traits) arg: n put: newVal
[ns debugger currentFrameAt: n put: newVal].
ns@(Debugger Namespace traits) frames &fromFrame: frameIndex &limit: n &showLocation: showLocation
[ns debugger printBacktrace &fromFrame: frameIndex &limit: n &showLocation: showLocation].
ns@(Debugger Namespace traits) backtrace &fromFrame: frameIndex &limit: n &showLocation: showLocation
[ns debugger printBacktrace &fromFrame: frameIndex &limit: n &showLocation: showLocation].
ns@(Debugger Namespace traits) bt &fromFrame: frameIndex &limit: n &showLocation: showLocation
[ns debugger printBacktrace &fromFrame: frameIndex &limit: n &showLocation: showLocation].
ns@(Debugger Namespace traits) restarts
[ns debugger describeRestarts].
ns@(Debugger Namespace traits) restart: index
[ns debugger signalRestartAt: index].
ns@(Debugger Namespace traits) : index
[ns debugger signalRestartAt: index].
ns@(Debugger Namespace traits) quit
[ns debugger quitFlag := True].
ns@(Debugger Namespace traits) return: value
[ns debugger return: value].

ns@(Debugger Namespace traits) help
[
  ns debugger printer
   ; 'The Debugger is a specialized REPL that evaluates expressions within the method currently being debugged. Certain messages are provided for changing the state of the debugger, as follows:\n'
   ; ': index. (or restart: index.)\n\tSignal the restart at the given index\n'
   ; 'backtrace (or "bt")\n\tPrint the backtrace\n'
   ; 'frame\n\tPrint the current frame\n'
   ; 'frame: N\n\tSet the current frame\n'
   ; 'frame restart\n\tResume execution from the start of the current frame\n'
   ; 'down\n\tMove down one frame (to the caller)\n'
   ; 'up\n\tMove up one frame (in the callee direction)\n'
   ; 'arg: N\n\tDisplays the frame\'s register at index N\n'
   ; 'arg: N put:\n\tSets the frame\'s register at index N\n'
   ; 'restarts\n\tPrint the currently available restarts\n'
   ; 'help\n\tPrint this help listing\n'.
].

ns@(Debugger Namespace traits) ? [ns help].

ns@(Debugger Namespace traits) ? obj [ns helpFor: obj].

ns@(Debugger Namespace traits) didNotUnderstand: message at: position
[
  position > 0
   ifTrue: [resend]
   ifFalse:
     [| selector |
      selector := message selector.
      "Handle an accessor."
      selector isUnarySelector
        ifTrue: [^ [ns arg: selector]].
      "Handle a mutator."
      selector isKeywordSelector /\ [selector arity = 2]
	ifTrue: [^ [ns arg: selector keywords first put: message arguments second]].
      resend]
].

d@(Debugger traits) enter
"The main interactive debugger loop."
[
  d printer `cache ; 'Debugging: ' ; d condition printName ; '\n'.
  d refreshWorkspace.
  d findRestarts.
  d top.
  "d printer ; d frames printString."
  "d printBacktrace."
  d describeRestarts.
  d printer ; '\nEnter \'help.\' for instructions.\n'.
  [
  "Print out the restarting options with a prompt and numeric labels, and read
in the selected option number, returning it if valid."
  d printer ; d prompt.
  d printer flush.
  [| expr result restartNumeric |
   [expr := d parser next] on: Stream Exhaustion do:
     [| :c | c stream == d resource reader ifTrue: [lobby exit: 1]].
   result := expr evaluateIn: d namespace.
   restartNumeric := (expr is: nodes Literal) /\ [result is: Integer].
   "Exclude selections of restarts and other commands from printing."
   restartNumeric \/
     [(expr is: nodes Message)
        /\ [#{#:. #restart:. #frame. #frame:. #restarts. #help. #bt. #backtrace} includes: expr selector]]
      ifFalse:
        [[result printOn: d printer]
           on: Error do: [| :c | d printer ; '<Printing failed>'].
         d printer newLine.
         d printer flush].
   restartNumeric ifTrue: [d signalRestartAt: result].
   ] on: SeriousCondition
    do: [| :c |
      d printer ; '\nThe following condition was signaled from within the debugger:\n'.
      c describeOn: d printer.
      (c is: Stream Exhaustion) /\ [c stream resource handle = 0]
        ifTrue: [d printer ; 'End of input, exiting...\n'. lobby exit: 1].
      c exit].
  d quitFlag] whileFalse.
].

collections define: #Dictionary &parents: {Set. Mapping} &slots: {#values -> (Array newSize: 10)}.

Set identityHash.
Mapping identityHash.
Dictionary identityHash.



"Dictionary uses two separate arrays to store its keys and values; it behaves
as a Set of key-value pairs (but doesn't store Associations as in Smalltalk)."
"Stores the associated values for the array's objects which are the keys.
The correspondence is per-index, and there can obviously be only one value
per key."

d@(Dictionary traits) copy
[resend `>> [values: d values copy. ]].

d@(Dictionary traits) new &capacity: n
[resend `>> [| :newD | values: (d values new &capacity: ((n ifNil: [0]) max: newD contents size)). ]].

collections addSlot: #IdentityDictionary valued: (Dictionary copy `>>
	    [hashBlock: #identityHash`er.
	     equalsBlock: #==`er. ]).
"IdentityDictionary is an alternate prototype Dictionary using ==-based
comparison and hashing."

d@(Dictionary traits) acceptsKey: _@Nil
[False].

d@(Dictionary traits) = e@(Dictionary traits)
[
  d == e
   \/ [d size = e size
	 /\ [d keysAndValuesDo:
	       [| :key :value |
		(e at: key ifAbsent: [^ False]) = value ifFalse: [^ False]].
	     True]]
].

d@(Dictionary traits) clear
[
  resend.
  d values clear.
  d
].

d@(Dictionary traits) includes: obj
"Returns whether the Dictionary includes the object as a value."
[
  (d detect: [| :each | d equalsBlock applyWith: obj with: each]) isNotNil
].

d@(Dictionary traits) includesIdentity: obj
"Returns whether the object is identical to some keyed value."
[
  (d detect: [| :each | obj == each]) isNotNil
].

d@(Dictionary traits) occurrencesOf: obj
"The number of indexed values equal to obj."
[| count |
  count: 0.
  d do: [| :each | (d equalsBlock applyWith: obj with: each)
    ifTrue: [count: count + 1]].
  count
].

d@(Dictionary traits) addAll: map@(Mapping traits)
"Adds all of the key-value pairs to the Dictionary. Notice that this works
for any Mapping, but that other collections will not do."
[
  d == map ifFalse:
    [map keysAndValuesDo: [| :key :value | d at: key put: value]].
  map
].

d@(Dictionary traits) addAll: seq@(Sequence traits)
[
  seq doWithIndex: [| :assoc :index |
    (assoc isSameAs: Association)
      ifTrue: [d add: assoc]
      ifFalse: [d at: index put: assoc]].
  seq
].
      
d@(Dictionary traits) declare: key from: e@(Dictionary traits)
"Add key to d, unless the key already exists. Remove key from e
and move its association to d."
[
  (d includesKey: key) ifTrue: [^ d].
  (e includesKey: key)
    ifTrue: [d add: (e associationAt: key).
        e removeKey: key]
    ifFalse: [d add: key -> Nil]
  d
].

d@(Dictionary traits) associationAt: key ifAbsent: block
[| index |
  index: (d scanFor: key).
  (d contents at: index)
    ifNil: [block do]
    ifNotNil: [(d contents at: index) -> (d values at: index)]
].

d@(Dictionary traits) associationAt: key
[
  d associationAt: key ifAbsent: [key keyNotFoundOn: d]
].

d@(Dictionary traits) at: key ifAbsent: block
[| index |
  index: (d scanFor: key).
  (d contents at: index)
    ifNil: [block do]
    ifNotNil: [d values at: index]
].

d@(Dictionary traits) add: assoc@(Association traits)
"Adds a new key value pair to the Dictionary from an assocation.
For example: Dictionary new `>> [ add: 'first' -> 'Joe Henry'. ]."
[
  d at: assoc key put: assoc value.
  assoc
].

d@(Dictionary traits) at: key put: obj
[| index |
  index: (d scanFor: key).
  (d contents at: index) ifNil:
    [d contents at: index put: key.
     d tally: d tally + 1].
  d values at: index put: obj.
  d fullCheck.
  obj
].

d@(Dictionary traits) acceptsKey: _@Nil [False].
d@(Dictionary traits) at: _@Nil put: obj
[error: 'Dictionary cannot accept Nil keys.'].
"TODO: extend Dictionary to handle Nil keys."

d@(Dictionary traits) keyAtValue: obj ifAbsent: block
[
  d keysAndValuesDo: [| :key :value |
      (d equalsBlock applyWith: obj with: value) ifTrue: [^ key]].
  block do
].

d@(Dictionary traits) keyAtIdentityValue: obj ifAbsent: block
[
  d values doWithIndex: [| :each :index | each == obj
    ifTrue: [^ (d contents at: index)]].
  block do
].

d@(Dictionary traits) keyAtIdentityValue: obj
[
  d keyAtIdentityValue: obj ifAbsent: [obj elementNotFoundOn: d]
].

d@(Dictionary traits) keySet
[| result |
  result: (Set newSizeOf: d).
  result equalsBlock: d equalsBlock.
  d keysDo: [| :key | result add: key].
  result
].

d@(Dictionary traits) valueSet
[| result |
  result: (Set newSizeOf: d).
  result equalsBlock: d equalsBlock.
  d valuesDo: [| :value | result add: value].
  result
].

d@(Dictionary traits) keysAndValuesDo: block
[
  d isEmpty ifTrue: [^ d].
  d contents doWithIndex:
    [| :each :index | each ifNotNil:
      [block applyWith: each with: (d values at: index)]]
].

d@(Dictionary traits) keysDo: block
[
  d isEmpty ifTrue: [^ d].
  d contents doWithIndex:
    [| :each :index | each ifNotNil: [block applyWith: each]]
].

d@(Dictionary traits) valuesDo: block
[
  d isEmpty ifTrue: [^ d].
  d contents doWithIndex:
    [| :each :index | each ifNotNil: [block applyWith: (d values at: index)]]
].

d@(Dictionary traits) keysAndValuesRemove: block
"Removes key-value pairs that satisfy the two-argument block."
[| removals |
  removals: ExtensibleArray new.
  d keysAndValuesDo: [| :key :value | (block applyWith: key with: value)
      ifTrue: [removals add: key]].
  removals do: [| :each | d removeKey: each].
  d
].

d@(Dictionary traits) removeKey: key ifAbsent: block
[| index value |
  index: (d scanFor: key).
  index ifNil: [^ block do].
  d contents at: index put: Nil.
  d values at: index put: Nil.
  d tally: d tally - 1.
  d fixCollisionsFrom: index.
  value
].

d@(Dictionary traits) removeKey: key
[
  d removeKey: key ifAbsent: [key keyNotFoundOn: d]
].

d@(Dictionary traits) remove: key
[
  d removeKey: key
].

d@(Dictionary traits) remove: key ifAbsent: block
[
  d removeKey: key ifAbsent: block
].

d@(Dictionary traits) associationsDo: block
[
  d isEmpty ifTrue: [^ d].
  d contents doWithIndex:
    [| :each :index | each ifNotNil:
      [block applyWith: each -> (d values at: index)]]
].

d@(Dictionary traits) do: block
"Applies a single-argument block to each keyed value in the Dictionary.
Equivalent to valuesDo:."
[d valuesDo: block].

d mapSelect: block into: result@(Dictionary traits)
"Filter the dictionary by values satisfying a block."
[d keysAndValuesDo:
  [| :key :value | (block applyWith: key with: value)
      ifTrue: [result noCheckAt: key put: value]].
  result
].

d select: block into: result@(Dictionary traits)
[d mapSelect: [| :_ :value | block applyWith: each] into: result].
  
d@(Dictionary traits) collect: block
"Generate a new collection based on applying the block to each value."
[| result |
  result: ExtensibleArray new.
  d do: [| :each | result add: (block applyWith: each)].
  result
].

d@(Dictionary traits) swap: index1 with: index2
[
  d contents swap: index1 with: index2.
  d values swap: index1 with: index2.
  d
].

d@(Dictionary traits) noCheckAt: key put: value
[| index |
  index: (d scanFor: key).
  d contents at: index put: key.
  d values at: index put: value.
  d tally: d tally + 1.
  d
].

d@(Dictionary traits) noCheckAdd: assoc
[
  d noCheckAt: assoc key put: assoc value
].

d@(Dictionary traits) growBy: growthAmount
[| tempDict |
  tempDict: (d new &capacity: d contents size + growthAmount).
  d keysAndValuesDo: [| :key :value | tempDict noCheckAt: key put: value].
  d contents: tempDict contents.
  d values: tempDict values.
  d
].

d@(Dictionary traits) rehash
[| tempDict |
  tempDict: d newSameSize.
  d keysAndValuesDo: [| :key :value | tempDict noCheckAt: key put: value].
  d contents: tempDict contents.
  d values: tempDict values.
  d
].

d@(Dictionary traits) scanFor: obj
"Scans the key array for the first empty slot or an element matching the
object. Returns the index at which the object is used as a key, or Nil if
it's not found and the Dictionary is full."
[| key start end block |
  end: d contents size.
  start: ((d hashBlock applyWith: obj) \\ end) + 1.
  block: [| :index |
      (key: (d contents at: index)) isNil \/
          [d equalsBlock applyWith: obj with: key]
        ifTrue: [^ index]].
  start below: end do: block.
  0 below: start do: block.
  Nil
].

x@(Root traits) slotNamesAndValues
"Answers a Dictionary of the slot names and values from the argument."
[| result |
  result: Dictionary new.
  x slotNamesAndValuesDo: [| :name :value | result at: name put: value].
  result
].

streams define: #DummyStream &parents: {ReadWriteStream}.
"DummyStreams always return Nil's and can't be repositioned or written to,
but pretend that they can, eating up input and providing no output."

s@(Stream traits) newFrom: _@Nil [DummyStream].

_@Nil iterator [DummyStream].
_@Nil reader [DummyStream].
_@Nil writer [DummyStream].

_@(DummyStream traits) terminal [Nil].

_@(DummyStream traits) next [].
_@(DummyStream traits) next: _ [].
_@(DummyStream traits) next: _ putInto: _ startingAt: _ [].
_@(DummyStream traits) nextPut: _ [].
_@(DummyStream traits) nextPutAll: _ [].
_@(DummyStream traits) next: _ putAll: _ startingAt: _ [].
_@(DummyStream traits) position [0].
_@(DummyStream traits) position: _ [].
_@(DummyStream traits) position: _ [].

Method traits define: #ReadStream &parents: {ReadStream} &slots: {#block -> []}.
"Method ReadStreams take their next element from the recalculation of a code
closure with no arguments. This is effectively a means to poll some condition
or to generate a sequence."

s@(Stream traits) newFrom: block@(Method traits)
[block ReadStream newOn: block].

m@(Method traits) iterator
"Mimics the Collection interface for making iterators that target them."
[m reader].

m@(Method traits) reader
"Mimics the Collection interface for making ReadStreams that target them."
[m ReadStream newOn: m].

s@(Method ReadStream traits) on: block
[
  s block: block.
  s
].

s@(Method ReadStream traits) terminal [s block].

s@(Method ReadStream traits) next
[
  s block do
].

s@(Method ReadStream traits) next: n putInto: seq startingAt: start
"Incrementally accumulates numRead in case there is an error running the block."
[| numRead |
  numRead: 0.
  start below: (start + n min: seq size) do:
    [| :seqIndex | seq at: seqIndex put: s block do. numRead: numRead + 1].
  numRead
].

s@(Method ReadStream traits) hasAnEnd [False].
s@(Method ReadStream traits) isAtEnd [False].

Method traits define: #WriteStream &parents: {WriteStream} &slots: {#block -> [| :_ |]}.
"Method WriteStream applies each fed element into the block as its sole
argument."

s@(Stream traits) newTo: block@(Method traits)
[block WriteStream newOn: block].

m@(Method traits) writer
"Mimics the Collection interface for making ReadStreams that target them."
[m WriteStream newOn: m].

s@(Method WriteStream traits) on: block
[
  s block: block
].

s@(Method WriteStream traits) terminal [s block].

s@(Method WriteStream traits) nextPut: obj
[
  s block applyWith: obj
].

s@(Method WriteStream traits) next: n putAll: seq startingAt: start
"Incrementally accumulates numWritten in case there is an error running the block."
[| numWritten |
  numWritten: 0.
  start below: (start + n min: seq size) do:
    [| :seqIndex | s block applyWith: (seq at seqIndex). numWritten: numWritten + 1].
  numWritten
].

s@(Method WriteStream traits) hasAnEnd [False].
s@(Method WriteStream traits) isAtEnd [False].

streams define: #Counter &parents: {WriteStream} &slots: {#value -> 0}.
"Provides a Stream-compatible way to accumulate a value - one for each element
written; this is useful with an EchoStream."

c@(Counter traits) on: n
[
  c value: n.
  c
].

c@(Counter traits) terminal [c value].

n@(Number traits) writer
[Counter newOn: n].

c@(Counter traits) nextPut: _
[c value: c value + 1].

c@(Counter traits) nextPutAll: col
[c value: c value + col size].

c@(Counter traits) next: n putAll: _ startingAt: _
[c value: c value + n].

c@(Counter traits) hasAnEnd [False].
c@(Counter traits) isAtEnd [False].

c@(Counter traits) contents
[c value].

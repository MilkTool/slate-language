streams define: #LimitedProcessor &parents: {DelegatingProcessor} &slots: {
  #count -> 0
}.

s@(LimitedProcessor traits) for: n
[
  s clone `>> [count := n. ]
].

s@(LimitedProcessor traits) isAtEnd
[
  s count <= s count zero \/ [resend]
].

s@(LimitedProcessor traits) next: n putInto: seq startingAt: start
[
  s count >= n
    ifTrue: [s count -= n. resend]
    ifFalse: [n := s count. s count := 0. resend]
].

streams define: #InOutProcessor &parents: {StreamProcessor} &slots: {
  #inBuffer.
  #outBuffer
}.

p@(InOutProcessor traits) on: s
[
  resend `>> [inBuffer := s source collectionType new. outBuffer := s collectionType new. ]
].

s@(InOutProcessor traits) canProcessMore
[
  s inBuffer isNotEmpty \/ [s source isAtEnd not]
].

s@(InOutProcessor traits) next: n putInto: seq startingAt: start
[| buf amt |
  [s outBuffer size < n /\ [s canProcessMore]]
    whileTrue: [s fillInBuffer: s requiredInSize. s process].
  amt := n min: s outBuffer size.
  seq replaceFrom: start to: start + amt - 1 with: s outBuffer.
  s outBuffer := s outBuffer allButFirst: amt.
  amt
].

s@(InOutProcessor traits) isAtEnd
[
  s outBuffer isEmpty /\ s inBuffer isEmpty /\ [resend]
].

s@(InOutProcessor traits) requiredInSize
"This is the amount we try to get into the in buffer every time. Useful
if you're looking for a search string of a specified size. Override in child classes."
[
  4
].

"doesn't/can't guarantee that it's filled!"
s@(InOutProcessor traits) fillInBuffer: neededSize
[| nextBuffer amt needed |
  s inBuffer size >= neededSize ifTrue: [^ Nil].
  needed := neededSize - s inBuffer size.
  nextBuffer := s source collectionType new &capacity: needed.
  amt := s source next: needed putInto: nextBuffer.
  s inBuffer := s inBuffer ; (nextBuffer first: amt).
].

s@(InOutProcessor traits) process
[
  s passInThrough
].

s@(InOutProcessor traits) passInThrough
[
  s write: s inBuffer.
  s inBuffer := s source collectionType new.
].

s@(InOutProcessor traits) write: seq
[
  s outBuffer := s outBuffer ; seq
].

s@(InOutProcessor traits) skip: amt
[
  s inBuffer := s inBuffer allButFirst: amt
].


s@(InOutProcessor traits) guaranteedReadable
[
  s outBuffer size
].

streams define: #SimpleReplacementStream &parents: {InOutProcessor} &slots: {
  #search.
  #replace
}.

s@(SimpleReplacementStream traits) find: x replaceWith: y
[
  s new `>> [search: x. replace: y. ]
].

s@(SimpleReplacementStream traits) requiredInSize
[
  s search size max: 1
].

"fixme don't cons as much"
s@(SimpleReplacementStream traits) process
[
  s search size < 1 ifTrue: [^ s passInThrough].

  [s inBuffer size >= s requiredInSize]
    whileTrue: 
      [(s inBuffer first: s search size) = s search 
         ifTrue: [s write: s replace. s skip: s search size]
         ifFalse: [s write: (s inBuffer first: 1). s skip: 1 ]].

  s source isAtEnd ifTrue: [s passInThrough]
].

s@(Sequence traits) find: find@(Sequence traits) replaceWith: replace@(Sequence traits)
[
  [| :out |
   s reader >> (SimpleReplacementStream find: find replaceWith: replace) >> out
  ] writingAs: s
].

streams define: #MultiProcessor &parents: {DelegatingProcessor} &slots: {#children}.

mp@(MultiProcessor traits) using: s
[
  mp new `>> [children: s. ]
].

mp@(MultiProcessor traits) on: s
[
  mp children isEmpty ifTrue: [^ (error: 'No children for processor')].

  "fixme we should be able to write the following in a better way"
  mp children first on: s.
  (1 to: mp children size - 1 by: 1) do: [|:i| (mp children at: i) on: (mp children at: i - 1)].
  mp source: mp children last.

  mp
].

d@(Dictionary traits) keysAndValuesCollect: block
[
  d isEmpty ifTrue: [^ #{}].
  result ::= ExtensibleArray new.
  d keysAndValuesDo: [| :key :val | result add: (block applyWith: key with: val)].
  result
].

s@(Sequence traits) sequentialFindAndReplace: dict@(Dictionary traits)
[
  [| :out |
   s reader
     >> (MultiProcessor using: 
           (dict keysAndValuesCollect: [| :key :val | SimpleReplacementStream find: key replaceWith: val]))
     >> out] writingAs: s
].

streams define: #MultiReplacementStream &parents: {InOutProcessor} &slots: {
  #dict -> Dictionary new.
  #cachedSize
}.

s@(MultiReplacementStream traits) from: d@(Dictionary traits)
[
  s new `>> [dict := d. ]
].

s@(MultiReplacementStream traits) requiredInSize
[
  s cachedSize `defaultsTo: (s dict keys collect: #size `er) max
].

s@(MultiReplacementStream traits) process
[| hasMatched |
  s requiredInSize < 1 ifTrue: [^ s passInThrough].
  [s inBuffer size >= 1]
    whileTrue: 
      [hasMatched := False.
       s dict keysAndValuesDo:
         [| :key :val |
          (s inBuffer beginsWith: key)
            ifTrue:
              [s write: val.
               s skip: key size.
               hasMatched := True]].
       hasMatched ifFalse:
         [s write: s inBuffer first.
          s skip: 1]].
].

s@(Sequence traits) findAndReplace: dict@(Dictionary traits)
[
  [| :out |
   s reader >> (MultiReplacementStream from: dict) >> out
  ] writingAs: s
].

"todo: look at using extensible arrays"
streams define: #LineProcessor &parents: {InOutProcessor} &slots: {#currentLine}.

s@(LineProcessor traits) collectionType [Array].

s@(LineProcessor traits) process
[| pos lastChar |
  s currentLine `defaultsTo: (s inBuffer newSize: 0).
  (pos := s inBuffer indexOfFirstSatisfying: [| :char | lastChar := char. char = $\n \/ [char = $\r]])
    ifNil:
      [s currentLine := s currentLine ; s inBuffer.
       s inBuffer := s inBuffer new.
       ^ Nil].
  (s currentLine := s currentLine ; (inBuffer first: pos))
    isEmpty ifFalse: [s currentLine last = $\r ifTrue: [s currentLine := s currentLine allButLast]].
  s write: s currentLine.
  s inBuffer := inBuffer allButFirst: pos.
  s fillInBuffer: 1.
  s inBuffer isEmpty not /\ [s inBuffer first = $\n] /\ [lastChar = $\r]
    ifTrue: [s inBuffer := s inBuffer allButFirst].
].

s@(LineProcessor traits) next: n putInto: seq startingAt: start
[| buf amt |
  [s outBuffer size < n /\ [s canProcessMore]] whileTrue:
    [s fillInBuffer: s requiredInSize. s process].
  amt := n min: s outBuffer size.
  seq replaceFrom: start to: start + amt - 1 with: s outBuffer.
  s outBuffer := s outBuffer allButFirst: amt.
  amt
].


lobby ensureNamespace: #Shell.

Shell define: #FileCollection &parents: {Collection}.
Shell define: #FileArray &parents: {ExtensibleArray. Shell FileCollection}.
Shell define: #FileSet &parents: {Set. Shell FileCollection}.
Shell define: #FormatSpecification &parents: {Cloneable} &slots: {#spec}.

Shell FormatSpecification traits define: #codes -> (Dictionary new*,
  $p -> [|:l| l as: String],
  $n -> #name `er,
  $t -> #fileType `er,
  $b -> #baseName `er,
  $% -> [|:l| '%'],
  $f -> [|:l| [|:s| l writeNameVersionTypeOn: s] writingAs: String]).

ffs@(Shell FormatSpecification traits) newFrom: s@(String traits)
[| input writer |
  writer := ExtensibleArray new writer.
  input := s reader.
  writer nextPut: (input upTo: $%).
  input do: [| :each |
    writer nextPut: (Shell FormatSpecification codes at: each ifAbsent: [error: 'bad code: ' ; each printString]).
    writer nextPut: (input upTo: $%)].
  ffs new `>> [spec := writer contents reject: [| :each | (each is: String) /\ [each isEmpty]]. ]
].

ffs@(Shell FormatSpecification traits) format: f@(File Locator traits)
[
  [| :s |
   ffs spec do:
     [| :each |
      (each is: String)
        ifTrue: [s nextPutAll: each]
        ifFalse: [s nextPutAll: (each applyWith: f)]]] writingAs: String
].

d@(File Locator traits) maskedEntries: mask@(String traits) do: block
[
  d maskedEntries: (Shell MaskPattern newOn: mask) do: block
].

l maskedEntries: mask@(Regex Regex traits) do: block
[ 
  l maskedEntries: (Regex Matcher newOn: mask) do: block
].

l@(File Locator traits) maskedEntries: mask do: block
[ 
  (Directory new `>> [locator := l. ]) maskedEntries: mask do: block
].

d@(Directory traits) collectMasked: mask
[
  [| :result | d maskedEntries: mask do: #(result nextPut: _) `er]
    writingAs: Shell FileArray
].

d@(File Locator traits) /* mask
[d collectMasked: mask].

d@(Directory traits) /* mask
[d locator collectMasked: mask].

d@(Directory traits) maskedEntries: mask do: block
[
  d reader reset select: [| :each | mask matches: each]
    (do: [block applyWith: (File Locator new `>> [readFilenameFrom: each. ])]).
].

a@(Shell FileCollection traits) format: formatString@(String traits)
[| fmtSpec |
  fmtSpec := Shell FormatSpecification newFrom: formatString.
  a collect: [| :each | fmtSpec format: each]
].

a@(Shell FileCollection traits) interpolate
[| *args fmtSpecs |
  fmtSpecs := args collect: [|:each| Shell FormatSpecification newFrom: each].
  a collect: [|:each| fmtSpecs collect: [|:spec| spec format: each]]
].

d@(Directory traits) find: block &maxDepth: maxDepth
[| result |
  maxDepth `defaultsTo: PositiveInfinity.
  result := Shell FileSet new writer.
  d select: block into: result depth: maxDepth.
  result contents
].

d@(Directory traits) select: block into: result depth: maxDepth
[| entries reader |
  maxDepth isZero ifTrue: [^ Nil].
  entries := d entries collect: [|:each| (File RelativeLocator newFrom: d) `>> [readPathElementsFrom: each reader. ]].
  reader := entries reader.
  (reader select: block) >> result.
  entries do:
    [| :each info |
     (info := each fileInfo) isNotNil /\ [info isDirectory] /\ [info isLink not]
       /\ [each name ~= '..'] /\ [each name ~= '.']
       ifTrue: [(d childNamed: each name) select: block into: result depth: maxDepth - 1]].
].
